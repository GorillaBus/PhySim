{"version":3,"sources":["node_modules/browser-pack/_prelude.js","projects/collisioner/app.js","src/feature-toggle.js","src/lib/AnimationPlayer.js","src/lib/Collide.js","src/lib/Collisioner.js","src/lib/Mapper.js","src/lib/Particle.js","src/lib/ParticleManager.js","src/lib/Utils.js"],"names":[],"mappings":"AAAA;;;ACCA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,OAAO,MAAP,GAAgB,YAAM;AAClB,MAAM,SAAS,SAAS,cAAT,CAAwB,QAAxB,CAAf;AACA,MAAM,MAAM,OAAO,UAAP,CAAkB,IAAlB,CAAZ;AACA,MAAM,QAAQ,OAAO,UAArB;AACA,MAAM,SAAS,OAAO,WAAP,GAAmB,CAAlC;AACA,MAAM,SAAS,EAAE,GAAG,QAAM,CAAX,EAAc,GAAG,SAAO,CAAxB,EAAf;;AAEA,SAAO,MAAP,GAAgB,MAAhB;AACA,SAAO,KAAP,GAAe,KAAf;;AAEA,MAAI,SAAS,8BAAoB,EAAE,KAAK,EAAP,EAApB,CAAb;AACA,MAAI,aAAa,CAAjB;;AAEA;AACA,MAAI,YAAY,IAAI,KAAJ,CAAU,GAAV,CAAhB;AACA,OAAK,IAAI,IAAE,CAAX,EAAc,IAAE,UAAU,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,cAAU,CAAV,IAAe,uBAAa;AAC1B,SAAG,gBAAM,WAAN,CAAkB,CAAlB,EAAqB,QAAM,EAA3B,CADuB;AAE1B,SAAG,gBAAM,WAAN,CAAkB,CAAlB,EAAqB,SAAO,EAA5B,CAFuB;AAG1B,iBAAW,KAAK,MAAL,KAAgB,KAAK,EAArB,GAA0B,CAHX;AAI1B,aAAO,CAJmB;AAK1B,YAAM,gBAAM,WAAN,CAAkB,CAAlB,EAAqB,EAArB,CALoB;AAM1B,iBAAW,EAAE,GAAG,KAAL,EAAY,GAAG,MAAf;AANe,KAAb,CAAf;;AASA,QAAI,IAAI,UAAU,CAAV,CAAR;AACA,MAAE,EAAF,GAAO,MAAP;;AAEA,QAAI,EAAE,MAAF,GAAW,UAAf,EAA2B;AACzB,mBAAa,EAAE,MAAf;AACD;AACF;AACD,MAAI,aAAa,aAAa,CAA9B;AACA,MAAI,WAAW,8BAAoB;AACjC,gBAAY,KADqB;AAEjC,YAAQ;AACN,iBAAW;AACT,oBAAY;AADH;AADL;AAFyB,GAApB,EAOZ,GAPY,CAAf;;AAUA;AACA,WAAS,eAAT,CAAyB,SAAzB;;AAEA;AACA,SAAO,WAAP,CAAmB,MAAnB;AACA,SAAO,IAAP;;AAGA;AACA,WAAS,MAAT,GAAkB;;AAEd;AACA,aAAS,MAAT;;AAEA;AACA,aAAS,IAAT;AACH;;AAED,WAAS,IAAT,GAAgB;AACd,aAAS,EAAT,GAAc;AACZ,aAAO,KAAK,KAAL,CAAW,CAAC,IAAI,KAAK,MAAL,EAAL,IAAsB,OAAjC,EACN,QADM,CACG,EADH,EAEN,SAFM,CAEI,CAFJ,CAAP;AAGD;AACD,WAAO,OAAO,IAAP,GAAc,GAAd,GAAoB,IAApB,GAA2B,GAA3B,GAAiC,IAAjC,GAAwC,GAAxC,GACL,IADK,GACE,GADF,GACQ,IADR,GACe,IADf,GACsB,IAD7B;AAED;;AAED;AACA,WAAS,IAAT,CAAc,gBAAd,CAA+B,SAA/B,EAA0C,UAAC,CAAD,EAAO;AAC7C;AACA,YAAQ,EAAE,OAAV;AACI,WAAK,EAAL;AAAgC;AAC9B,YAAI,OAAO,OAAX,EAAoB;AAChB,iBAAO,IAAP;AACA,kBAAQ,GAAR,CAAY,iBAAZ;AACH,SAHD,MAGO;AACH,iBAAO,IAAP;AACA,kBAAQ,GAAR,CAAY,iBAAZ;AACH;AACD;AACF,WAAK,EAAL;AACE,eAAO,IAAP;AACA,eAAO,IAAP;AACA,eAAO,IAAP;AACA,gBAAQ,GAAR,CAAY,gBAAZ;AACA;AACF;AACE;AAjBN;AAmBH,GArBD;AAuBH,CA/FD;;;;;;;;ACNA;;;;;;;;AAQC,IAAM,iBAAiB;AACrB,eAAa,IADQ,CACY;AADZ,CAAvB;;kBAIe,c;;;;;;;;;;;ACZhB;;;;;;;;IAEqB,e;AAEjB,6BAAY,QAAZ,EAAsB;AAAA;;AAClB,mBAAW,YAAY,EAAvB;;AAEA,aAAK,MAAL,GAAc,SAAS,aAAT,IAA0B,MAAxC;AACA,aAAK,SAAL,GAAiB,IAAjB;AACA,aAAK,OAAL,GAAe,KAAf;;AAEA;AACA,YAAI,wBAAe,WAAnB,EAAgC;AAC9B,iBAAK,GAAL,GAAW,SAAS,GAAT,IAAgB,EAA3B;AACA,iBAAK,GAAL;AACA,iBAAK,QAAL,GAAgB,KAAK,GAAL,EAAhB;AACA,iBAAK,QAAL,GAAgB,OAAK,KAAK,GAA1B;AACA,iBAAK,KAAL;AACD;AAEJ;;;;+BAEM;AACH,iBAAK,OAAL,GAAe,IAAf;AACA,iBAAK,QAAL;AACH;;;+BAEM;AACH,gBAAI,CAAC,KAAK,OAAV,EAAmB;AACf,uBAAO,KAAP;AACH;AACD,iBAAK,MAAL,CAAY,oBAAZ,CAAiC,KAAK,SAAtC;AACA,iBAAK,OAAL,GAAe,KAAf;AACA,iBAAK,SAAL,GAAiB,IAAjB;AACH;;;oCAEW,Q,EAAU;AAAA;;AAClB,iBAAK,QAAL,GACI,YAAM;AACF,sBAAK,SAAL,GAAiB,MAAK,MAAL,CAAY,qBAAZ,CAAkC,MAAK,QAAvC,CAAjB;;AAEA;AACA,oBAAI,wBAAe,WAAnB,EAAgC;AAC9B,0BAAK,GAAL,GAAW,KAAK,GAAL,EAAX;AACA,0BAAK,KAAL,GAAa,MAAK,GAAL,GAAW,MAAK,QAA7B;;AAEA,wBAAI,MAAK,KAAL,GAAa,MAAK,QAAtB,EAAgC;AAC9B,8BAAK,QAAL,GAAgB,MAAK,GAAL,GAAY,MAAK,KAAL,GAAa,MAAK,QAA9C;AACA;AACD;AACD;AACD;;AAED;AAEH,aAlBL;AAmBH;;;mCAEU;AACP,oBAAQ,IAAR,CAAa,0CAAb;AACH;;;;;;kBA1DgB,e;;;;;;;;;;;;;ICFA,O;;;;;;;;;AAEnB;;;;;;;;8BAQU,E,EAAI,E,EAAI,U,EAAY;;AAE5B;AACA,UAAI,eAAe,GAAG,IAAH,GAAU,GAAG,IAAhC;AACA,UAAI,mBAAmB,IAAI,GAAG,IAAP,GAAc,YAArC;AACA,UAAI,mBAAmB,IAAI,GAAG,IAAP,GAAc,YAArC;;AAEA;AACA,SAAG,EAAH,IAAS,mBAAmB,WAAW,CAAvC;AACA,SAAG,EAAH,IAAS,mBAAmB,WAAW,CAAvC;AACA,SAAG,EAAH,IAAS,mBAAmB,WAAW,CAAvC;AACA,SAAG,EAAH,IAAS,mBAAmB,WAAW,CAAvC;AACA;;;;;;kBAtBiB,O;;;;;;;;;;;;;ICAA,W;AAEnB,yBAAc;AAAA;AAEb;;AAED;;;;;;;6BAGS,E,EAAI,E,EAAI;AACf,aAAO,GAAG,UAAH,CAAc,EAAd,CAAP;AACD;;AAED;;;;;;0BAGM,E,EAAI,E,EAAI;AACZ,aAAO,GAAG,OAAH,CAAW,EAAX,CAAP;AACD;;AAED;;;;;;oCAGgB,E,EAAI,E,EAAI;AACtB;AACA,UAAI,QAAQ,GAAG,CAAH,GAAO,GAAG,CAAtB;AACA,UAAI,QAAQ,GAAG,CAAH,GAAO,GAAG,CAAtB;AACA,UAAI,cAAc,QAAM,KAAN,GAAc,QAAM,KAAtC;AACA,UAAI,gBAAgB,CAAC,GAAG,MAAH,GAAY,GAAG,MAAhB,KAA2B,GAAG,MAAH,GAAY,GAAG,MAA1C,CAApB;;AAEA;AACA,UAAI,cAAc,aAAlB,EAAiC;;AAE/B;AACA,YAAI,YAAY,GAAG,EAAH,GAAQ,GAAG,EAA3B;AACA,YAAI,YAAY,GAAG,EAAH,GAAQ,GAAG,EAA3B;AACA,YAAI,aAAa,QAAM,SAAN,GAAkB,QAAM,SAAzC;;AAEA;AACA,YAAI,cAAc,CAAlB,EAAqB;AACnB,iBAAO,KAAP;AACD;;AAED;AACA;AACA,YAAI,iBAAiB,aAAa,WAAlC;AACA,YAAI,YAAY;AACd,aAAG,QAAQ,cADG;AAEd,aAAG,QAAQ;AAFG,SAAhB;;AAKA,eAAO,SAAP;AACD;;AAED,aAAO,KAAP;AACD;;;;;;kBAvDkB,W;;;;;;;;;;;ACArB;;;;;;;;IAEqB,M;;AAEnB;;;;AAIA,kBAAY,QAAZ,EAAsB;AAAA;;AACpB,SAAK,MAAL,GAAc,EAAd;;AAEA;AACA,QAAI,SAAS,cAAT,CAAwB,SAAxB,CAAJ,EAAwC;AACtC,WAAK,MAAL,CAAY,OAAZ,GAAsB;AACpB,oBAAY,SAAS,OAAT,CAAiB,UAAjB,IAA+B,GADvB;AAEpB,iBAAS;AAFW,OAAtB;AAID;;AAED;AACA,QAAI,SAAS,cAAT,CAAwB,WAAxB,CAAJ,EAA0C;AACxC,WAAK,MAAL,CAAY,SAAZ,GAAwB;AACtB,oBAAY,SAAS,SAAT,CAAmB,UAAnB,IAAiC,GADvB;AAEtB,iBAAS;AAFa,OAAxB;AAID;AACF;;AAED;;;;;;;8BAGU,C,EAAG,K,EAAO,M,EAAQ;AAC1B,WAAK,MAAL,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,MAA3B,EAAmC,SAAnC,CAA6C,EAAE,EAA/C,IAAqD,CAArD;AACD;;AAED;;;;;;gCAGY,C,EAAG,K,EAAO,M,EAAQ;AAC5B,aAAO,KAAK,MAAL,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,MAA3B,EAAmC,SAAnC,CAA6C,EAAE,EAA/C,CAAP;AACD;;AAED;;;;;;2BAGO,C,EAAG;;AAER;AACA,UAAI,QAAQ,KAAK,eAAL,CAAqB,CAArB,CAAZ;;AAEA,WAAK,IAAI,KAAT,IAAkB,MAAM,eAAxB,EAAyC;AACvC,YAAI,MAAM,eAAN,CAAsB,cAAtB,CAAqC,KAArC,CAAJ,EAAiD;;AAE/C,cAAI,CAAC,EAAE,aAAF,CAAgB,cAAhB,CAA+B,KAA/B,CAAL,EAA4C;AAC1C,cAAE,aAAF,CAAgB,KAAhB,IAAyB,EAAzB;AACD;;AAED,cAAI,KAAK,cAAL,CAAoB,KAApB,EAA2B,MAAM,eAAjC,EAAkD,EAAE,aAApD,CAAJ,EAAwE;AACtE;AACD;;AAED;AACA;AACA,eAAK,IAAI,IAAE,CAAX,EAAc,IAAE,EAAE,aAAF,CAAgB,KAAhB,EAAuB,MAAvC,EAA+C,GAA/C,EAAoD;AAClD,iBAAK,WAAL,CAAiB,CAAjB,EAAoB,KAApB,EAA2B,EAAE,aAAF,CAAgB,KAAhB,EAAuB,CAAvB,CAA3B;AACD;;AAED;AACA,eAAK,IAAI,GAAT,IAAgB,MAAM,eAAN,CAAsB,KAAtB,EAA6B,OAA7C,EAAsD;;AAEpD,gBAAI,CAAC,KAAK,MAAL,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,cAA3B,CAA0C,GAA1C,CAAL,EAAqD;AACnD,mBAAK,YAAL,CAAkB,KAAlB,EAAyB,GAAzB,EAA8B,MAAM,eAAN,CAAsB,KAAtB,EAA6B,OAA7B,CAAqC,GAArC,CAA9B;AACD;;AAED;AACA,iBAAK,SAAL,CAAe,CAAf,EAAkB,KAAlB,EAAyB,GAAzB;AACD;;AAED;AACA,YAAE,aAAF,CAAgB,KAAhB,IAAyB,MAAM,QAAN,CAAe,KAAf,EAAsB,OAA/C;AACD;AACF;AACF;;AAED;;;;;;;oCAIgB,C,EAAG;AACjB,UAAI,SAAS,gBAAM,eAAN,CAAsB,CAAtB,CAAb;AACA,UAAI,SAAS,EAAb;AACA,UAAI,kBAAkB,EAAtB;;AAEA,WAAK,IAAI,KAAT,IAAkB,KAAK,MAAvB,EAA+B;AAC7B,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACrC,cAAI,cAAc,EAAlB;AACA,cAAI,eAAe,EAAnB;;AAEA,cAAI,CAAC,OAAO,cAAP,CAAsB,KAAtB,CAAL,EAAmC;AACjC;AACA,mBAAO,KAAP,IAAgB;AACd,uBAAS;AADK,aAAhB;;AAIA;AACA,4BAAgB,KAAhB,IAAyB;AACvB,uBAAS;AADc,aAAzB;AAGD;;AAED,eAAK,IAAI,IAAE,CAAX,EAAc,IAAE,OAAO,MAAvB,EAA+B,GAA/B,EAAoC;AAClC,gBAAI,WAAW,KAAK,YAAL,CAAkB,OAAO,CAAP,CAAlB,EAA6B,KAA7B,CAAf;;AAEA,gBAAI,aAAa,OAAb,CAAqB,SAAS,MAA9B,MAA0C,CAAC,CAA/C,EAAkD;AAChD,2BAAa,IAAb,CAAkB,SAAS,MAA3B;;AAEA,8BAAgB,KAAhB,EAAuB,OAAvB,CAA+B,SAAS,MAAxC,IAAkD;AAChD,oBAAI,SAAS,EADmC;AAEhD,oBAAI,SAAS;AAFmC,eAAlD;AAID;AACF;;AAED,iBAAO,KAAP,EAAc,OAAd,GAAwB,YAAxB;AACA;AACD;AACF;;AAED;AACA,UAAI,CAAC,EAAE,MAAF,CAAS,MAAd,EAAsB;AACpB,UAAE,MAAF,GAAW,MAAX;AACD;;AAED,aAAO,EAAE,UAAU,MAAZ,EAAoB,iBAAiB,eAArC,EAAP;AACD;;AAGD;;;;;;iCAGc,C,EAAG,K,EAAO;AACrB,UAAI,aAAa,KAAK,MAAL,CAAY,KAAZ,EAAmB,UAApC;;AAEA,UAAI,QAAQ;AACV,YAAI,EAAE,CAAF,GAAM,UAAN,GAAmB,KAAK,KAAL,CAAW,KAAK,GAAL,CAAS,EAAE,CAAF,GAAM,UAAf,CAAX,CAAnB,GAA0D,CADpD;AAEV,YAAI,EAAE,CAAF,GAAM,UAAN,GAAmB,KAAK,KAAL,CAAW,KAAK,GAAL,CAAS,EAAE,CAAF,GAAM,UAAf,CAAX,CAAnB,GAA0D,CAFpD;AAGV,gBAAQ;AAHE,OAAZ;AAKA,YAAM,MAAN,GAAe,MAAM,EAAN,GAAW,GAAX,GAAgB,MAAM,EAArC;;AAEA,aAAO,KAAP;AACD;;AAGF;;;;;;iCAGa,K,EAAO,K,EAAO,K,EAAO;AAChC,UAAI,WAAW,KAAK,MAAL,CAAY,KAAZ,CAAf;;AAEA;AACA,UAAI,WAAW,MAAM,EAAN,GAAW,SAAS,UAAnC;AACA,UAAI,WAAW,MAAM,EAAN,GAAW,SAAS,UAAnC;;AAEA,eAAS,OAAT,CAAiB,KAAjB,IAA0B;AACxB,eAAO,UAAU,OAAV,CAAkB,IAAlB,EAAuB,YAAU;AAAC,iBAAO,CAAC,CAAC,EAAE,KAAK,MAAL,KAAc,EAAhB,CAAF,EAAuB,QAAvB,CAAgC,EAAhC,CAAP;AAA4C,SAA9E,CADiB;AAExB,mBAAW,EAFa;AAGxB,mBAAW,QAHa;AAIxB,mBAAW,QAJa;AAKxB,iBAAS,WAAW,SAAS,UALL;AAMxB,iBAAS,WAAW,SAAS;AANL,OAA1B;AAQD;;AAED;;;;;;mCAGe,K,EAAO,I,EAAM,I,EAAM;;AAEhC,UAAI,CAAC,KAAK,cAAL,CAAoB,KAApB,CAAL,EAAiC;AAC/B,eAAO,KAAP;AACD;;AAED,UAAG,OAAO,IAAP,CAAY,KAAK,KAAL,EAAY,OAAxB,EAAiC,MAAjC,KAA4C,KAAK,KAAL,EAAY,MAA3D,EAAmE;AACjE,eAAO,KAAP;AACD;;AAED,WAAK,IAAI,MAAT,IAAmB,KAAK,KAAL,EAAY,OAA/B,EAAwC;;AAEtC,YAAI,CAAC,KAAK,KAAL,EAAY,OAAZ,CAAoB,MAApB,CAAD,KAAiC,CAAC,CAAtC,EAAyC;AACvC,iBAAO,KAAP;AACD;;AAED;AACA;AACA;AACA;AACA;AACD;;AAKC,aAAO,IAAP;AACH;;;;;;kBA1MkB,M;;;;;;;;;;;ACFrB;;;;;;;;IAEqB,Q;AAEjB,sBAAY,QAAZ,EAAsB;AAAA;;AAClB,aAAK,CAAL,GAAS,SAAS,CAAT,IAAc,CAAvB;AACA,aAAK,CAAL,GAAS,SAAS,CAAT,IAAc,CAAvB;AACA,aAAK,EAAL,GAAW,KAAK,GAAL,CAAS,SAAS,SAAlB,IAA+B,SAAS,KAAzC,IAAmD,CAA7D;AACA,aAAK,EAAL,GAAW,KAAK,GAAL,CAAS,SAAS,SAAlB,IAA+B,SAAS,KAAzC,IAAmD,CAA7D;AACA,aAAK,OAAL,GAAe,SAAS,OAAT,IAAoB,CAAnC;AACA,aAAK,IAAL,GAAY,SAAS,IAAT,IAAiB,CAA7B;AACA,aAAK,MAAL,GAAc,SAAS,MAAT,IAAmB,SAAS,IAAT,GAAgB,IAAjD;AACA,aAAK,QAAL,GAAgB,SAAS,QAAT,IAAqB,CAArC;AACA,aAAK,OAAL,GAAe,EAAf;AACA,aAAK,YAAL,GAAoB,EAApB;;AAEA,aAAK,KAAL,GAAa,SAAS,KAAT,IAAkB,QAA/B;AACA,aAAK,aAAL,GAAqB,SAAS,aAAT,IAA0B,EAA/C;AACA,aAAK,KAAL,GAAa,SAAS,KAAT,IAAkB,SAA/B;AACA,aAAK,MAAL,GAAc,SAAS,MAAT,IAAmB,EAAjC;AACA,aAAK,SAAL,GAAiB,SAAS,SAAT,IAAsB,KAAvC;AACH;;AAED;;;;;;;iCAGS;AACL,iBAAK,aAAL;AACA,iBAAK,kBAAL;AACA,iBAAK,EAAL,IAAW,KAAK,OAAhB;AACA,iBAAK,EAAL,IAAW,KAAK,QAAhB;AACA,iBAAK,EAAL,IAAW,KAAK,QAAhB;AACA,iBAAK,CAAL,IAAU,KAAK,EAAf;AACA,iBAAK,CAAL,IAAU,KAAK,EAAf;;AAEA,gBAAI,KAAK,SAAT,EAAoB;AAClB,qBAAK,YAAL,CAAkB,KAAK,SAAL,CAAe,CAAjC,EAAoC,KAAK,SAAL,CAAe,CAAnD;AACD;AACJ;;AAED;;;;;;mCAGW;AACP,mBAAO,KAAK,IAAL,CAAU,KAAK,EAAL,GAAU,KAAK,EAAf,GAAoB,KAAK,EAAL,GAAU,KAAK,EAA7C,CAAP;AACH;;AAED;;;;;;iCAGS,K,EAAO;AACZ,gBAAI,UAAU,KAAK,UAAL,EAAd;AACA,iBAAK,EAAL,GAAU,KAAK,GAAL,CAAS,OAAT,IAAoB,KAA9B;AACA,iBAAK,EAAL,GAAU,KAAK,GAAL,CAAS,OAAT,IAAoB,KAA9B;AACH;;AAED;;;;;;qCAGa;AACT,mBAAO,KAAK,KAAL,CAAW,KAAK,EAAhB,EAAoB,KAAK,EAAzB,CAAP;AACH;;AAED;;;;;;mCAGW,O,EAAS;AAChB,gBAAI,QAAQ,KAAK,QAAL,EAAZ;AACA,iBAAK,EAAL,GAAU,KAAK,GAAL,CAAS,OAAT,IAAoB,KAA9B;AACA,iBAAK,EAAL,GAAU,KAAK,GAAL,CAAS,OAAT,IAAoB,KAA9B;AACH;;AAED;;;;;;mCAGW,C,EAAG,C,EAAG;AACb,iBAAK,EAAL,IAAW,CAAX;AACA,iBAAK,EAAL,IAAW,CAAX;AACH;;AAED;;;;;;qCAGa,K,EAAO,M,EAAQ;AAC1B,gBAAI,KAAK,CAAL,GAAS,KAAK,MAAd,IAAwB,KAA5B,EAAmC;AACjC,qBAAK,CAAL,GAAS,QAAQ,KAAK,MAAtB;AACA,qBAAK,EAAL,IAAY,CAAC,CAAb;AACD,aAHD,MAGO,IAAI,KAAK,CAAL,GAAS,KAAK,MAAd,IAAwB,CAA5B,EAA+B;AACpC,qBAAK,CAAL,GAAS,KAAK,MAAd;AACA,qBAAK,EAAL,IAAW,CAAC,CAAZ;AACD;;AAED,gBAAI,KAAK,CAAL,GAAS,KAAK,MAAd,IAAwB,MAA5B,EAAoC;AAClC,qBAAK,CAAL,GAAS,SAAS,KAAK,MAAvB;AACA,qBAAK,EAAL,IAAY,CAAC,CAAb;AACD,aAHD,MAGO,IAAI,KAAK,CAAL,GAAS,KAAK,MAAd,IAAwB,CAA5B,EAA+B;AACpC,qBAAK,CAAL,GAAS,KAAK,MAAd;AACA,qBAAK,EAAL,IAAW,CAAC,CAAZ;AACD;AACF;;AAED;;;;;;gCAGQ,E,EAAI;AACR,mBAAO,KAAK,KAAL,CAAW,GAAG,CAAH,GAAO,KAAK,CAAvB,EAA0B,GAAG,CAAH,GAAO,KAAK,CAAtC,CAAP;AACH;;AAED;;;;;;mCAGW,C,EAAG;AACV,gBAAI,KAAK,EAAE,CAAF,GAAM,KAAK,CAApB;AACA,gBAAI,KAAK,EAAE,CAAF,GAAM,KAAK,CAApB;AACA,mBAAO,KAAK,IAAL,CAAU,KAAK,EAAL,GAAU,KAAK,EAAzB,CAAP;AACH;;AAED;;;;;;oCAGY,C,EAAG;AACX,gBAAI,KAAK,EAAE,CAAF,GAAM,KAAK,CAApB;AACA,gBAAI,KAAK,EAAE,CAAF,GAAM,KAAK,CAApB;AACA,gBAAI,SAAU,KAAK,EAAN,GAAa,KAAK,EAA/B;AACA,gBAAI,OAAO,KAAK,IAAL,CAAU,MAAV,CAAX;AACA,gBAAI,QAAS,EAAE,IAAH,GAAW,MAAvB,CALW,CAKoB;AAC/B;;;;;;;;;AAWA,gBAAI,KAAM,KAAK,IAAN,GAAc,KAAvB;AACA,gBAAI,KAAM,KAAK,IAAN,GAAc,KAAvB;;AAEA,iBAAK,EAAL,IAAW,EAAX;AACA,iBAAK,EAAL,IAAW,EAAX;AACH;;AAED;;;;;;uCAGe,C,EAAG;AACd,iBAAK,iBAAL,CAAuB,CAAvB;AACA,iBAAK,YAAL,CAAkB,IAAlB,CAAuB,CAAvB;AACH;;AAED;;;;;;0CAGkB,C,EAAG;AACjB,gBAAI,SAAS,KAAK,YAAL,CAAkB,MAA/B;AACA,iBAAK,IAAI,IAAE,CAAX,EAAc,IAAE,MAAhB,EAAwB,GAAxB,EAA4B;AACxB,oBAAI,KAAK,YAAL,CAAkB,CAAlB,MAAyB,CAA7B,EAAgC;AAC5B,yBAAK,YAAL,CAAkB,KAAlB,CAAwB,CAAxB,EAA2B,CAA3B;AACA,2BAAO,IAAP;AACH;AACJ;AACJ;;AAED;;;;;;6CAGqB;AACjB,gBAAI,SAAS,KAAK,YAAL,CAAkB,MAA/B;AACA,iBAAK,IAAI,IAAE,CAAX,EAAc,IAAE,MAAhB,EAAwB,GAAxB,EAA4B;AACxB,qBAAK,WAAL,CAAiB,KAAK,YAAL,CAAkB,CAAlB,CAAjB;AACH;AACJ;;AAED;;;;;;iCAGS,K,EAAO,C,EAAG,M,EAAQ;AACvB,gBAAI,KAAK,MAAM,CAAN,GAAU,KAAK,CAAxB;AACA,gBAAI,KAAK,MAAM,CAAN,GAAU,KAAK,CAAxB;AACA,gBAAI,WAAW,KAAK,IAAL,CAAU,KAAK,EAAL,GAAU,KAAK,EAAzB,CAAf;AACA,gBAAI,QAAQ,CAAC,WAAW,MAAX,IAAqB,CAAtB,IAA2B,CAAvC;AACA;AACA,iBAAK,EAAL,IAAY,KAAK,QAAN,GAAkB,KAA7B;AACA,iBAAK,EAAL,IAAY,KAAK,QAAN,GAAkB,KAA7B;AACH;;AAED;;;;;;kCAGU,K,EAAO,C,EAAG,M,EAAQ;AACxB,iBAAK,YAAL,CAAkB,KAAlB;AACA,iBAAK,OAAL,CAAa,IAAb,CAAkB;AACd,uBAAO,KADO;AAEd,mBAAG,CAFW;AAGd,wBAAQ,UAAU;AAHJ,aAAlB;AAKH;;AAED;;;;;;qCAGa,K,EAAO;AAChB,gBAAI,SAAS,KAAK,OAAL,CAAa,MAA1B;AACA,iBAAK,IAAI,IAAE,CAAX,EAAc,IAAE,MAAhB,EAAwB,GAAxB,EAA4B;AACxB,oBAAI,KAAK,OAAL,CAAa,CAAb,EAAgB,KAAhB,KAA0B,KAA9B,EAAqC;AACjC,yBAAK,OAAL,CAAa,MAAb,CAAoB,CAApB,EAAuB,CAAvB;AACA;AACH;AACJ;AACJ;;AAGD;;;;;;wCAGgB;AACZ,gBAAI,SAAS,KAAK,OAAL,CAAa,MAA1B;AACA,iBAAK,IAAI,IAAE,CAAX,EAAc,IAAE,MAAhB,EAAwB,GAAxB,EAA4B;AACxB,oBAAI,SAAS,KAAK,OAAL,CAAa,CAAb,CAAb;AACA,qBAAK,QAAL,CAAc,OAAO,KAArB,EAA4B,OAAO,CAAnC,EAAsC,OAAO,MAA7C;AACH;AACJ;;;;;;kBA7NgB,Q;;;;;;;;;;;ACFrB;;;;AACA;;;;AACA;;;;;;;;IAEqB,e;AAEnB,2BAAY,QAAZ,EAAsB,GAAtB,EAA2B;AAAA;;AACzB,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,MAAL,GAAc,qBAAW,SAAS,MAApB,CAAd;AACA,SAAK,WAAL,GAAmB,2BAAnB;AACA,SAAK,OAAL,GAAe,uBAAf;AACA,SAAK,UAAL,GAAkB,SAAS,UAAT,IAAuB,KAAzC;AACA,SAAK,SAAL,GAAiB,SAAS,SAAT,IAAsB,EAAvC;AACA,SAAK,QAAL,GAAgB,SAAS,QAAT,IAAqB,OAAO,UAA5C;AACA,SAAK,SAAL,GAAiB,SAAS,SAAT,IAAsB,OAAO,WAAP,GAAmB,CAA1D;AACD;;AAGD;;;;;;;6BAGS;;AAEP,WAAK,IAAI,IAAE,CAAX,EAAc,IAAE,KAAK,SAAL,CAAe,MAA/B,EAAuC,GAAvC,EAA4C;AAC1C,YAAI,IAAI,KAAK,SAAL,CAAe,CAAf,CAAR;;AAEA;AACA,UAAE,MAAF;;AAEA;AACA,aAAK,MAAL,CAAY,MAAZ,CAAmB,CAAnB;AACD;AACF;;AAED;;;;;;2BAGO;;AAEL;AACA,WAAK,GAAL,CAAS,SAAT,CAAmB,CAAnB,EAAqB,CAArB,EAAwB,KAAK,QAA7B,EAAuC,KAAK,SAA5C;;AAEA;AACA,UAAI,KAAK,UAAT,EAAqB;AACnB,aAAK,kBAAL;AACD;;AAED;AACA,WAAK,IAAI,IAAE,CAAX,EAAc,IAAE,KAAK,SAAL,CAAe,MAA/B,EAAuC,GAAvC,EAA4C;AAC1C,YAAI,KAAK,KAAK,SAAL,CAAe,CAAf,CAAT;;AAEA;AACA,aAAK,gBAAL,CAAsB,EAAtB;AACA,aAAK,gBAAL,CAAsB,EAAtB;AACA,aAAK,YAAL,CAAkB,EAAlB;AACD;AACF;;AAED;;;;;;;oCAIgB,S,EAAW;AACzB,YAAM,SAAN,CAAgB,IAAhB,CAAqB,KAArB,CAA2B,KAAK,SAAhC,EAA2C,SAA3C;AACD;;;qCAEgB,E,EAAI;AACnB;AACA,UAAI,CAAC,GAAG,aAAH,CAAiB,cAAjB,CAAgC,SAAhC,CAAL,EAAiD;AAC/C,eAAO,KAAP;AACD;;AAED,WAAK,IAAI,IAAE,CAAX,EAAc,IAAE,GAAG,aAAH,CAAiB,SAAjB,EAA4B,MAA5C,EAAoD,GAApD,EAAyD;AACvD,YAAI,SAAS,GAAG,aAAH,CAAiB,SAAjB,EAA4B,CAA5B,CAAb;AACA,YAAI,SAAS,KAAK,MAAL,CAAY,MAAZ,CAAmB,SAAnB,EAA8B,OAA9B,CAAsC,MAAtC,CAAb;AACA,aAAK,IAAI,CAAT,IAAc,OAAO,SAArB,EAAgC;;AAE9B,cAAI,OAAO,SAAP,CAAiB,cAAjB,CAAgC,CAAhC,CAAJ,EAAwC;AACtC,gBAAI,KAAK,OAAO,SAAP,CAAiB,CAAjB,CAAT;;AAEA,gBAAI,GAAG,EAAH,KAAU,GAAG,EAAjB,EAAqB;AACnB;AACD;;AAED,eAAG,WAAH,CAAe,EAAf;AAED;AACF;AACF;AAEF;;AAGD;;;;;;qCAGiB,E,EAAI;AACnB;AACA,UAAI,CAAC,GAAG,aAAH,CAAiB,cAAjB,CAAgC,WAAhC,CAAL,EAAmD;AACjD,eAAO,KAAP;AACD;;AAED,WAAK,IAAI,IAAE,CAAX,EAAc,IAAE,GAAG,aAAH,CAAiB,WAAjB,EAA8B,MAA9C,EAAsD,GAAtD,EAA2D;AACzD,YAAI,SAAS,GAAG,aAAH,CAAiB,WAAjB,EAA8B,CAA9B,CAAb;AACA,YAAI,SAAS,KAAK,MAAL,CAAY,MAAZ,CAAmB,WAAnB,EAAgC,OAAhC,CAAwC,MAAxC,CAAb;AACA,aAAK,IAAI,CAAT,IAAc,OAAO,SAArB,EAAgC;;AAE9B,cAAI,OAAO,SAAP,CAAiB,cAAjB,CAAgC,CAAhC,CAAJ,EAAwC;AACtC,gBAAI,KAAK,OAAO,SAAP,CAAiB,CAAjB,CAAT;;AAEA,gBAAI,GAAG,EAAH,KAAU,GAAG,EAAjB,EAAqB;AACnB;AACD;;AAED,gBAAI,YAAY,KAAK,WAAL,CAAiB,eAAjB,CAAiC,EAAjC,EAAqC,EAArC,CAAhB;;AAEA;AACA,gBAAI,SAAJ,EAAe;AACb,mBAAK,OAAL,CAAa,SAAb,CAAuB,EAAvB,EAA2B,EAA3B,EAA+B,SAA/B;AACD;AACF;AACF;AACF;AACF;;AAED;;;;;;iCAGa,C,EAAG;AACd,WAAK,GAAL,CAAS,SAAT;AACA,WAAK,GAAL,CAAS,GAAT,CAAa,EAAE,CAAf,EAAkB,EAAE,CAApB,EAAuB,EAAE,MAAzB,EAAiC,CAAjC,EAAoC,KAAK,EAAL,GAAU,CAA9C,EAAiD,KAAjD;AACA,WAAK,GAAL,CAAS,SAAT,GAAqB,EAAE,KAAF,IAAW,SAAhC;AACA,WAAK,GAAL,CAAS,IAAT;AACA,WAAK,GAAL,CAAS,SAAT;AACD;;AAED;;;;;;yCAGqB;;AAEnB;AACA,WAAK,IAAI,KAAT,IAAkB,KAAK,MAAL,CAAY,MAA9B,EAAsC;AACpC,YAAI,KAAK,MAAL,CAAY,MAAZ,CAAmB,cAAnB,CAAkC,KAAlC,CAAJ,EAA8C;AAC5C,cAAI,WAAW,KAAK,MAAL,CAAY,MAAZ,CAAmB,KAAnB,CAAf;;AAEA,eAAK,IAAI,CAAT,IAAc,SAAS,OAAvB,EAAgC;AAC9B,gBAAI,SAAS,OAAT,CAAiB,cAAjB,CAAgC,CAAhC,CAAJ,EAAwC;;AAEtC,kBAAI,UAAU,SAAS,OAAT,CAAiB,CAAjB,CAAd;AACA,mBAAK,GAAL,CAAS,SAAT;AACA,mBAAK,GAAL,CAAS,WAAT,GAAuB,QAAQ,KAA/B;AACA,mBAAK,GAAL,CAAS,IAAT,CAAc,QAAQ,SAAtB,EAAiC,QAAQ,SAAzC,EAAoD,SAAS,UAAT,GAAoB,CAAxE,EAA2E,SAAS,UAAT,GAAoB,CAA/F;AACA,mBAAK,GAAL,CAAS,MAAT;AACA,mBAAK,GAAL,CAAS,SAAT;AACD;AACF;AAEF;AACF;AAEF;;;;;;kBA7JkB,e;;;;;;;;;;;ACJrB;;;;;;;;IAEM,K;AACJ,mBAAc;AAAA;;AACZ,SAAK,KAAL,GAAa,EAAb;AACD;;;;+BAEU,M,EAAQ,G,EAAK,K,EAAO;AAC7B,UAAI,CAAC,KAAK,KAAL,CAAW,cAAX,CAA0B,MAA1B,CAAL,EAAwC;AACtC,aAAK,KAAL,CAAW,MAAX,IAAqB,EAArB;AACD;AACD,WAAK,KAAL,CAAW,MAAX,EAAmB,GAAnB,IAA0B,KAA1B;AACD;;;kCAEa,M,EAAQ,G,EAAK;AACzB,UAAI,UAAU,KAAK,KAAL,CAAW,MAAX,KAAsB,EAApC;AACA,UAAI,QAAQ,QAAQ,GAAR,KAAgB,KAA5B;AACA,aAAO,KAAP;AACD;;AAED;;;;;;oCAGgB,C,EAAG,C,EAAG,M,EAAQ;AAC5B,UAAI,KAAK,CAAT;AACA,eAAS,UAAU,EAAE,MAAZ,IAAsB,CAA/B;;AAEA,UAAI,QAAQ,CAAC,CAAb;AACA,UAAI,YAAa,KAAK,EAAL,GAAU,CAAX,GAAgB,CAAhC;AACA,UAAI,SAAS,EAAb;;AAEA,WAAK,IAAI,IAAE,CAAX,EAAc,IAAE,CAAhB,EAAmB,GAAnB,EAAwB;AACtB,YAAI,QAAQ,KAAK,aAAL,CAAmB,iBAAnB,EAAsC,KAAtC,CAAZ;AACA,YAAI,MAAM,MAAM,GAAN,IAAa,KAAK,GAAL,CAAS,KAAT,CAAvB;AACA,YAAI,MAAM,MAAM,GAAN,IAAa,KAAK,GAAL,CAAS,KAAT,CAAvB;AACA,YAAI,KAAK;AACP,aAAG,EAAE,CAAF,GAAO,MAAM,EAAE,MADX;AAEP,aAAG,EAAE,CAAF,GAAO,MAAM,EAAE;AAFX,SAAT;AAIA,eAAO,IAAP,CAAY,EAAZ;AACA,YAAI,CAAC,KAAL,EAAY;AACV,eAAK,UAAL,CAAgB,iBAAhB,EAAmC,KAAnC,EAA0C,EAAC,KAAK,GAAN,EAAW,KAAK,GAAhB,EAA1C;AACD;AACD,iBAAS,SAAT;AACD;;AAED;AACA,aAAO,MAAP;AACD;;;iCAEY;AACX,aAAM,IAAN,EAAY;AACV,YAAI,KAAK,KAAK,MAAL,EAAT;AACA,YAAI,IAAI,EAAR;AACA,YAAI,KAAK,KAAK,MAAL,EAAT;AACA,YAAI,KAAK,CAAT,EAAY;AACV,iBAAO,EAAP;AACD;AACF;AACF;;;yBAEI,I,EAAM,G,EAAK,G,EAAK;AACnB,aAAO,CAAC,MAAM,GAAP,IAAc,IAAd,GAAqB,GAA5B;AACD;;;oCAEe,E,EAAI,E,EAAI,E,EAAI,C,EAAG,M,EAAQ;AACrC,eAAS,UAAU,EAAnB;AACA,aAAO,CAAP,GAAW,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,CAAhB,IAAqB,GAAG,CAAxB,GAA4B,CAAC,IAAI,CAAL,IAAU,CAAV,GAAc,CAAd,GAAkB,GAAG,CAAjD,GAAqD,IAAI,CAAJ,GAAQ,GAAG,CAA3E;AACA,aAAO,CAAP,GAAW,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,CAAhB,IAAqB,GAAG,CAAxB,GAA4B,CAAC,IAAI,CAAL,IAAU,CAAV,GAAc,CAAd,GAAkB,GAAG,CAAjD,GAAqD,IAAI,CAAJ,GAAQ,GAAG,CAA3E;AACA,aAAO,MAAP;AACD;;;gCAEW,E,EAAI,E,EAAI,E,EAAI,E,EAAI,C,EAAG,M,EAAQ;AACrC,eAAS,UAAU,EAAnB;AACA,aAAO,CAAP,GAAW,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,CAAhB,IAAqB,GAAG,CAAxB,GAA4B,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,CAAhB,IAAqB,CAArB,GAAyB,CAAzB,GAA6B,GAAG,CAA5D,GAAgE,CAAC,IAAI,CAAL,IAAU,CAAV,GAAc,CAAd,GAAkB,CAAlB,GAAsB,GAAG,CAAzF,GAA6F,IAAI,CAAJ,GAAQ,CAAR,GAAY,GAAG,CAAvH;AACA,aAAO,CAAP,GAAW,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,CAAhB,IAAqB,GAAG,CAAxB,GAA4B,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,CAAhB,IAAqB,CAArB,GAAyB,CAAzB,GAA6B,GAAG,CAA5D,GAAgE,CAAC,IAAI,CAAL,IAAU,CAAV,GAAc,CAAd,GAAkB,CAAlB,GAAsB,GAAG,CAAzF,GAA6F,IAAI,CAAJ,GAAQ,CAAR,GAAY,GAAG,CAAvH;AACA,aAAO,MAAP;AACD;;;6BAEQ,E,EAAI,E,EAAI;AACf,UAAI,KAAK,GAAG,CAAH,GAAO,GAAG,CAAnB;AACA,UAAI,KAAK,GAAG,CAAH,GAAO,GAAG,CAAnB;AACA,aAAO,KAAK,IAAL,CAAU,KAAK,EAAL,GAAU,KAAK,EAAzB,CAAP;AACD;;;+BAEU,E,EAAI,E,EAAI,E,EAAI,E,EAAI;AACzB,UAAI,KAAK,KAAK,EAAd;AACA,UAAI,KAAK,KAAK,EAAd;AACA,aAAO,KAAK,IAAL,CAAU,KAAK,EAAL,GAAU,KAAK,EAAzB,CAAP;AACD;;AAED;;;;6BACS,K,EAAO,I,EAAM,K,EAAO,I,EAAM,K,EAAO;AACxC,aAAO,SAAS,OAAO,CAAC,QAAQ,IAAT,KAAkB,QAAQ,IAA1B,KAAmC,QAAQ,IAA3C,CAAvB;AACA,UAAI,SAAS,OAAO,CAAC,QAAQ,IAAT,KAAkB,QAAQ,IAA1B,KAAmC,QAAQ,IAA3C,CAApB;AACA,UAAI,SAAS,SAAS,IAAT,EAAe,EAAf,CAAT,IAA+B,UAAU,SAAS,KAAT,EAAgB,EAAhB,CAA7C,EAAkE;AAChE,iBAAS,SAAS,MAAT,CAAT;AACD;AACD,aAAO,MAAP;AACD;;;4BAEO,K,EAAO,G,EAAK,G,EAAK;AACvB,aAAO,SAAS,KAAK,GAAL,CAAS,GAAT,EAAc,GAAd,CAAT,IAA+B,SAAS,KAAK,GAAL,CAAS,GAAT,EAAc,GAAd,CAA/C;AACD;;;mCAEc,I,EAAM,I,EAAM,I,EAAM,I,EAAM;AACrC,aAAQ,KAAK,GAAL,CAAS,IAAT,EAAe,IAAf,KAAwB,KAAK,GAAL,CAAS,IAAT,EAAe,IAAf,CAAxB,IACR,KAAK,GAAL,CAAS,IAAT,EAAe,IAAf,KAAwB,KAAK,GAAL,CAAS,IAAT,EAAe,IAAf,CADxB;AAED;;;gCAEW,G,EAAK,G,EAAK;AACpB,aAAO,MAAM,KAAK,MAAL,MAAiB,MAAM,GAAvB,CAAb;AACD;;;oCAEe,E,EAAI,E,EAAI;AACtB,aAAO,KAAK,QAAL,CAAc,EAAd,EAAkB,EAAlB,KAAyB,GAAG,MAAH,GAAY,GAAG,MAA/C;AACD;;;uCAEkB,E,EAAI,E,EAAI;AACzB,aAAQ,KAAK,cAAL,CAAoB,GAAG,CAAvB,EAA0B,GAAG,CAAH,GAAO,GAAG,KAApC,EAA2C,GAAG,CAA9C,EAAiD,GAAG,CAAH,GAAO,GAAG,KAA3D,KACR,KAAK,cAAL,CAAoB,GAAG,CAAvB,EAA0B,GAAG,CAAH,GAAO,GAAG,MAApC,EAA4C,GAAG,CAA/C,EAAkD,GAAG,CAAH,GAAO,GAAG,MAA5D,CADA;AAED;;;yCAEoB,E,EAAI,E,EAAI,M,EAAQ;AACnC,aAAO,KAAK,UAAL,CAAgB,EAAhB,EAAoB,EAApB,EAAwB,OAAO,CAA/B,EAAkC,OAAO,CAAzC,IAA8C,OAAO,MAA5D;AACD;;;4CAEuB,E,EAAI,E,EAAI,I,EAAM;AACpC,aAAQ,KAAK,OAAL,CAAa,EAAb,EAAiB,KAAK,CAAtB,EAAyB,KAAK,CAAL,GAAS,KAAK,KAAvC,KACR,KAAK,OAAL,CAAa,EAAb,EAAiB,KAAK,CAAtB,EAAyB,KAAK,CAAL,GAAS,KAAK,MAAvC,CADA;AAED;;;;;;AAGH,IAAI,WAAW,IAAI,KAAJ,EAAf;;kBAEe,Q","file":"app.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\nimport AnimationPlayer from '../../src/lib/AnimationPlayer';\nimport Particle from '../../src/lib/Particle';\nimport Utils from '../../src/lib/Utils';\nimport ParticleManager from '../../src/lib/ParticleManager';\n\nwindow.onload = () => {\n    const canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const width = window.innerWidth;\n    const height = window.innerHeight-4;\n    const center = { x: width/2, y: height/2 };\n\n    canvas.height = height;\n    canvas.width = width;\n\n    let player = new AnimationPlayer({ fps: 30 });\n    let greaterRad = 0;\n\n    // Create particles\n    let particles = new Array(500);\n    for (let i=0; i<particles.length; i++) {\n      particles[i] = new Particle({\n        x: Utils.randomRange(0, width-30),\n        y: Utils.randomRange(0, height-30),\n        direction: Math.random() * Math.PI * 2,\n        speed: 0,\n        mass: Utils.randomRange(1, 22),\n        boxBounce: { w: width, h: height }\n      });\n\n      let p = particles[i];\n      p.id = uuid();\n\n      if (p.radius > greaterRad) {\n        greaterRad = p.radius;\n      }\n    }\n    let regionSize = greaterRad * 4;\n    let pmanager = new ParticleManager({\n      regionDraw: false,\n      mapper: {\n        collision: {\n          regionSize: 100\n        }\n      }\n    }, ctx);\n\n\n    // Inject particles into the Mapper\n    pmanager.injectParticles(particles);\n\n    // Demo player setup\n    player.setUpdateFn(update);\n    player.play();\n\n\n    // Frame drawing function\n    function update() {\n\n        // Global update\n        pmanager.update();\n\n        // Global draw\n        pmanager.draw();\n    }\n\n    function uuid() {\n      function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n      }\n      return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n        s4() + '-' + s4() + s4() + s4();\n    }\n\n    // Animation control: KeyDown\n    document.body.addEventListener(\"keydown\", (e) => {\n        //console.log(\"Key pressed: \", e.keyCode);\n        switch (e.keyCode) {\n            case 27:                        // Esc\n              if (player.playing) {\n                  player.stop();\n                  console.log(\"> Scene stopped\");\n              } else {\n                  player.play();\n                  console.log(\"> Playing scene\");\n              }\n              break;\n            case 13:\n              player.stop();\n              player.play();\n              player.stop();\n              console.log(\"> Step forward\");\n              break;\n            default:\n              break;\n        }\n    });\n\n};\n","/*\n *  Feature Toggling\n *\n *  Activete/Hide features that are in process of development or under testing\n *  Once a feature is accepted to be includded must be removed from the\n *  feature toggle scheme\n */\n\n const FEATURE_TOGGLE = {\n   FPS_CONTROL: true                // FPS controll for AnimationPlayer class\n };\n\n export default FEATURE_TOGGLE;\n","import FEATURE_TOGGLE from '../../src/feature-toggle';\n\nexport default class AnimationPlayer {\n\n    constructor(settings) {\n        settings = settings || {};\n\n        this.window = settings.windowElement || window;\n        this.requestId = null;\n        this.playing = false;\n\n        // FPS control\n        if (FEATURE_TOGGLE.FPS_CONTROL) {\n          this.fps = settings.fps || 90;\n          this.now;\n          this.lastTime = Date.now();\n          this.interval = 1000/this.fps;\n          this.delta;\n        }\n\n    }\n\n    play() {\n        this.playing = true;\n        this.updateFn();\n    }\n\n    stop() {\n        if (!this.playing) {\n            return false;\n        }\n        this.window.cancelAnimationFrame(this.requestId);\n        this.playing = false;\n        this.requestId = null;\n    }\n\n    setUpdateFn(updateFn) {\n        this.updateFn = (\n            () => {\n                this.requestId = this.window.requestAnimationFrame(this.updateFn);\n\n                // FPS control\n                if (FEATURE_TOGGLE.FPS_CONTROL) {\n                  this.now = Date.now();\n                  this.delta = this.now - this.lastTime;\n\n                  if (this.delta > this.interval) {\n                    this.lastTime = this.now - (this.delta % this.interval);\n                    updateFn();\n                  }\n                  return;\n                }\n\n                updateFn();\n\n            });\n    }\n\n    updateFn() {\n        console.warn(\"Player update function has not been set.\");\n    }\n}\n","export default class Collide {\n\n  /*\n   *  2D Elastic Collision\n   *\n   *  Formula used:\n   *  Final Vel 1 =  Velocity += (2 * mass2) / (mass1 + mass2)\n   *  Final Vel 2 =  Velocity -= (2 * mass1) / (mass1 + mass2)\n   *\n   */\n  elastic2D(p0, p1, collisionV) {\n\n    // 2D-Elastic collision formula\n    let combinedMass = p0.mass + p1.mass;\n    let collisionWeight0 = 2 * p1.mass / combinedMass;\n    let collisionWeight1 = 2 * p0.mass / combinedMass;\n\n    // Adds the computed collision results to the velocities of p0 / p1\n    p0.vx += collisionWeight0 * collisionV.x;\n    p0.vy += collisionWeight0 * collisionV.y;\n    p1.vx -= collisionWeight1 * collisionV.x;\n    p1.vy -= collisionWeight1 * collisionV.y;\n   }\n}\n","export default class Collisioner {\n\n  constructor() {\n\n  }\n\n  /*\n   *  Get angle from p0's location to p1's location\n   */\n  distance(p0, p1) {\n    return p0.distanceTo(p1);\n  }\n\n  /*\n   *  Get angle from p0's location to p1's location\n   */\n  angle(p0, p1) {\n    return p0.angleTo(p1);\n  }\n\n  /*\n   *  Check for collision between two circular particles\n   */\n  circleCollision(p0, p1) {\n    // Calculate the Distance Vector\n    let xDist = p0.x - p1.x;\n    let yDist = p0.y - p1.y;\n    let distSquared = xDist*xDist + yDist*yDist;\n    let radiusSquared = (p0.radius + p1.radius) * (p0.radius + p1.radius);\n\n    // Check collision: using squared distances, same result and saves one Math.sqrt()\n    if (distSquared < radiusSquared) {\n\n      // Calculate if particles are moving towards each other or away (after a previous collision)\n      let xVelocity = p1.vx - p0.vx;\n      let yVelocity = p1.vy - p0.vy;\n      let dotProduct = xDist*xVelocity + yDist*yVelocity;\n\n      // If particles are moving away (already collided) return\n      if (dotProduct <= 0) {\n        return false;\n      }\n\n      // Collision Vector: the speed difference projected over the Distance Vector\n      // This is the component for the speed difference for the collision\n      let collisionScale = dotProduct / distSquared;\n      let collision = {\n        x: xDist * collisionScale,\n        y: yDist * collisionScale\n      };\n\n      return collision;\n    }\n\n    return false;\n  }\n\n}\n","import Utils from './Utils';\n\nexport default class Mapper {\n\n  /*\n   *  Each layer holds regions in which particles may subscribe to interact with other particles\n   *\n   */\n  constructor(settings) {\n    this.layers = {};\n\n    // GRAVITY layer\n    if (settings.hasOwnProperty('gravity')) {\n      this.layers.gravity = {\n        regionSize: settings.gravity.regionSize || 500,\n        regions: {}\n      };\n    }\n\n    // COLLISION layer\n    if (settings.hasOwnProperty('collision')) {\n      this.layers.collision = {\n        regionSize: settings.collision.regionSize || 100,\n        regions: {}\n      };\n    }\n  }\n\n  /*\n   *  Subscribes particle 'p' to region 'rLabel'\n   */\n  subscribe(p, layer, rLabel) {\n    this.layers[layer].regions[rLabel].particles[p.id] = p;\n  }\n\n  /*\n   *  Unsubscribe particle 'p' from region 'rLabel'\n   */\n  unsubscribe(p, layer, rLabel) {\n    delete this.layers[layer].regions[rLabel].particles[p.id];\n  }\n\n  /*\n   *  Update map state\n   */\n  update(p) {\n\n    // Qualify particle in the mapper and get the layer => region data\n    let rData = this.qualifyParticle(p);\n\n    for (let layer in rData.layerRegionData) {\n      if (rData.layerRegionData.hasOwnProperty(layer)) {\n\n        if (!p.mapperRegions.hasOwnProperty(layer)) {\n          p.mapperRegions[layer] = [];\n        }\n\n        if (this.regionsCompare(layer, rData.layerRegionData, p.mapperRegions)) {\n          continue;\n        }\n\n        // Areas have changed: unsubscribe particle from any region\n        // TODO: Can we remove validation?\n        for (let i=0; i<p.mapperRegions[layer].length; i++) {\n          this.unsubscribe(p, layer, p.mapperRegions[layer][i]);\n        }\n\n        // Create regions if they doesn't exist already\n        for (let reg in rData.layerRegionData[layer].regions) {\n\n          if (!this.layers[layer].regions.hasOwnProperty(reg)) {\n            this.createRegion(layer, reg, rData.layerRegionData[layer].regions[reg]);\n          }\n\n          // Insert particle into the region stack if it's not already inside\n          this.subscribe(p, layer, reg);\n        }\n\n        // Update particle regions register\n        p.mapperRegions[layer] = rData.ptLabels[layer].regions;\n      }\n    }\n  }\n\n  /*\n   *  Get particle's region data.\n   *  NOTE: For now we'll consider that every particle is circular\n   */\n  qualifyParticle(p) {\n    let points = Utils.getCirclePoints(p);\n    let layers = {};\n    let layerRegionData = {};\n\n    for (let layer in this.layers) {\n      if (this.layers.hasOwnProperty(layer)) {\n        let tempRegions = [];\n        let regionLabels = [];\n\n        if (!layers.hasOwnProperty(layer)) {\n          // Holds the structure to update particle's subscribbed regions (array of region labels)\n          layers[layer] = {\n            regions: []\n          };\n\n          // Holds the structure with data to identify region boundries\n          layerRegionData[layer] = {\n            regions: {}\n          };\n        }\n\n        for (let i=0; i<points.length; i++) {\n          let ptRegion = this.qualilyPoint(points[i], layer);\n\n          if (regionLabels.indexOf(ptRegion.rLabel) === -1) {\n            regionLabels.push(ptRegion.rLabel);\n\n            layerRegionData[layer].regions[ptRegion.rLabel] = {\n              rX: ptRegion.rX,\n              rY: ptRegion.rY\n            };\n          }\n        }\n\n        layers[layer].regions = regionLabels;\n        //layerRegionData[layer].regions[] = tempRegions;\n      }\n    }\n\n    // Save points on particle for debugging\n    if (!p.points.length) {\n      p.points = points;\n    }\n\n    return { ptLabels: layers, layerRegionData: layerRegionData };\n  }\n\n\n  /*\n   *  Qualify a single point within a region\n   */\n   qualilyPoint(p, layer) {\n     let regionSize = this.layers[layer].regionSize;\n\n     let rData = {\n       rX: p.x > regionSize ? Math.floor(Math.abs(p.x / regionSize)):0,\n       rY: p.y > regionSize ? Math.floor(Math.abs(p.y / regionSize)):0,\n       rLabel: \"\"\n     };\n     rData.rLabel = rData.rX + \"_\"+ rData.rY;\n\n     return rData;\n   }\n\n\n  /*\n   *  Create a new region\n   */\n  createRegion(layer, label, rData) {\n    let layerObj = this.layers[layer];\n\n    // Pre-calculate region offset\n    let rOffsetX = rData.rX * layerObj.regionSize;\n    let rOffsetY = rData.rY * layerObj.regionSize;\n\n    layerObj.regions[label] = {\n      color: \"#000000\".replace(/0/g,function(){return (~~(Math.random()*16)).toString(16);}),\n      particles: {},\n      beginsAtX: rOffsetX,\n      beginsAtY: rOffsetY,\n      endsAtX: rOffsetX + layerObj.regionSize,\n      endsAtY: rOffsetY + layerObj.regionSize\n    };\n  }\n\n  /*\n   *  Helper: Compares two region array structures, returns true when equal\n   */\n  regionsCompare(layer, reg1, reg2) {\n\n    if (!reg2.hasOwnProperty(layer)) {\n      return false;\n    }\n\n    if(Object.keys(reg1[layer].regions).length !== reg2[layer].length) {\n      return false;\n    }\n\n    for (let region in reg1[layer].regions) {\n\n      if (!reg2[layer].indexOf(region) === -1) {\n        return false;\n      }\n\n      // for(let i = Object(reg1[label].regions).keys.length; i--;) {\n      //     if(reg1[label].regions[i] !== reg2[label].regions[i]) {\n      //       return false;\n      //     }\n      // }\n    }\n\n\n\n\n      return true;\n  }\n}\n","import FEATURE_TOGGLE from '../../src/feature-toggle';\n\nexport default class Particle {\n\n    constructor(settings) {\n        this.x = settings.x || 0;\n        this.y = settings.y || 0;\n        this.vx = (Math.cos(settings.direction) * settings.speed) || 0;\n        this.vy = (Math.sin(settings.direction) * settings.speed) || 0;\n        this.gravity = settings.gravity || 0;\n        this.mass = settings.mass || 1;\n        this.radius = settings.radius || settings.mass * 0.87;\n        this.friction = settings.friction || 1;\n        this.springs = [];\n        this.gravitations = [];\n\n        this.shape = settings.shape || \"circle\";\n        this.mapperRegions = settings.mapperRegions || {};\n        this.color = settings.color || \"#000000\";\n        this.points = settings.points || [];\n        this.boxBounce = settings.boxBounce || false;\n    }\n\n    /*\n     *  Updates the state of the particle\n     */\n    update() {\n        this.handleSprings();\n        this.handleGravitations();\n        this.vy += this.gravity;\n        this.vx *= this.friction;\n        this.vy *= this.friction;\n        this.x += this.vx;\n        this.y += this.vy;\n\n        if (this.boxBounce) {\n          this.checkBorders(this.boxBounce.w, this.boxBounce.h);\n        }\n    }\n\n    /*\n     *  Gets the length of the velocity vector, which equals to the hypotenuse\n     */\n    getSpeed() {\n        return Math.sqrt(this.vx * this.vx + this.vy * this.vy);\n    }\n\n    /*\n     *  Using the actual Velocity vector's angle, sets a new length for it\n     */\n    setSpeed(speed) {\n        let heading = this.getHeading();\n        this.vx = Math.cos(heading) * speed;\n        this.vy = Math.sin(heading) * speed;\n    }\n\n    /*\n     *  Gets the angle direction of the velocity vector\n     */\n    getHeading() {\n        return Math.atan2(this.vy, this.vx);\n    }\n\n    /*\n     *  Changes the Velocity vector's angle and recalculate coordinates\n     */\n    setHeading(heading) {\n        let speed = this.getSpeed();\n        this.vx = Math.cos(heading) * speed;\n        this.vy = Math.sin(heading) * speed;\n    }\n\n    /*\n     *  Sums to the Velocity vector x and y values\n     */\n    accelerate(x, y) {\n        this.vx += x;\n        this.vy += y;\n    }\n\n    /*\n    *  Bounce if the particle hits the box (i.e. screen) borders\n    */\n    checkBorders(width, height) {\n      if (this.x + this.radius >= width) {\n        this.x = width - this.radius;\n        this.vx *=  -1;\n      } else if (this.x - this.radius <= 0) {\n        this.x = this.radius;\n        this.vx *= -1;\n      }\n\n      if (this.y + this.radius >= height) {\n        this.y = height - this.radius;\n        this.vy *=  -1;\n      } else if (this.y - this.radius <= 0) {\n        this.y = this.radius;\n        this.vy *= -1;\n      }\n    }\n\n    /*\n     *  Calculates the angle between this particle and 'p2'\n     */\n    angleTo(p2) {\n        return Math.atan2(p2.y - this.y, p2.x - this.x);\n    }\n\n    /*\n     *  Calculates the distance to a given particle\n     */\n    distanceTo(p) {\n        let dx = p.x - this.x;\n        let dy = p.y - this.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    /*\n     *  Calculates and applies a gravitation vector to a given particle\n     */\n    gravitateTo(p) {\n        let dx = p.x - this.x;\n        let dy = p.y - this.y;\n        let distSQ = (dx * dx) + (dy * dy);\n        let dist = Math.sqrt(distSQ);\n        let force = (p.mass) / distSQ; // Force = mass / square of the distance\n        /*\n        cos * hypotenuse = opposite side || cos = opposite side / hypotenuse\n        sin * hypotenuse = adjacent side || sin = adjacent side / hypotenuse\n\n        That being said, we can optimize this:\n        let angle = this.angleTo(p);\n        let ax = Math.cos(angle) * force;\n        let ay = Math.sin(angle) * force;\n\n        And save three trigo functions\n        */\n        let ax = (dx / dist) * force;\n        let ay = (dy / dist) * force;\n\n        this.vx += ax;\n        this.vy += ay;\n    }\n\n    /*\n     *  Registers a particle to gravitate to\n     */\n    addGravitation(p) {\n        this.removeGravitation(p);\n        this.gravitations.push(p);\n    }\n\n    /*\n     *  Unregisters a gravitation particle\n     */\n    removeGravitation(p) {\n        let length = this.gravitations.length;\n        for (let i=0; i<length; i++){\n            if (this.gravitations[i] === p) {\n                this.gravitations.slice(i, 1);\n                return true;\n            }\n        }\n    }\n\n    /*\n     *  Gravitates to each registered gravitation particle\n     */\n    handleGravitations() {\n        let length = this.gravitations.length;\n        for (let i=0; i<length; i++){\n            this.gravitateTo(this.gravitations[i]);\n        }\n    }\n\n    /*\n     *  Calculates and applies a spring vector to a given point\n     */\n    springTo(point, k, length) {\n        let dx = point.x - this.x;\n        let dy = point.y - this.y;\n        let distance = Math.sqrt(dx * dx + dy * dy);\n        let force = (distance - length || 0) * k;\n        // Instead of getting cos / sin of angle, divide sides by hypotenuse\n        this.vx += (dx / distance) * force;\n        this.vy += (dy / distance) * force;\n    }\n\n    /*\n     *  Registers a new spring point\n     */\n    addSpring(point, k, length) {\n        this.removeSpring(point);\n        this.springs.push({\n            point: point,\n            k: k,\n            length: length || 0\n        });\n    }\n\n    /*\n     *  Unregisters a spring point\n     */\n    removeSpring(point) {\n        let length = this.springs.length;\n        for (let i=0; i<length; i++){\n            if (this.springs[i].point === point) {\n                this.springs.splice(i, 1);\n                return;\n            }\n        }\n    }\n\n\n    /*\n     *  Springs to each registered spring point\n     */\n    handleSprings() {\n        let length = this.springs.length;\n        for (let i=0; i<length; i++){\n            let spring = this.springs[i];\n            this.springTo(spring.point, spring.k, spring.length);\n        }\n    }\n}\n","import Mapper from './Mapper';\nimport Collisioner from './Collisioner';\nimport Collide from './Collide';\n\nexport default class ParticleManager {\n\n  constructor(settings, ctx) {\n    this.ctx = ctx;\n    this.mapper = new Mapper(settings.mapper);\n    this.collisioner = new Collisioner();\n    this.collide = new Collide();\n    this.regionDraw = settings.regionDraw || false;\n    this.particles = settings.particles || [];\n    this.boxWidth = settings.boxWidth || window.innerWidth;\n    this.boxHeight = settings.boxHeight || window.innerHeight-4;\n  }\n\n\n  /*\n   *  Update loop\n   */\n  update() {\n\n    for (let i=0; i<this.particles.length; i++) {\n      let p = this.particles[i];\n\n      // Update particle position\n      p.update();\n\n      // Update region status\n      this.mapper.update(p);\n    }\n  }\n\n  /*\n   *  Draw loop\n   */\n  draw() {\n\n    // Clear full screen\n    this.ctx.clearRect(0,0, this.boxWidth, this.boxHeight);\n\n    // Draw map regions (debugging)\n    if (this.regionDraw) {\n      this.drawMappgerRegions();\n    }\n\n    // Draw particles\n    for (let i=0; i<this.particles.length; i++) {\n      let p0 = this.particles[i];\n\n      // Check collisions with particles from the same region\n      this.handleCollisions(p0);\n      this.handleAttraction(p0);\n      this.drawParticle(p0);\n    }\n  }\n\n  /*\n   *  Add particles to the system - if total length is > 150000 or so, check:\n   *  -- http://stackoverflow.com/questions/1374126/how-to-extend-an-existing-javascript-array-with-another-array-without-creating/17368101#17368101\n   */\n  injectParticles(particles) {\n    Array.prototype.push.apply(this.particles, particles);\n  }\n\n  handleAttraction(p0) {\n    // TODO: Is this really necesary?\n    if (!p0.mapperRegions.hasOwnProperty('gravity')) {\n      return false;\n    }\n\n    for (let i=0; i<p0.mapperRegions['gravity'].length; i++) {\n      let rLabel = p0.mapperRegions['gravity'][i];\n      let region = this.mapper.layers['gravity'].regions[rLabel];\n      for (var r in region.particles) {\n\n        if (region.particles.hasOwnProperty(r)) {\n          let p1 = region.particles[r];\n\n          if (p0.id === p1.id) {\n            continue;\n          }\n\n          p0.gravitateTo(p1);\n\n        }\n      }\n    }\n\n  }\n\n\n  /*\n   *  Check and resolve collisions within a particle's mapper region\n   */\n  handleCollisions(p0) {\n    // TODO: Is this really necesary?\n    if (!p0.mapperRegions.hasOwnProperty('collision')) {\n      return false;\n    }\n\n    for (let i=0; i<p0.mapperRegions['collision'].length; i++) {\n      let rLabel = p0.mapperRegions['collision'][i];\n      let region = this.mapper.layers['collision'].regions[rLabel];\n      for (var r in region.particles) {\n\n        if (region.particles.hasOwnProperty(r)) {\n          let p1 = region.particles[r];\n\n          if (p0.id === p1.id) {\n            continue;\n          }\n\n          let collision = this.collisioner.circleCollision(p0, p1);\n\n          // Reslve collision\n          if (collision) {\n            this.collide.elastic2D(p0, p1, collision);\n          }\n        }\n      }\n    }\n  }\n\n  /*\n   *  Draw a single particle\n   */\n  drawParticle(p) {\n    this.ctx.beginPath();\n    this.ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2, false);\n    this.ctx.fillStyle = p.color || '#000000';\n    this.ctx.fill();\n    this.ctx.closePath();\n  }\n\n  /*\n   *  Draw Mappger Regions (for debugging)\n   */\n  drawMappgerRegions() {\n\n    // Draw layer regions\n    for (let layer in this.mapper.layers) {\n      if (this.mapper.layers.hasOwnProperty(layer)) {\n        let layerObj = this.mapper.layers[layer];\n\n        for (let r in layerObj.regions) {\n          if (layerObj.regions.hasOwnProperty(r)) {\n\n            let mRegion = layerObj.regions[r];\n            this.ctx.beginPath();\n            this.ctx.strokeStyle = mRegion.color;\n            this.ctx.rect(mRegion.beginsAtX, mRegion.beginsAtY, layerObj.regionSize-2, layerObj.regionSize-2);\n            this.ctx.stroke();\n            this.ctx.closePath();\n          }\n        }\n\n      }\n    }\n\n  }\n}\n","import FEATURE_TOGGLE from '../../src/feature-toggle';\n\nclass Utils {\n  constructor() {\n    this.cache = {};\n  }\n\n  cacheStore(caller, key, value) {\n    if (!this.cache.hasOwnProperty(caller)) {\n      this.cache[caller] = {};\n    }\n    this.cache[caller][key] = value;\n  }\n\n  cacheRetrieve(caller, key) {\n    let fnCache = this.cache[caller] || [];\n    let value = fnCache[key] || false;\n    return value;\n  }\n\n  /*\n   *  Get 'n' points from a circular shaped 'Particle' object\n   */\n  getCirclePoints(p, n, radius) {\n    n = n || 8;\n    radius = radius || p.radius || 0;\n\n    let angle = -1;\n    let angleStep = (Math.PI * 2) / n;\n    let points = [];\n\n    for (let i=0; i<n; i++) {\n      let cData = this.cacheRetrieve(\"getCirclePoints\", angle);\n      let cos = cData.cos || Math.cos(angle);\n      let sin = cData.sin || Math.sin(angle);\n      let pt = {\n        x: p.x + (cos * p.radius),\n        y: p.y + (sin * p.radius)\n      };\n      points.push(pt);\n      if (!cData) {\n        this.cacheStore(\"getCirclePoints\", angle, {cos: cos, sin: sin});\n      }\n      angle += angleStep;\n    }\n\n    // Add the center point\n    return points;\n  }\n\n  montecarlo() {\n    while(true) {\n      let r1 = Math.random();\n      let p = r1;\n      let r2 = Math.random();\n      if (r2 < p) {\n        return r1;\n      }\n    }\n  }\n\n  lerp(norm, min, max) {\n    return (max - min) * norm + min;\n  }\n\n  quadraticBezier(p0, p1, p2, t, pFinal) {\n    pFinal = pFinal || {};\n    pFinal.x = Math.pow(1 - t, 2) * p0.x + (1 - t) * 2 * t * p1.x + t * t * p2.x;\n    pFinal.y = Math.pow(1 - t, 2) * p0.y + (1 - t) * 2 * t * p1.y + t * t * p2.y;\n    return pFinal;\n  }\n\n  cubicBezier(p0, p1, p2, p3, t, pFinal) {\n    pFinal = pFinal || {};\n    pFinal.x = Math.pow(1 - t, 3) * p0.x + Math.pow(1 - t, 2) * 3 * t * p1.x + (1 - t) * 3 * t * t * p2.x + t * t * t * p3.x;\n    pFinal.y = Math.pow(1 - t, 3) * p0.y + Math.pow(1 - t, 2) * 3 * t * p1.y + (1 - t) * 3 * t * t * p2.y + t * t * t * p3.y;\n    return pFinal;\n  }\n\n  distance(p0, p1) {\n    let dx = p0.x - p1.x;\n    let dy = p0.y - p1.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  distanceXY(x0, y0, x1, y1) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  // TODO: Check if and why we need to parseInt() the result\n  mapRange(value, low1, high1, low2, high2) {\n    return result = low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n    let result = low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n    if (low2 === parseInt(low2, 10) || high2 === parseInt(high2, 10)) {\n      result = parseInt(result);\n    }\n    return result;\n  }\n\n  inRange(value, min, max) {\n    return value >= Math.min(min, max) && value <= Math.max(min, max);\n  }\n\n  rangeIntersect(min0, max0, min1, max1) {\n    return  Math.max(min0, max0) >= Math.min(min1, max1) &&\n    Math.min(min0, max0) <= Math.max(min1, max1);\n  }\n\n  randomRange(min, max) {\n    return min + Math.random() * (max - min);\n  }\n\n  circleCollision(c0, c1) {\n    return this.distance(c0, c1) <= c0.radius + c1.radius;\n  }\n\n  rectangleCollision(r0, r1) {\n    return  this.rangeIntersect(r0.x, r0.x + r0.width, r1.x, r1.x + r1.width) &&\n    this.rangeIntersect(r0.y, r0.y + r0.height, r1.y, r1.y + r1.height);\n  }\n\n  circlePointCollision(px, py, circle) {\n    return this.distanceXY(px, py, circle.x, circle.y) < circle.radius;\n  }\n\n  rectanglePointCollision(px, py, rect) {\n    return  this.inRange(px, rect.x, rect.x + rect.width) &&\n    this.inRange(py, rect.y, rect.y + rect.height);\n  }\n}\n\nlet instance = new Utils();\n\nexport default instance;\n"]}