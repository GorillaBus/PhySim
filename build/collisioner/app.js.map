{"version":3,"sources":["node_modules/browser-pack/_prelude.js","projects/collisioner/app.js","projects/collisioner/interactions.js","projects/collisioner/lib/Mapper.js","projects/collisioner/lib/MapperLayer.js","projects/collisioner/lib/MapperRegion.js","projects/collisioner/lib/ParticleExt.js","projects/collisioner/lib/ParticleManager.js","projects/collisioner/matter.js","src/feature-toggle.js","src/lib/AnimationPlayer.js","src/lib/Particle.js","src/lib/Utils.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Utils from '../../src/lib/Utils';\nimport AnimationPlayer from '../../src/lib/AnimationPlayer';\nimport ParticleManager from './lib/ParticleManager';\nimport Matter from './matter';\n\nwindow.onload = () => {\n\n  const canvas = document.getElementById(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  const width = window.innerWidth;\n  const height = window.innerHeight-4;\n  const center = { x: width/2, y: height/2 };\n\n  canvas.height = height;\n  canvas.width = width;\n\n\n  // World settings\n  const G = 9.8;\n  let world = {\n    G: G\n  };\n\n\n  let player = new AnimationPlayer({ fps: 60 });\n\n\n  // Create particle fixtures\n  let particlesFixtures = new Array(900);\n  let matterTypes = Object.keys(Matter)\n  let neutralTypeIndex = matterTypes.indexOf('neutral');\n  matterTypes.splice(neutralTypeIndex, 1);\n  let totalMatterTypes = matterTypes.length;\n\n  for (let i=0; i<particlesFixtures.length; i++) {\n\n    let randomMatter = Math.floor(Math.random() * totalMatterTypes) + 0;\n    let matterType = matterTypes[randomMatter];\n\n    let p = {\n        x: Utils.randomRange(50, width-50),\n        y: Utils.randomRange(50, height-50),\n        mass: Utils.randomRange(3, 5),\n        direction: Utils.randomRange(-1, 1),\n        //speed: Utils.randomRange(2, 5),\n        matter: matterType,\n        boxBounce: { w: width, h: height }\n    };\n\n    particlesFixtures[i] = p;\n  }\n\n  // particlesFixtures[0] = {\n  //   x: center.x-40,\n  //   y: center.y,\n  //   mass: 148,\n  //   matter: \"iron\",\n  //   direction: Math.PI*2,\n  //   //speed: 0.9,\n  //   boxBounce: { w: width, h: height }\n  // };\n  //\n  // particlesFixtures[1] = {\n  //   x: center.x+100,\n  //   y: center.y,\n  //   mass: 3,\n  //   matter: \"air\",\n  //   direction: Math.PI,\n  //   //speed: 1.3,\n  //   boxBounce: { w: width, h: height }\n  // };\n\n  let pmanager = new ParticleManager({\n    debug: false\n  }, world, ctx);\n\n  // Create interaction maps\n  // TODO: Check what happens with duplicated layers.\n  let collisionRegionSize = 200;\n  let gravityRegionSize = width;\n  pmanager.addInteractionMap('collision', collisionRegionSize, 'collision');\n  pmanager.addInteractionMap('gravity', gravityRegionSize, 'gravity');\n\n  // Add particlesFixtures into the Mapper\n  pmanager.addParticles(particlesFixtures);\n\n  // Demo player setup\n  player.setUpdateFn(update);\n  //player.play();\n\n\n  // Frame drawing function\n  function update() {\n\n    // Update particle's state\n    pmanager.update();\n\n    // Clear full screen\n    ctx.clearRect(0,0, width, height);\n\n    // Global draw\n    pmanager.draw();\n  }\n\n};\n","export default {\n  'gravity': (a, b) => {\n    a.gravitateTo(b);\n  },\n  'collision': (a, b) => {\n    let collision = a.collisionCheck(b);\n    if (collision) {\n      a.collisionHandle(b, collision);\n    }\n  }\n}\n","import Interactions from '../interactions';\nimport Utils from '../../../src/lib/Utils';\nimport Layer from './MapperLayer';\n\nexport default class Mapper {\n\n  constructor() {\n    this.layers = [];\n    this.layerIndex = {};\n  }\n\n  /*\n   *  Creates a new Layer in the Mapper\n   */\n  addLayer(id, regionSize, interactionFn) {\n\n    if (typeof interactionFn === 'string' && Interactions.hasOwnProperty(interactionFn)) {\n      interactionFn = Interactions[interactionFn];\n    } else {\n      console.warn('Mapper.addLayer: '+ interactionFn +' is not a predefined Interaction');\n    }\n\n    let layer = new Layer({\n      id: id,\n      regionSize: regionSize,\n      interactionFn: interactionFn\n    });\n\n    this.layers.push(layer);\n    this.layerIndex[id] = layer;\n\n    return this.layerIndex[id];\n  }\n\n  /*\n   *  Registers a particle in all the qualified regions of each Mapper Layer\n   */\n  register(p) {\n    let mapperData = [];\n    let totalLayers = this.layers.length;\n    let points = Utils.getCirclePoints(p);\n    let totalPoints = points.length;\n\n    for (let x=0; x<totalLayers; x++) {\n      let layer = this.layers[x];\n      let qualifiedRegions = [];\n\n      this.unregister(p);\n\n      for (let i=0; i<totalPoints; i++) {\n        let regionData = this.qualifyPoint(points[i], layer.id);\n        let totalQualified = qualifiedRegions.length;\n        let exists = false;\n\n        for (let z=0; z<totalQualified; z++) {\n          if (qualifiedRegions[z].id === regionData.id) {\n            exists = true;\n            continue;\n          }\n        }\n\n        if (!exists) {\n          if (!layer.regionIndex.hasOwnProperty(regionData.id)) {\n            layer.addRegion(regionData)\n          }\n\n          let region = layer.regionIndex[regionData.id];\n          region.subscribe(p);\n          qualifiedRegions.push(region);\n        }\n      }\n\n      mapperData.push({\n        id: layer.id,\n        regions: qualifiedRegions\n      });\n    }\n\n    p.mapperData = mapperData;\n  }\n\n  /*\n   *  Unsubscribe particle from every Layer/Region and reset particle's mapper data\n   */\n  unregister(p) {\n    let totalLayers = p.mapperData.length;\n    for (let i=0; i<totalLayers; i++) {\n      let layerID = p.mapperData[i].id;\n      let totalRegions = p.mapperData[i].regions.length;\n      for (let r=0; r<totalRegions; r++) {\n        p.mapperData[i].regions[r].unsubscribe(p);\n      }\n    }\n\n    this.reset(p);\n  }\n\n  /*\n   *  Deletes all mapepr data from Particle\n   */\n  reset(p) {\n    p.mapperData = [];\n  }\n\n  /*\n   *  Qualifies a single point into a Layer Region\n   */\n  qualifyPoint(pt, layerId) {\n    let regionSize = this.layerIndex[layerId].regionSize;\n    let xComponent = pt.x > regionSize ? Math.floor(Math.abs(pt.x / regionSize)):0;\n    let yComponent = pt.y > regionSize ? Math.floor(Math.abs(pt.y / regionSize)):0;\n    let data = {\n      id: null,\n      x: xComponent * regionSize,\n      y: yComponent * regionSize\n    };\n    data.id = xComponent + \"_\"+ yComponent;\n    return data;\n  }\n}\n","import Region from './MapperRegion';\nimport Utils from '../../../src/lib/Utils';\n\nexport default class MapperLayer {\n\n  constructor(settings) {\n    this.id = settings.id;\n    this.regionSize = settings.regionSize;\n    this.regions = [];\n    this.regionIndex = {};\n    this.interaction = settings.interactionFn;\n    this.color = Utils.randomColor();\n  }\n\n  /*\n   *  Creates a new Region in the Mapper\n   */\n  addRegion(regionData) {\n    let region = new Region({\n      id: regionData.id,\n      x: regionData.x,\n      y: regionData.y,\n      size: this.regionSize,\n      layer: this\n    });\n\n    this.regions.push(region);\n    this.regionIndex[regionData.id] = region;\n  }\n\n  /*\n   *  Iterates all Layer Regions and fires it's interaction function\n   */\n  iterate() {\n    let totalRegions = this.regions.length;\n    for (let x=0; x<totalRegions; x++) {\n      this.regions[x].interact();\n    }\n  }\n}\n","export default class MapperRegion {\n\n  constructor(settings) {\n    this.id = settings.id;\n    this.x = settings.x;\n    this.y = settings.y;\n    this.size = settings.size;\n    this.layer = settings.layer;\n    this.particles = [];\n    this.totalParticles = 0;\n    this.particleIndex = {};\n  }\n\n  /*\n   *  Subscribes a Particle to the Region\n   */\n  subscribe(p) {\n    this.particles.push(p.id);\n    this.particleIndex[p.id] = p;\n    this.totalParticles++;\n  }\n\n  /*\n   *  Unsubscribes a Particle from the Region\n   */\n  unsubscribe(p) {\n    delete this.particleIndex[p.id];\n    let index = this.particles.indexOf(p.id);\n    this.particles.splice(index, 1);\n    this.totalParticles--;\n  }\n\n  /*\n   *  Iterates through al particles running the interaction function\n   */\n  interact() {\n    for (let i=0; i<this.totalParticles; i++) {\n      let A = this.particleIndex[this.particles[i]];\n      for (let y=0; y<this.totalParticles; y++) {\n        let B = this.particleIndex[this.particles[y]];\n        if (A.id === B.id) {\n          continue;\n        }\n        this.layer.interaction(A, B);\n      }\n    }\n  }\n\n  /*\n   *  Draws the region on screen (debugging)\n   */\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.strokeStyle = \"#FFFFFF\";\n    ctx.fillStyle = this.layer.color;\n    ctx.rect(this.x, this.y, this.layer.regionSize, this.layer.regionSize);\n    ctx.fill();\n    ctx.stroke();\n    ctx.closePath();\n  }\n}\n","import FEATURE_TOGGLE from '../../../src/feature-toggle';\nimport Particle from '../../../src/lib/Particle';\nimport Matter from '../matter.js';\n\n\nexport default class ParticleExt extends Particle {\n\n    constructor(settings) {\n      super(settings);\n\n      this.matter = Matter[settings.matter] || Matter.neutral;\n      this.color = this.matter.color;\n      this.radius = this.mass / this.matter.density;\n      this.mapperData = [];\n      this.points = settings.points || [];\n    }\n\n    draw(ctx) {\n      ctx.beginPath();\n      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n      ctx.fillStyle = this.color;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    debugDrawNextPosition(ctx) {\n      let x = this.x;\n      let y = this.y;\n      let vx = this.vx;\n      let vy = this.vy;\n\n      vy += this.gravity;\n      vx *= this.friction;\n      vy *= this.friction;\n\n      x += vx;\n      y += vy;\n\n      ctx.beginPath();\n      ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\n      ctx.strokeStyle = this.color;\n      ctx.stroke();\n\n      ctx.strokeStyle = \"rgba(0,0,0,0.5)\";\n      ctx.moveTo(this.x, this.y);\n      ctx.lineTo(x, y);\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    /*\n     *  Adds to the velocity vector dividing by the mass\n     */\n    applyForce(f) {\n      this.vx += f.x / this.mass;\n      this.vy += f.y / this.mass;\n    }\n\n    /*\n     *  Calculates and applies a gravitation vector to a given particle\n     */\n     gravitateTo(p, gravityFactor) {\n         gravityFactor = gravityFactor || 0.1;\n\n         let radiusSum = this.radius + p.radius;\n         let massFactor = this.mass * p.mass;\n\n         let dx = p.x - this.x;\n         let dy = p.y - this.y;\n         let distSQ = (dx * dx) + (dy * dy);\n         let dist = Math.sqrt(distSQ);\n         let surfaceDist = dist - radiusSum;\n\n         // Cancel gravitation once objects collide\n         // TODO: Verify if we can save the Math.sqrt() comparing squares\n         if (dist < radiusSum) {\n           return;\n         }\n\n         let force = gravityFactor * massFactor / (dist * dist);\n\n         let gravityVector = {\n           x: (dx / dist) * force,\n           y: (dy / dist) * force\n         };\n\n         this.applyForce(gravityVector);\n     }\n\n    /*\n        Check for Circle-Circle collisions and return details\n    */\n    collisionCheck(p) {\n      // Get the Distance vector (difference in position)\n      let xDist = this.x - p.x;\n      let yDist = this.y - p.y;\n\n      // We'll save a Math.sqrt() to verify distances like this:\n      let distSquared = xDist*xDist + yDist*yDist;\n      let radiusSquared = (this.radius + p.radius) * (this.radius + p.radius);\n\n      // Collision check\n      if (distSquared < radiusSquared) {\n\n        // Once collided, get the Displacement vector (difference in velocity)\n        let xVelocity = p.vx - this.vx;\n        let yVelocity = p.vy - this.vy;\n\n        // Project the Collision vector over the Distance vector\n        let dotProduct = xDist*xVelocity + yDist*yVelocity;\n\n\n        /*\n         *\n         *\n         *  Hi, welcome to this \"Dot Product\" implementation 101.\n         *\n         *    Dot Product will tell if both particles ara heading one to the other, and if they are\n         *    actually colliding or will collide in the future.\n         *\n         *    Think of it as if we where calculating the difference in Distance (or position) and\n         *    the difference in Speed (lenth) of both objects. To do this, we substract vector values.\n         *\n         *    When the difference in angles and speeds between the two moving objects are both:\n         *\n         *    Negative: NO collision; maybe exact oposite direction but still yet\n         *              too far to collide -at this time (maybe next tick)\n         *\n         *    Cero:     COLLISION; a perfect collision in direction, acceleration and time\n         *\n         *    Positive: COLLISION; exact direction; and the resulting force from the collision\n         *\n         *\n         */\n        if (dotProduct > 0) {\n\n          // The resulting force from the collision (angle difference + velocity difference)\n          let collisionScale = dotProduct / distSquared;\n\n          // // Collision Vector:\n          let collision = {\n            x: xDist * collisionScale,\n            y: yDist * collisionScale\n          };\n\n          return collision;\n        }\n      }\n\n      return false;\n    }\n\n    /*\n        2D Elastic collision handling\n    */\n    collisionHandle(p, collisionVector) {\n\n      // 2D-Elastic collision formula\n      let combinedMass = this.mass + p.mass;\n      let collisionWeight0 = (2 * p.mass / combinedMass) * p.matter.restitution;\n      let collisionWeight1 = (2 * this.mass / combinedMass) * this.matter.restitution;\n\n      // Adds the computed collision results to the velocities of this / p\n      this.vx += collisionWeight0 * collisionVector.x;\n      this.vy += collisionWeight0 * collisionVector.y;\n      p.vx -= collisionWeight1 * collisionVector.x;\n      p.vy -= collisionWeight1 * collisionVector.y;\n    }\n}\n","import Utils from '../../../src/lib/Utils';\nimport Particle from './ParticleExt';\nimport Mapper from './Mapper';\n\nexport default class ParticleManager {\n\n  constructor(settings, world, ctx) {\n    this.world = world;\n    this.ctx = ctx;\n    this.mapper = new Mapper();\n    this.interactionMaps = [];\n    this.particles = [];\n    this.DEBUG_MODE = settings.debug || false;\n  }\n\n  /*\n   *  General Mapper update method\n   */\n  update() {\n    this.updateParticles();\n    this.runInteractions();\n  }\n\n  /*\n   *  Debugging: draws all regions and total particles on screen\n   */\n  debugDrawRegions(displayParticleCount) {\n    let totalLayers = this.mapper.layers.length;\n    let body = document.getElementsByTagName(\"BODY\")[0];\n\n    for (let i=0; i<totalLayers; i++) {\n      let layer = this.mapper.layers[i];\n      let totalRegions = layer.regions.length;\n\n      for (let x=0; x<totalRegions; x++) {\n        let region = layer.regions[x];\n\n        // Skip empty regions\n        if (region.totalParticles > 0) {\n          region.draw(this.ctx);\n\n          if (displayParticleCount) {\n            let docFragment = document.createDocumentFragment();\n            let obj;\n\n            if (!(obj = document.getElementById(region.id))) {\n              obj = document.createElement(\"p\");\n              obj.innerHTML = region.totalParticles;\n              obj.id = region.id;\n              obj.style.position = \"absolute\";\n              obj.style.left = (region.x + 2) +\"px\";\n              obj.style.top = (region.y - 5) + \"px\";\n              obj.style.fontSize = \"0.5em\";\n              obj.style.color = \"#FFFFFF\";\n\n              docFragment.appendChild(obj);\n              body.appendChild(docFragment);\n            }\n\n            obj.innerHTML = region.totalParticles;\n          }\n        }\n      }\n    }\n  }\n\n  /*\n   *  Update particle's state\n   */\n  updateParticles() {\n    let totalParticles = this.particles.length;\n    for (let i=0; i<totalParticles; i++) {\n      let p = this.particles[i];\n\n      // Update particle position\n      p.update();\n\n      // Register particle in the Mapper\n      this.mapper.register(p);\n    }\n  }\n\n  /*\n   *  Creates a new mapper layer.\n   *  @interaction:   predefined interaction | callbackFn(a, b);\n   */\n  addInteractionMap(id, size, interactionFn) {\n    this.mapper.addLayer(id, size, interactionFn);\n  }\n\n  /*\n   *  Force interaction loop\n   */\n  runInteractions() {\n    let totalInteractions = this.mapper.layers.length;\n    for (let i=0; i<totalInteractions; i++) {\n      this.mapper.layers[i].iterate();\n    }\n  }\n\n  /*\n   *  Draw loop\n   */\n  draw() {\n    // Draw mapper regions (debugging)\n    if (this.DEBUG_MODE) {\n      this.debugDrawRegions(true);\n    }\n\n    // Draw particles\n    let totalParticles = this.particles.length;\n    for (let i=0; i<totalParticles; i++) {\n      this.particles[i].draw(this.ctx);\n    }\n  }\n\n  /*\n   *  Add particles to the system - if total length is > 150000 or so, check:\n   */\n  addParticles(settings) {\n    for (let i=0; i<settings.length; i++) {\n      let particle = new Particle(settings[i]);\n      particle.id = Utils.uniqueID();\n      this.particles.push(particle);\n    }\n  }\n\n}\n","export default {\n  neutral: {\n    density: 1,\n    color: \"rgba(200,200,200,0.6)\",\n    restitution: 1\n  },\n  iron: {\n    density: 1.7874,\n    color: \"#434b9d\",\n    restitution: 0.85\n  },\n  sand: {\n    density: 1.1553,\n    color: \"rgba(194, 178, 128, 0.8)\",\n    restitution: 0.31\n  },\n  water: {\n    density: 0.9997,\n    color: \"rgba(64, 164, 223, 0.6)\",\n    restitution: 0.13\n  },\n  air: {\n    density: 0.1257,\n    color: \"rgba(115, 216, 237, 0.3)\",\n    restitution: 0.3\n  }\n}\n","/*\n *  Feature Toggling\n *\n *  Activete/Hide features that are in process of development or under testing\n *  Once a feature is accepted to be includded must be removed from the\n *  feature toggle scheme\n */\n\n const FEATURE_TOGGLE = {\n   FPS_CONTROL: true                // FPS controll for AnimationPlayer class\n };\n\n export default FEATURE_TOGGLE;\n","import FEATURE_TOGGLE from '../../src/feature-toggle';\n\nexport default class AnimationPlayer {\n\n  constructor(settings) {\n    settings = settings || {};\n\n    this.window = settings.windowElement || window;\n    this.requestId = null;\n    this.playing = false;\n\n    // FPS control\n    this.fps = settings.fps || 90;\n    this.now;\n    this.lastTime = Date.now();\n    this.interval = 1000/this.fps;\n    this.delta;\n\n    this.registerEvents();\n  }\n\n  registerEvents() {\n    // Animation control: KeyDown\n    document.body.addEventListener(\"keydown\", (e) => {\n      //console.log(\"Key pressed: \", e.keyCode);\n      switch (e.keyCode) {\n        case 27:                        // Esc\n        if (this.playing) {\n          this.stop();\n          console.log(\"> Scene stopped\");\n        } else {\n          this.play();\n          console.log(\"> Playing scene\");\n        }\n        break;\n\n        case 13:\n        this.stop();\n        this.play();\n        this.stop();\n        console.log(\"> Step forward\");\n        break;\n\n        default:\n        break;\n      }\n    });\n  }\n\n  play() {\n    this.playing = true;\n    this.updateFn();\n  }\n\n  stop() {\n    if (!this.playing) {\n      return false;\n    }\n    this.window.cancelAnimationFrame(this.requestId);\n    this.playing = false;\n    this.requestId = null;\n  }\n\n  setUpdateFn(updateFn) {\n    this.updateFn = (\n      () => {\n        this.requestId = this.window.requestAnimationFrame(this.updateFn);\n        this.now = Date.now();\n        this.delta = this.now - this.lastTime;\n\n        if (this.delta > this.interval) {\n          this.lastTime = this.now - (this.delta % this.interval);\n          updateFn(this.delta, this.lastTime);\n        }\n        return;\n\n\n        updateFn();\n\n      });\n    }\n\n    updateFn() {\n      console.warn(\"Player update function has not been set.\");\n    }\n  }\n","import FEATURE_TOGGLE from '../../src/feature-toggle';\n\nexport default class Particle {\n\n  /*\n   *   Pass 'boxBounce' as { w: <with>, h: <height> } to make particle bounce inside a box\n   *\n   **/\n    constructor(settings) {\n        this.x = settings.x || 0;\n        this.y = settings.y || 0;\n        this.vx = (Math.cos(settings.direction) * settings.speed) || 0;\n        this.vy = (Math.sin(settings.direction) * settings.speed) || 0;\n        this.gravity = settings.gravity || 0;\n        this.mass = settings.mass || 1;\n        this.radius = settings.radius || settings.mass * 0.87;\n        this.friction = settings.friction || 1;\n        this.springs = [];\n        this.gravitations = [];\n        this.positionUpdated = false;\n        this.color = settings.color || 'rgba(0,0,0,0.6)';\n        this.boxBounce = settings.boxBounce || false;\n    }\n\n    /*\n     *  Updates the state of the particle\n     */\n    update() {\n        let x = this.x;\n        let y = this.y;\n\n        this.handleSprings();\n        this.handleGravitations();\n        this.vy += this.gravity;\n        this.vx *= this.friction;\n        this.vy *= this.friction;\n        this.x += this.vx;\n        this.y += this.vy;\n\n        if (this.boxBounce) {\n          this.checkBorders(this.boxBounce.w, this.boxBounce.h);\n        }\n\n        if (x !== this.x && y !== this.y) {\n          this.positionUpdated = true;\n        } else {\n\n        }\n    }\n\n    /*\n     *  Gets the length of the velocity vector, which equals to the hypotenuse\n     */\n    getSpeed() {\n        return Math.sqrt(this.vx * this.vx + this.vy * this.vy);\n    }\n\n    /*\n     *  Using the actual Velocity vector's angle, sets a new length for it\n     */\n    setSpeed(speed) {\n        let heading = this.getHeading();\n        this.vx = Math.cos(heading) * speed;\n        this.vy = Math.sin(heading) * speed;\n    }\n\n    /*\n     *  Gets the angle direction of the velocity vector\n     */\n    getHeading() {\n        return Math.atan2(this.vy, this.vx);\n    }\n\n    /*\n     *  Changes the Velocity vector's angle and recalculate coordinates\n     */\n    setHeading(heading) {\n        let speed = this.getSpeed();\n        this.vx = Math.cos(heading) * speed;\n        this.vy = Math.sin(heading) * speed;\n    }\n\n    /*\n     *  Sums to the Velocity vector x and y values\n     */\n    accelerate(x, y) {\n        this.vx += x;\n        this.vy += y;\n    }\n\n    /*\n    *  Bounce if the particle hits the box (i.e. screen) borders\n    */\n    checkBorders(width, height) {\n      if (this.x + this.radius >= width) {\n        this.x = width - this.radius;\n        this.vx *=  -1;\n      } else if (this.x - this.radius <= 0) {\n        this.x = this.radius;\n        this.vx *= -1;\n      }\n\n      if (this.y + this.radius >= height) {\n        this.y = height - this.radius;\n        this.vy *=  -1;\n      } else if (this.y - this.radius <= 0) {\n        this.y = this.radius;\n        this.vy *= -1;\n      }\n    }\n\n    /*\n     *  Calculates the angle between this particle and 'p2'\n     */\n    angleTo(p2) {\n        return Math.atan2(p2.y - this.y, p2.x - this.x);\n    }\n\n    /*\n     *  Calculates the distance to a given particle\n     */\n    distanceTo(p) {\n        let dx = p.x - this.x;\n        let dy = p.y - this.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    /*\n     *  Calculates and applies a gravitation vector to a given particle\n     */\n     gravitateTo(p, gravityFactor) {\n         gravityFactor = gravityFactor || 0.04;\n\n         let radiusSum = this.radius + p.radius;\n         let massFactor = this.mass * p.mass;\n\n         let dx = p.x - this.x;\n         let dy = p.y - this.y;\n         let distSQ = (dx * dx) + (dy * dy);\n         let dist = Math.sqrt(distSQ);\n         let surfaceDist = dist - radiusSum;\n\n         // Cancel gravitation once objects collide\n         // TODO: Verify if we can save the Math.sqrt() comparing squares\n         if (dist < radiusSum + 5) {\n           return;\n         }\n\n         //let force = (p.mass) / distSQ; // Force = mass / square of the distance\n         let force = gravityFactor * massFactor / (surfaceDist * surfaceDist);\n\n         let ax = (dx / surfaceDist) * force;\n         let ay = (dy / surfaceDist) * force;\n\n         this.vx += ax;\n         this.vy += ay;\n     }\n\n    /*\n     *  Registers a particle to gravitate to\n     */\n    addGravitation(p) {\n        this.removeGravitation(p);\n        this.gravitations.push(p);\n    }\n\n    /*\n     *  Unregisters a gravitation particle\n     */\n    removeGravitation(p) {\n        let length = this.gravitations.length;\n        for (let i=0; i<length; i++){\n            if (this.gravitations[i] === p) {\n                this.gravitations.slice(i, 1);\n                return true;\n            }\n        }\n    }\n\n    /*\n     *  Gravitates to each registered gravitation particle\n     */\n    handleGravitations() {\n        let length = this.gravitations.length;\n        for (let i=0; i<length; i++){\n            this.gravitateTo(this.gravitations[i]);\n        }\n    }\n\n    /*\n     *  Calculates and applies a spring vector to a given point\n     */\n    springTo(point, k, length) {\n        let dx = point.x - this.x;\n        let dy = point.y - this.y;\n        let distance = Math.sqrt(dx * dx + dy * dy);\n        let force = (distance - length || 0) * k;\n        // Instead of getting cos / sin of angle, divide sides by hypotenuse\n        this.vx += (dx / distance) * force;\n        this.vy += (dy / distance) * force;\n    }\n\n    /*\n     *  Registers a new spring point\n     */\n    addSpring(point, k, length) {\n        this.removeSpring(point);\n        this.springs.push({\n            point: point,\n            k: k,\n            length: length || 0\n        });\n    }\n\n    /*\n     *  Unregisters a spring point\n     */\n    removeSpring(point) {\n        let length = this.springs.length;\n        for (let i=0; i<length; i++){\n            if (this.springs[i].point === point) {\n                this.springs.splice(i, 1);\n                return;\n            }\n        }\n    }\n\n\n    /*\n     *  Springs to each registered spring point\n     */\n    handleSprings() {\n        let length = this.springs.length;\n        for (let i=0; i<length; i++){\n            let spring = this.springs[i];\n            this.springTo(spring.point, spring.k, spring.length);\n        }\n    }\n}\n","import FEATURE_TOGGLE from '../../src/feature-toggle';\n\nclass Utils {\n\n  constructor() {\n    this.cache = {};\n  }\n\n  cacheStore(caller, key, value) {\n    if (!this.cache.hasOwnProperty(caller)) {\n      this.cache[caller] = {};\n    }\n    this.cache[caller][key] = value;\n  }\n\n  cacheRetrieve(caller, key) {\n    let fnCache = this.cache[caller] || [];\n    let value = fnCache[key] || false;\n    return value;\n  }\n\n  /*\n   *  Get 'n' points from a circular shaped 'Particle' object\n   */\n  getCirclePoints(p, n, radius) {\n    n = n || 8;\n    radius = radius || p.radius || 0;\n\n    let angle = -1;\n    let angleStep = (Math.PI * 2) / n;\n    let points = [];\n\n    for (let i=0; i<n; i++) {\n      let cData = this.cacheRetrieve(\"getCirclePoints\", angle);\n      let cos = cData.cos || Math.cos(angle);\n      let sin = cData.sin || Math.sin(angle);\n      let pt = {\n        x: p.x + (cos * p.radius),\n        y: p.y + (sin * p.radius)\n      };\n      points.push(pt);\n      if (!cData) {\n        this.cacheStore(\"getCirclePoints\", angle, {cos: cos, sin: sin});\n      }\n      angle += angleStep;\n    }\n\n    // Add the center point\n    return points;\n  }\n\n  montecarlo() {\n    while(true) {\n      let r1 = Math.random();\n      let p = r1;\n      let r2 = Math.random();\n      if (r2 < p) {\n        return r1;\n      }\n    }\n  }\n\n  lerp(norm, min, max) {\n    return (max - min) * norm + min;\n  }\n\n  quadraticBezier(p0, p1, p2, t, pFinal) {\n    pFinal = pFinal || {};\n    pFinal.x = Math.pow(1 - t, 2) * p0.x + (1 - t) * 2 * t * p1.x + t * t * p2.x;\n    pFinal.y = Math.pow(1 - t, 2) * p0.y + (1 - t) * 2 * t * p1.y + t * t * p2.y;\n    return pFinal;\n  }\n\n  cubicBezier(p0, p1, p2, p3, t, pFinal) {\n    pFinal = pFinal || {};\n    pFinal.x = Math.pow(1 - t, 3) * p0.x + Math.pow(1 - t, 2) * 3 * t * p1.x + (1 - t) * 3 * t * t * p2.x + t * t * t * p3.x;\n    pFinal.y = Math.pow(1 - t, 3) * p0.y + Math.pow(1 - t, 2) * 3 * t * p1.y + (1 - t) * 3 * t * t * p2.y + t * t * t * p3.y;\n    return pFinal;\n  }\n\n  distance(p0, p1) {\n    let dx = p0.x - p1.x;\n    let dy = p0.y - p1.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  distanceXY(x0, y0, x1, y1) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  // TODO: Check if and why we need to parseInt() the result\n  mapRange(value, low1, high1, low2, high2) {\n    return result = low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n    let result = low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n    if (low2 === parseInt(low2, 10) || high2 === parseInt(high2, 10)) {\n      result = parseInt(result);\n    }\n    return result;\n  }\n\n  inRange(value, min, max) {\n    return value >= Math.min(min, max) && value <= Math.max(min, max);\n  }\n\n  rangeIntersect(min0, max0, min1, max1) {\n    return  Math.max(min0, max0) >= Math.min(min1, max1) &&\n    Math.min(min0, max0) <= Math.max(min1, max1);\n  }\n\n  randomRange(min, max) {\n    return min + Math.random() * (max - min);\n  }\n\n  constrain(e,t,r) {\n    return e>r?r:e<t?t:e;\n  }\n\n  circleCollision(c0, c1) {\n    return this.distance(c0, c1) <= c0.radius + c1.radius;\n  }\n\n  rectangleCollision(r0, r1) {\n    return  this.rangeIntersect(r0.x, r0.x + r0.width, r1.x, r1.x + r1.width) &&\n    this.rangeIntersect(r0.y, r0.y + r0.height, r1.y, r1.y + r1.height);\n  }\n\n  circlePointCollision(px, py, circle) {\n    return this.distanceXY(px, py, circle.x, circle.y) < circle.radius;\n  }\n\n  rectanglePointCollision(px, py, rect) {\n    return  this.inRange(px, rect.x, rect.x + rect.width) &&\n    this.inRange(py, rect.y, rect.y + rect.height);\n  }\n\n  uniqueID() {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n      s4() + '-' + s4() + s4() + s4();\n  }\n\n  randomColor() {\n    return \"#000000\".replace(/0/g,function(){return (~~(Math.random()*16)).toString(16);});\n  }\n}\n\nlet instance = new Utils();\n\nexport default instance;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}