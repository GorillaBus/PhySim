{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/box2dweb/box2d.js","projects/box2d-test/app.js","projects/box2d-test/lib/B2Box.js","projects/box2d-test/lib/Circle.js","projects/box2d-test/lib/Entity.js","projects/box2d-test/lib/Polygon.js","projects/box2d-test/lib/Rectangle.js","src/feature-toggle.js","src/lib/AnimationPlayer.js","src/lib/Utils.js"],"names":[],"mappingsvmVA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAAS,gBAAT,CAA0B,kBAA1B,EAA8C,YAAM;;AAElD,MAAM,QAAQ,OAAO,UAArB;AACA,MAAM,SAAS,OAAO,WAAP,GAAmB,CAAlC;AACA,MAAM,SAAS,EAAE,GAAG,QAAM,CAAX,EAAc,GAAG,SAAO,CAAxB,EAAf;AACA,MAAM,cAAc,EAAE,GAAG,IAAL,EAAW,GAAG,IAAd,EAApB;;AAEA,MAAI,SAAS,SAAS,cAAT,CAAwB,QAAxB,CAAb;AACA,MAAI,MAAM,OAAO,UAAP,CAAkB,IAAlB,CAAV;AACA,MAAI,QAAQ,EAAZ;AACA,MAAI,MAAM,EAAV,CAVkD,CAUpC;AACd,MAAI,aAAa,KAAjB;;AAEA,MAAI,MAAM,oBAAU,GAAV,EAAe,KAAf,EAAsB,KAAtB,EAA6B,MAA7B,EAAqC,KAArC,EAA4C,UAA5C,EAAwD,GAAxD,CAAV;AACA,MAAI,SAAS,8BAAoB,EAAE,KAAK,GAAP,EAApB,CAAb;;AAEA;AACA,SAAO,MAAP,GAAgB,MAAhB;AACA,SAAO,KAAP,GAAe,KAAf;;AAEA;AACA,SAAO,WAAP,CAAmB,MAAnB;AACA,SAAO,IAAP;;AAGA;AACA,MAAI,QAAQ,EAAZ;AACA,MAAI,cAAc,IAAlB;AACA,MAAI,aAAa,GAAjB;AACA,MAAI,eAAe,EAAnB;;AAEA;AACA,OAAK,IAAI,IAAE,CAAX,EAAc,IAAE,UAAhB,EAA4B,GAA5B,EAAiC;AAC/B,QAAI,OAAO;AACT,UAAI,gBAAM,aAAN,EADK;AAET,SAAG,gBAAM,WAAN,CAAkB,CAAlB,EAAqB,IAAI,KAAJ,CAAU,QAAM,CAAhB,CAArB,CAFM;AAGT,SAAG,gBAAM,WAAN,CAAkB,CAAlB,EAAqB,IAAI,KAAJ,CAAU,SAAO,CAAjB,CAArB,CAHM;AAIT,cAAQ,gBAAM,WAAN,CAAkB,GAAlB,EAAuB,CAAvB,CAJC;AAKT,aAAO,gBAAM,WAAN,EALE;AAMT,aAAO,gBAAM,WAAN,CAAkB,CAAlB,EAAqB,KAAK,EAAL,GAAQ,CAA7B;AANE,KAAX;;AASA,iBAAa,IAAb,CAAkB,IAAlB;AACD;;AAGD,OAAK,IAAI,KAAI,CAAb,EAAgB,KAAI,aAAa,MAAjC,EAAyC,IAAzC,EAA8C;AAC5C,UAAM,aAAa,EAAb,EAAgB,EAAtB,IAA4B,MAAM,aAAa,EAAb,CAAN,CAA5B;AACD;;AAED,MAAI,SAAJ,CAAc,KAAd;;AAIA;AACA,WAAS,MAAT,GAAkB;AAChB,QAAI,MAAJ;AACA,kBAAc,IAAI,QAAJ,EAAd;;AAEA,QAAI,YAAY,EAAhB;;AAEA,SAAK,IAAI,EAAT,IAAe,WAAf,EAA4B;AAC1B,UAAI,SAAS,MAAM,EAAN,CAAb;;AAEA,UAAI,UAAU,MAAM,EAAN,EAAU,IAAxB,EAA8B;AAC5B,YAAI,UAAJ,CAAe,EAAf;AACA,kBAAU,IAAV,CAAe,EAAf;AACD,OAHD,MAGO,IAAI,MAAJ,EAAY;AACjB,eAAO,MAAP,CAAc,YAAY,EAAZ,CAAd;AACD;AACF;;AAED,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,aAAO,MAAM,UAAU,CAAV,CAAN,CAAP;AACD;;AAED,QAAI,UAAJ,EAAgB;AACd,UAAI,SAAJ;AACD,KAFD,MAEO;AACL;AACD;AAEF;;AAED,WAAS,IAAT,GAAgB;AACd,QAAI,SAAJ,CAAc,CAAd,EAAgB,CAAhB,EAAmB,KAAnB,EAA0B,MAA1B;;AAEA,QAAI,WAAJ,GAAkB,GAAlB;;AAEA,SAAK,IAAI,EAAT,IAAe,KAAf,EAAsB;AACpB,UAAI,SAAS,MAAM,EAAN,CAAb;AACA,aAAO,IAAP,CAAY,GAAZ;AACD;;AAED;AACA,QAAI,SAAJ;AACA,QAAI,MAAJ,CAAW,KAAX,EAAkB,EAAlB;AACA,QAAI,MAAJ,CAAW,QAAQ,CAAnB,EAAsB,EAAtB;AACA,QAAI,SAAJ;AACA,QAAI,MAAJ;AACD;;AAED,WAAS,KAAT,CAAe,GAAf,EAAoB;AAClB,QAAI,IAAI,MAAR,EAAgB;AACd,aAAO,qBAAW,IAAI,EAAf,EAAmB,IAAI,CAAvB,EAA0B,IAAI,CAA9B,EAAiC,IAAI,KAArC,EAA4C,WAA5C,EAAyD,IAAI,KAA7D,EAAoE,IAAI,QAAxE,EAAkF,IAAI,OAAtF,EAA+F,IAAI,KAAnG,EAA0G,IAAI,MAA9G,CAAP;AACD,KAFD,MAEO,IAAI,IAAI,KAAR,EAAe;AACpB,aAAO,sBAAY,IAAI,EAAhB,EAAoB,IAAI,CAAxB,EAA2B,IAAI,CAA/B,EAAkC,IAAI,KAAtC,EAA6C,WAA7C,EAA0D,IAAI,KAA9D,EAAqE,IAAI,QAAzE,EAAmF,IAAI,KAAvF,CAAP;AACD,KAFM,MAEA;AACL,aAAO,wBAAc,IAAI,EAAlB,EAAsB,IAAI,CAA1B,EAA6B,IAAI,CAAjC,EAAoC,IAAI,KAAxC,EAA+C,WAA/C,EAA4D,IAAI,KAAhE,EAAuE,IAAI,QAA3E,EAAqF,IAAI,SAAzF,EAAoG,IAAI,UAAxG,CAAP;AACD;AACF;AAEF,CAhHD;;;;;;;;;;;ACRA;;;;;;;;AAEA,IAAM,SAAS,mBAAM,MAAN,CAAa,IAAb,CAAkB,MAAjC;AAAA,IACG,YAAY,mBAAM,QAAN,CAAe,SAD9B;AAAA,IAEG,SAAS,mBAAM,QAAN,CAAe,MAF3B;AAAA,IAGG,eAAe,mBAAM,QAAN,CAAe,YAHjC;AAAA,IAIG,YAAY,mBAAM,QAAN,CAAe,SAJ9B;AAAA,IAKG,UAAU,mBAAM,QAAN,CAAe,OAL5B;AAAA,IAMG,aAAa,mBAAM,SAAN,CAAgB,MAAhB,CAAuB,UANvC;AAAA,IAOG,iBAAiB,mBAAM,SAAN,CAAgB,MAAhB,CAAuB,cAP3C;AAAA,IAQG,gBAAgB,mBAAM,SAAN,CAAgB,MAAhB,CAAuB,aAR1C;AAAA,IASG,cAAc,mBAAM,QAAN,CAAe,WAThC;AAAA,IAUG,qBAAqB,mBAAM,QAAN,CAAe,MAAf,CAAsB,kBAV9C;;IAYqB,K;AAEnB,iBAAY,YAAZ,EAA0B,QAA1B,EAAoC,KAApC,EAA2C,MAA3C,EAAmD,KAAnD,EAA0D,SAA1D,EAAqE,GAArE,EAA0E;AAAA;;AACxE,SAAK,YAAL,GAAoB,SAAS,YAAT,CAApB;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,SAAL,GAAiB,EAAjB;;AAEA;AACA,SAAK,KAAL,GAAa,IAAI,OAAJ,CACP,IAAI,MAAJ,CAAW,CAAX,EAAc,CAAd,CADO,CACa;AADb,MAEP,IAFO,CAEc;AAFd,KAAb;;AAKA;AACA,SAAK,MAAL,GAAc,IAAI,YAAJ,EAAd;AACA,SAAK,MAAL,CAAY,OAAZ,GAAsB,CAAtB;AACA,SAAK,MAAL,CAAY,QAAZ,GAAuB,CAAvB;AACA,SAAK,MAAL,CAAY,WAAZ,GAA0B,GAA1B;;AAGA;AACA,QAAI,SAAJ,EAAe;AACb,WAAK,cAAL,CAAoB,GAApB;AACD;AACF;;;;6BAEQ;AACP,UAAI,QAAQ,KAAK,GAAL,EAAZ;AACA,UAAI,WAAY,KAAK,QAAN,GAAkB,CAAC,MAAM,KAAK,aAAZ,IAA6B,IAA/C,GAAuD,IAAI,KAAK,YAA/E;;AAGA,WAAK,IAAI,CAAT,IAAc,KAAK,SAAnB,EAA8B;AAC5B,aAAK,IAAI,CAAT,IAAc,KAAK,SAAnB,EAA8B;AAC5B,cAAI,MAAM,CAAV,EAAa;AACX;AACD;;AAED,eAAK,SAAL,CAAe,KAAK,SAAL,CAAe,CAAf,CAAf,EAAkC,KAAK,SAAL,CAAe,CAAf,CAAlC;AACD;AACF;;AAED,WAAK,KAAL,CAAW,IAAX,CACO,QADP,CACkB;AADlB,QAEO,CAFP,CAEe;AAFf,QAGO,CAHP,CAGe;AAHf;AAKC,WAAK,KAAL,CAAW,WAAX;AACA,aAAQ,KAAK,GAAL,KAAa,KAArB;AACF;;;+BAEU;AACT,UAAI,QAAQ,EAAZ;AACA,WAAK,IAAI,IAAI,KAAK,KAAL,CAAW,WAAX,EAAb,EAAuC,CAAvC,EAA0C,IAAI,EAAE,MAAhD,EAAwD;;AAEtD,YAAI,EAAE,QAAF,MAAgB,OAAO,EAAE,WAAF,EAAP,KAA2B,WAA3C,IAA0D,EAAE,WAAF,MAAmB,IAAjF,EAAuF;AACnF,gBAAM,EAAE,WAAF,EAAN,IAAyB,KAAK,WAAL,CAAiB,CAAjB,CAAzB;AACH;AACF;AACD,aAAO,KAAP;AACD;;;gCAEW,C,EAAG;AACb,aAAO;AACL,WAAG,KAAK,IAAL,CAAU,EAAE,WAAF,GAAgB,CAA1B,CADE;AAEL,WAAG,KAAK,IAAL,CAAU,EAAE,WAAF,GAAgB,CAA1B,CAFE;AAGL,WAAG,EAAE,QAAF,EAHE;AAIL,WAAG;AACD,aAAG,KAAK,IAAL,CAAU,EAAE,cAAF,GAAmB,CAA7B,CADF;AAED,aAAG,KAAK,IAAL,CAAU,EAAE,cAAF,GAAmB,CAA7B;AAFF,SAJE;AAQL,WAAG,KAAK,IAAL,CAAU,KAAK,SAAL,CAAe,CAAf,CAAV,CARE,CAQ6B;AAR7B,OAAP;AAUD;;;8BAES,C,EAAG;AACX,UAAI,IAAI,EAAE,cAAF,EAAR;AACA,aAAO,EAAE,OAAF,CAAU,QAAjB;AACD;;;8BAES,Y,EAAc;AACpB,UAAI,UAAU,IAAI,SAAJ,EAAd;;AAEA,WAAI,IAAI,EAAR,IAAc,YAAd,EAA4B;AACxB,YAAI,SAAS,aAAa,EAAb,CAAb;;AAEA,YAAI,OAAO,EAAP,IAAa,QAAjB,EAA2B;AACvB,kBAAQ,IAAR,GAAe,OAAO,aAAtB;AACH,SAFD,MAEO;AACH,kBAAQ,IAAR,GAAe,OAAO,cAAtB;AACH;;AAED,YAAI,OAAO,OAAP,KAAmB,CAAnB,IAAwB,OAAO,KAAP,KAAiB,CAA7C,EAAgD;AAC9C,kBAAQ,cAAR,CAAuB,CAAvB,GAA2B,KAAK,GAAL,CAAS,OAAO,OAAhB,IAA2B,OAAO,KAA7D;AACA,kBAAQ,cAAR,CAAuB,CAAvB,GAA2B,KAAK,GAAL,CAAS,OAAO,OAAhB,IAA2B,OAAO,KAA7D;AACD;;AAED,gBAAQ,QAAR,CAAiB,CAAjB,GAAqB,OAAO,CAA5B;AACA,gBAAQ,QAAR,CAAiB,CAAjB,GAAqB,OAAO,CAA5B;;AAEA,gBAAQ,QAAR,GAAmB,OAAO,EAA1B;AACA,gBAAQ,KAAR,GAAgB,OAAO,KAAvB;AACA,YAAI,OAAO,KAAK,YAAL,CAAkB,OAAlB,CAAX;;AAEA,YAAI,OAAO,MAAX,EAAmB;AACf,eAAK,MAAL,CAAY,KAAZ,GAAoB,IAAI,aAAJ,CAAkB,OAAO,MAAzB,CAApB;AACA,eAAK,aAAL,CAAmB,KAAK,MAAxB;AACH,SAHD,MAGO,IAAI,OAAO,KAAX,EAAkB;AACrB,eAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,KAAP,CAAa,MAAjC,EAAyC,GAAzC,EAA8C;AAC1C,gBAAI,SAAS,OAAO,KAAP,CAAa,CAAb,CAAb;AACA,gBAAI,OAAO,EAAX;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,kBAAI,MAAM,IAAI,MAAJ,EAAV;AACA,kBAAI,GAAJ,CAAQ,OAAO,CAAP,EAAU,CAAlB,EAAqB,OAAO,CAAP,EAAU,CAA/B;AACA,mBAAK,CAAL,IAAU,GAAV;AACH;AACD,iBAAK,MAAL,CAAY,KAAZ,GAAoB,IAAI,cAAJ,EAApB;AACA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,UAAlB,CAA6B,IAA7B,EAAmC,KAAK,MAAxC;AACA,iBAAK,aAAL,CAAmB,KAAK,MAAxB;AACH;AACJ,SAbM,MAaA;AACH,eAAK,MAAL,CAAY,KAAZ,GAAoB,IAAI,cAAJ,EAApB;AACA,eAAK,MAAL,CAAY,KAAZ,CAAkB,QAAlB,CAA2B,OAAO,SAAlC,EAA6C,OAAO,UAApD;AACA,eAAK,aAAL,CAAmB,KAAK,MAAxB;AACH;AACJ;AACD,WAAK,KAAL,GAAa,IAAb;AACH;;;iCAEY,O,EAAS;AAClB,UAAI,OAAO,KAAK,KAAL,CAAW,UAAX,CAAsB,OAAtB,CAAX;AACA,WAAK,SAAL,CAAe,KAAK,WAAL,EAAf,IAAqC,IAArC;AACA,aAAO,IAAP;AACH;;;+BAEU,E,EAAI;AACb,WAAK,KAAL,CAAW,WAAX,CAAuB,KAAK,SAAL,CAAe,EAAf,CAAvB;AACD;;;gCAEW;AACV,WAAK,KAAL,CAAW,aAAX;AACD;;;mCAEc,G,EAAK,K,EAAO;AACzB,cAAQ,SAAS,GAAjB;;AAEA,UAAI,YAAY,IAAI,WAAJ,EAAhB;AACA,gBAAU,SAAV,CAAoB,GAApB;AACA,gBAAU,YAAV,CAAuB,KAAK,KAA5B;AACA,gBAAU,YAAV,CAAuB,KAAvB;AACA,gBAAU,gBAAV,CAA2B,GAA3B;AACA,gBAAU,QAAV,CAAmB,YAAY,UAAZ,GAAyB,YAAY,UAAxD;AACA,WAAK,KAAL,CAAW,YAAX,CAAwB,SAAxB;AACD;;;yBAEI,C,EAAG;AACN,aAAO,IAAI,KAAK,KAAhB;AACD;;;0BAEK,C,EAAG;AACP,aAAO,IAAI,KAAK,KAAhB;AACD;;;8BAES,C,EAAG,C,EAAG,a,EAAe;AAC7B,sBAAgB,GAAhB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAI,YAAY,KAAK,SAAL,CAAe,CAAf,IAAoB,KAAK,SAAL,CAAe,CAAf,CAApC;AACA,UAAI,aAAa,EAAE,MAAF,GAAW,EAAE,MAA9B;;AAEA,UAAI,OAAO,EAAE,cAAF,EAAX;AACA,UAAI,OAAO,EAAE,cAAF,EAAX;;AAEA,UAAI,QAAQ,KAAK,IAAL,EAAZ;AACA,YAAM,QAAN,CAAe,IAAf;;AAEA,UAAI,WAAW,MAAM,MAAN,EAAf;AACA,UAAI,cAAc,WAAW,SAA7B;;AAGA,YAAM,SAAN;AACA,UAAI,WAAW,gBAAgB,UAAhB,IAA8B,WAAW,QAAzC,CAAf;;AAEA,YAAM,QAAN,CAAe,QAAf;;AAEA,QAAE,UAAF,CAAa,KAAb,EAAoB,IAApB;AAED;;;;;;kBAzMkB,K;;;;;;;;;;;;;ACdrB;;;;;;;;;;;;IAEqB,M;;;AAEnB,kBAAY,EAAZ,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,MAA7B,EAAqC,KAArC,EAA4C,QAA5C,EAAsD,OAAtD,EAA+D,KAA/D,EAAsE,MAAtE,EAA8E;AAAA;;AAC5E,YAAQ,SAAS,MAAjB;;AAD4E,gHAEtE,EAFsE,EAElE,CAFkE,EAE/D,CAF+D,EAE5D,KAF4D,EAErD,MAFqD,EAE7C,KAF6C,EAEtC,QAFsC,EAE5B,OAF4B,EAEnB,KAFmB;;AAG5E,UAAK,MAAL,GAAc,MAAd;AAH4E;AAI7E;;;;2BAEM,K,EAAO;AACZ,6GAAa,KAAb;;AAEA,WAAK,MAAL,GAAc,MAAM,CAApB;AACD;;AAED;;;;yBACK,G,EAAK;AACR,UAAI,IAAJ;AACA,UAAI,SAAJ,CAAc,KAAK,CAAnB,EAAsB,KAAK,CAA3B;AACA,UAAI,MAAJ,CAAW,KAAK,KAAhB;AACA,UAAI,SAAJ,CAAc,CAAE,KAAK,CAArB,EAAyB,CAAE,KAAK,CAAhC;;AAEA,UAAI,SAAJ,GAAgB,KAAK,QAAL,EAAhB;AACA,UAAI,WAAJ,GAAkB,OAAlB;;AAEA,UAAI,SAAJ;AACA,UAAI,GAAJ,CAAQ,KAAK,CAAb,EAAgB,KAAK,CAArB,EAAwB,KAAK,MAA7B,EAAqC,CAArC,EAAwC,KAAK,EAAL,GAAU,CAAlD,EAAqD,IAArD;AACA,UAAI,MAAJ,CAAW,KAAK,CAAhB,EAAmB,KAAK,CAAxB;AACA,UAAI,MAAJ,CAAY,KAAK,CAAjB,EAAsB,KAAK,CAAL,GAAS,KAAK,MAApC;AACA,UAAI,SAAJ;AACA,UAAI,IAAJ;AACA,UAAI,MAAJ;;AAEA,UAAI,OAAJ;AACD;;;;;;kBAjCkB,M;;;;;;;;;;;;;ICFA,M;AAEnB,kBAAY,EAAZ,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,MAA7B,EAAqC,KAArC,EAA4C,QAA5C,EAAsD,OAAtD,EAA+D,KAA/D,EAAsE;AAAA;;AACpE,SAAK,EAAL,GAAU,EAAV;AACA,SAAK,CAAL,GAAS,CAAT;AACA,SAAK,CAAL,GAAS,CAAT;AACA,SAAK,KAAL,GAAa,SAAS,CAAtB;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,KAAL,GAAa,SAAS,KAAtB;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,IAAL,GAAY,KAAZ;AACA,SAAK,OAAL,GAAe,WAAW,CAA1B;AACA,SAAK,KAAL,GAAa,SAAS,CAAtB;AACD;;;;wBAEG,O,EAAS,M,EAAQ;AACnB,WAAK,KAAL,GAAa,IAAb;AACA,UAAI,KAAK,QAAT,EAAmB;AACjB,aAAK,QAAL,IAAiB,OAAjB;AACA,YAAI,KAAK,QAAL,IAAiB,CAArB,EAAwB;AACtB,eAAK,IAAL,GAAY,IAAZ;AACD;AACF;;AAED;AACD;;;+BAEU;AACT,UAAI,KAAK,KAAT,EAAgB;AACd,eAAO,OAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAK,KAAZ;AACD;AACF;;;2BAEM,K,EAAO;AACZ,WAAK,CAAL,GAAS,MAAM,CAAf;AACA,WAAK,CAAL,GAAS,MAAM,CAAf;AACA,WAAK,MAAL,GAAc,MAAM,CAApB;AACA,WAAK,KAAL,GAAa,MAAM,CAAnB;AACD;;;yBAEI,G,EAAK;AACR,UAAI,SAAJ,GAAgB,OAAhB;AACA,UAAI,SAAJ;AACA,UAAI,GAAJ,CAAQ,KAAK,CAAb,EAAgB,KAAK,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,KAAK,EAAL,GAAU,CAAxC,EAA2C,IAA3C;AACA,UAAI,SAAJ;AACA,UAAI,IAAJ;;AAEA,UAAI,SAAJ,GAAgB,QAAhB;AACA,UAAI,SAAJ;AACA,UAAI,GAAJ,CAAQ,KAAK,MAAL,CAAY,CAApB,EAAuB,KAAK,MAAL,CAAY,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,KAAK,EAAL,GAAU,CAAtD,EAAyD,IAAzD;AACA,UAAI,SAAJ;AACA,UAAI,IAAJ;;AAEA;AACA,WAAK,KAAL,GAAa,KAAb;AACD;;;;;;kBA1DkB,M;;;;;;;;;;;ACArB;;;;;;;;;;;;IAEqB,O;;;AAEnB,mBAAY,EAAZ,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,MAA7B,EAAqC,KAArC,EAA4C,QAA5C,EAAsD,KAAtD,EAA6D;AAAA;;AAAA,kHACrD,EADqD,EACjD,CADiD,EAC9C,CAD8C,EAC3C,KAD2C,EACpC,MADoC,EAC5B,KAD4B,EACrB,QADqB;;AAE3D,UAAK,KAAL,GAAa,KAAb;AAF2D;AAG5D;;;;yBAEI,G,EAAK,K,EAAO;AACf,cAAQ,SAAS,EAAjB;;AAEA,UAAI,IAAJ;AACA,UAAI,SAAJ,CAAc,KAAK,CAAL,GAAS,KAAvB,EAA8B,KAAK,CAAL,GAAS,KAAvC;AACA,UAAI,MAAJ,CAAW,KAAK,KAAhB;AACA,UAAI,SAAJ,CAAc,CAAE,KAAK,CAAP,GAAY,KAA1B,EAAiC,CAAE,KAAK,CAAP,GAAY,KAA7C;AACA,UAAI,SAAJ,GAAgB,KAAK,QAAL,EAAhB;;AAEA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,KAAL,CAAW,MAA/B,EAAuC,GAAvC,EAA4C;AAC1C,YAAI,SAAS,KAAK,KAAL,CAAW,CAAX,CAAb;AACA,YAAI,SAAJ;AACA,YAAI,MAAJ,CAAW,CAAC,KAAK,CAAL,GAAS,OAAO,CAAP,EAAU,CAApB,IAAyB,KAApC,EAA2C,CAAC,KAAK,CAAL,GAAS,OAAO,CAAP,EAAU,CAApB,IAAyB,KAApE;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACrC,cAAI,MAAJ,CAAW,CAAC,OAAO,CAAP,EAAU,CAAV,GAAc,KAAK,CAApB,IAAyB,KAApC,EAA2C,CAAC,OAAO,CAAP,EAAU,CAAV,GAAc,KAAK,CAApB,IAAyB,KAApE;AACF;AACD,YAAI,MAAJ,CAAW,CAAC,KAAK,CAAL,GAAS,OAAO,CAAP,EAAU,CAApB,IAAyB,KAApC,EAA2C,CAAC,KAAK,CAAL,GAAS,OAAO,CAAP,EAAU,CAApB,IAAyB,KAApE;AACA,YAAI,SAAJ;AACA,YAAI,IAAJ;AACA,YAAI,MAAJ;AACD;;AAED,UAAI,OAAJ;AACD;;;;;;kBA9BkB,O;;;;;;;;;;;ACFrB;;;;;;;;;;;;IAEqB,S;;;AAEnB,qBAAY,EAAZ,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAtB,EAA6B,MAA7B,EAAqC,KAArC,EAA4C,QAA5C,EAAsD,SAAtD,EAAiE,UAAjE,EAA6E;AAAA;;AAAA,sHACrE,EADqE,EACjE,CADiE,EAC9D,CAD8D,EAC3D,KAD2D,EACpD,MADoD,EAC5C,KAD4C,EACrC,QADqC;;AAE3E,UAAK,SAAL,GAAiB,SAAjB;AACA,UAAK,UAAL,GAAkB,UAAlB;AAH2E;AAI5E;;;;yBAEI,G,EAAK,K,EAAO;AACf,cAAQ,SAAS,EAAjB;;AAEA,UAAI,IAAJ;AACA,UAAI,SAAJ,CAAc,KAAK,CAAL,GAAS,KAAvB,EAA8B,KAAK,CAAL,GAAS,KAAvC;AACA,UAAI,MAAJ,CAAW,KAAK,KAAhB;AACA,UAAI,SAAJ,CAAc,CAAE,KAAK,CAAP,GAAY,KAA1B,EAAiC,CAAE,KAAK,CAAP,GAAY,KAA7C;AACA,UAAI,SAAJ,GAAgB,KAAK,QAAL,EAAhB;AACA,UAAI,QAAJ,CAAa,CAAC,KAAK,CAAL,GAAO,KAAK,SAAb,IAA0B,KAAvC,EACa,CAAC,KAAK,CAAL,GAAO,KAAK,UAAb,IAA2B,KADxC,EAEc,KAAK,SAAL,GAAe,CAAhB,GAAqB,KAFlC,EAGc,KAAK,UAAL,GAAgB,CAAjB,GAAsB,KAHnC;AAIA,UAAI,OAAJ;AACD;;;;;;kBArBkB,S;;;;;;;;ACFrB;;;;;;;;AAQC,IAAM,iBAAiB;AACrB,eAAa,IADQ,CACY;AADZ,CAAvB;;kBAIe,c;;;;;;;;;;;ACZhB;;;;;;;;IAEqB,e;AAEnB,2BAAY,QAAZ,EAAsB;AAAA;;AACpB,eAAW,YAAY,EAAvB;;AAEA,SAAK,MAAL,GAAc,SAAS,aAAT,IAA0B,MAAxC;AACA,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,OAAL,GAAe,KAAf;;AAEA;AACA,QAAI,wBAAe,WAAnB,EAAgC;AAC9B,WAAK,GAAL,GAAW,SAAS,GAAT,IAAgB,EAA3B;AACA,WAAK,GAAL;AACA,WAAK,QAAL,GAAgB,KAAK,GAAL,EAAhB;AACA,WAAK,QAAL,GAAgB,OAAK,KAAK,GAA1B;AACA,WAAK,KAAL;AACD;;AAED,SAAK,cAAL;AACD;;;;qCAEgB;AAAA;;AACf;AACA,eAAS,IAAT,CAAc,gBAAd,CAA+B,SAA/B,EAA0C,UAAC,CAAD,EAAO;AAC/C;AACA,gBAAQ,EAAE,OAAV;AACE,eAAK,EAAL;AAAgC;AAChC,gBAAI,MAAK,OAAT,EAAkB;AAChB,oBAAK,IAAL;AACA,sBAAQ,GAAR,CAAY,iBAAZ;AACD,aAHD,MAGO;AACL,oBAAK,IAAL;AACA,sBAAQ,GAAR,CAAY,iBAAZ;AACD;AACD;;AAEA,eAAK,EAAL;AACA,kBAAK,IAAL;AACA,kBAAK,IAAL;AACA,kBAAK,IAAL;AACA,oBAAQ,GAAR,CAAY,gBAAZ;AACA;;AAEA;AACA;AAnBF;AAqBD,OAvBD;AAwBD;;;2BAEM;AACL,WAAK,OAAL,GAAe,IAAf;AACA,WAAK,QAAL;AACD;;;2BAEM;AACL,UAAI,CAAC,KAAK,OAAV,EAAmB;AACjB,eAAO,KAAP;AACD;AACD,WAAK,MAAL,CAAY,oBAAZ,CAAiC,KAAK,SAAtC;AACA,WAAK,OAAL,GAAe,KAAf;AACA,WAAK,SAAL,GAAiB,IAAjB;AACD;;;gCAEW,Q,EAAU;AAAA;;AACpB,WAAK,QAAL,GACE,YAAM;AACJ,eAAK,SAAL,GAAiB,OAAK,MAAL,CAAY,qBAAZ,CAAkC,OAAK,QAAvC,CAAjB;;AAEA;AACA,YAAI,wBAAe,WAAnB,EAAgC;AAC9B,iBAAK,GAAL,GAAW,KAAK,GAAL,EAAX;AACA,iBAAK,KAAL,GAAa,OAAK,GAAL,GAAW,OAAK,QAA7B;;AAEA,cAAI,OAAK,KAAL,GAAa,OAAK,QAAtB,EAAgC;AAC9B,mBAAK,QAAL,GAAgB,OAAK,GAAL,GAAY,OAAK,KAAL,GAAa,OAAK,QAA9C;AACA;AACD;AACD;AACD;;AAED;AAED,OAlBH;AAmBC;;;+BAEU;AACT,cAAQ,IAAR,CAAa,0CAAb;AACD;;;;;;kBAvFgB,e;;;;;;;;;;;ACFrB;;;;;;;;IAEM,K;AAEJ,mBAAc;AAAA;;AACZ,SAAK,KAAL,GAAa,EAAb;AACD;;;;+BAEU,M,EAAQ,G,EAAK,K,EAAO;AAC7B,UAAI,CAAC,KAAK,KAAL,CAAW,cAAX,CAA0B,MAA1B,CAAL,EAAwC;AACtC,aAAK,KAAL,CAAW,MAAX,IAAqB,EAArB;AACD;AACD,WAAK,KAAL,CAAW,MAAX,EAAmB,GAAnB,IAA0B,KAA1B;AACD;;;kCAEa,M,EAAQ,G,EAAK;AACzB,UAAI,UAAU,KAAK,KAAL,CAAW,MAAX,KAAsB,EAApC;AACA,UAAI,QAAQ,QAAQ,GAAR,KAAgB,KAA5B;AACA,aAAO,KAAP;AACD;;AAED;;;;;;oCAGgB,C,EAAG,C,EAAG,M,EAAQ;AAC5B,UAAI,KAAK,CAAT;AACA,eAAS,UAAU,EAAE,MAAZ,IAAsB,CAA/B;;AAEA,UAAI,QAAQ,CAAC,CAAb;AACA,UAAI,YAAa,KAAK,EAAL,GAAU,CAAX,GAAgB,CAAhC;AACA,UAAI,SAAS,EAAb;;AAEA,WAAK,IAAI,IAAE,CAAX,EAAc,IAAE,CAAhB,EAAmB,GAAnB,EAAwB;AACtB,YAAI,QAAQ,KAAK,aAAL,CAAmB,iBAAnB,EAAsC,KAAtC,CAAZ;AACA,YAAI,MAAM,MAAM,GAAN,IAAa,KAAK,GAAL,CAAS,KAAT,CAAvB;AACA,YAAI,MAAM,MAAM,GAAN,IAAa,KAAK,GAAL,CAAS,KAAT,CAAvB;AACA,YAAI,KAAK;AACP,aAAG,EAAE,CAAF,GAAO,MAAM,EAAE,MADX;AAEP,aAAG,EAAE,CAAF,GAAO,MAAM,EAAE;AAFX,SAAT;AAIA,eAAO,IAAP,CAAY,EAAZ;AACA,YAAI,CAAC,KAAL,EAAY;AACV,eAAK,UAAL,CAAgB,iBAAhB,EAAmC,KAAnC,EAA0C,EAAC,KAAK,GAAN,EAAW,KAAK,GAAhB,EAA1C;AACD;AACD,iBAAS,SAAT;AACD;;AAED;AACA,aAAO,MAAP;AACD;;;iCAEY;AACX,aAAM,IAAN,EAAY;AACV,YAAI,KAAK,KAAK,MAAL,EAAT;AACA,YAAI,IAAI,EAAR;AACA,YAAI,KAAK,KAAK,MAAL,EAAT;AACA,YAAI,KAAK,CAAT,EAAY;AACV,iBAAO,EAAP;AACD;AACF;AACF;;;yBAEI,I,EAAM,G,EAAK,G,EAAK;AACnB,aAAO,CAAC,MAAM,GAAP,IAAc,IAAd,GAAqB,GAA5B;AACD;;;oCAEe,E,EAAI,E,EAAI,E,EAAI,C,EAAG,M,EAAQ;AACrC,eAAS,UAAU,EAAnB;AACA,aAAO,CAAP,GAAW,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,CAAhB,IAAqB,GAAG,CAAxB,GAA4B,CAAC,IAAI,CAAL,IAAU,CAAV,GAAc,CAAd,GAAkB,GAAG,CAAjD,GAAqD,IAAI,CAAJ,GAAQ,GAAG,CAA3E;AACA,aAAO,CAAP,GAAW,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,CAAhB,IAAqB,GAAG,CAAxB,GAA4B,CAAC,IAAI,CAAL,IAAU,CAAV,GAAc,CAAd,GAAkB,GAAG,CAAjD,GAAqD,IAAI,CAAJ,GAAQ,GAAG,CAA3E;AACA,aAAO,MAAP;AACD;;;gCAEW,E,EAAI,E,EAAI,E,EAAI,E,EAAI,C,EAAG,M,EAAQ;AACrC,eAAS,UAAU,EAAnB;AACA,aAAO,CAAP,GAAW,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,CAAhB,IAAqB,GAAG,CAAxB,GAA4B,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,CAAhB,IAAqB,CAArB,GAAyB,CAAzB,GAA6B,GAAG,CAA5D,GAAgE,CAAC,IAAI,CAAL,IAAU,CAAV,GAAc,CAAd,GAAkB,CAAlB,GAAsB,GAAG,CAAzF,GAA6F,IAAI,CAAJ,GAAQ,CAAR,GAAY,GAAG,CAAvH;AACA,aAAO,CAAP,GAAW,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,CAAhB,IAAqB,GAAG,CAAxB,GAA4B,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,CAAhB,IAAqB,CAArB,GAAyB,CAAzB,GAA6B,GAAG,CAA5D,GAAgE,CAAC,IAAI,CAAL,IAAU,CAAV,GAAc,CAAd,GAAkB,CAAlB,GAAsB,GAAG,CAAzF,GAA6F,IAAI,CAAJ,GAAQ,CAAR,GAAY,GAAG,CAAvH;AACA,aAAO,MAAP;AACD;;;6BAEQ,E,EAAI,E,EAAI;AACf,UAAI,KAAK,GAAG,CAAH,GAAO,GAAG,CAAnB;AACA,UAAI,KAAK,GAAG,CAAH,GAAO,GAAG,CAAnB;AACA,aAAO,KAAK,IAAL,CAAU,KAAK,EAAL,GAAU,KAAK,EAAzB,CAAP;AACD;;;+BAEU,E,EAAI,E,EAAI,E,EAAI,E,EAAI;AACzB,UAAI,KAAK,KAAK,EAAd;AACA,UAAI,KAAK,KAAK,EAAd;AACA,aAAO,KAAK,IAAL,CAAU,KAAK,EAAL,GAAU,KAAK,EAAzB,CAAP;AACD;;AAED;;;;6BACS,K,EAAO,I,EAAM,K,EAAO,I,EAAM,K,EAAO;AACxC,aAAO,SAAS,OAAO,CAAC,QAAQ,IAAT,KAAkB,QAAQ,IAA1B,KAAmC,QAAQ,IAA3C,CAAvB;AACA,UAAI,SAAS,OAAO,CAAC,QAAQ,IAAT,KAAkB,QAAQ,IAA1B,KAAmC,QAAQ,IAA3C,CAApB;AACA,UAAI,SAAS,SAAS,IAAT,EAAe,EAAf,CAAT,IAA+B,UAAU,SAAS,KAAT,EAAgB,EAAhB,CAA7C,EAAkE;AAChE,iBAAS,SAAS,MAAT,CAAT;AACD;AACD,aAAO,MAAP;AACD;;;4BAEO,K,EAAO,G,EAAK,G,EAAK;AACvB,aAAO,SAAS,KAAK,GAAL,CAAS,GAAT,EAAc,GAAd,CAAT,IAA+B,SAAS,KAAK,GAAL,CAAS,GAAT,EAAc,GAAd,CAA/C;AACD;;;mCAEc,I,EAAM,I,EAAM,I,EAAM,I,EAAM;AACrC,aAAQ,KAAK,GAAL,CAAS,IAAT,EAAe,IAAf,KAAwB,KAAK,GAAL,CAAS,IAAT,EAAe,IAAf,CAAxB,IACR,KAAK,GAAL,CAAS,IAAT,EAAe,IAAf,KAAwB,KAAK,GAAL,CAAS,IAAT,EAAe,IAAf,CADxB;AAED;;;gCAEW,G,EAAK,G,EAAK;AACpB,aAAO,MAAM,KAAK,MAAL,MAAiB,MAAM,GAAvB,CAAb;AACD;;;oCAEe,E,EAAI,E,EAAI;AACtB,aAAO,KAAK,QAAL,CAAc,EAAd,EAAkB,EAAlB,KAAyB,GAAG,MAAH,GAAY,GAAG,MAA/C;AACD;;;uCAEkB,E,EAAI,E,EAAI;AACzB,aAAQ,KAAK,cAAL,CAAoB,GAAG,CAAvB,EAA0B,GAAG,CAAH,GAAO,GAAG,KAApC,EAA2C,GAAG,CAA9C,EAAiD,GAAG,CAAH,GAAO,GAAG,KAA3D,KACR,KAAK,cAAL,CAAoB,GAAG,CAAvB,EAA0B,GAAG,CAAH,GAAO,GAAG,MAApC,EAA4C,GAAG,CAA/C,EAAkD,GAAG,CAAH,GAAO,GAAG,MAA5D,CADA;AAED;;;yCAEoB,E,EAAI,E,EAAI,M,EAAQ;AACnC,aAAO,KAAK,UAAL,CAAgB,EAAhB,EAAoB,EAApB,EAAwB,OAAO,CAA/B,EAAkC,OAAO,CAAzC,IAA8C,OAAO,MAA5D;AACD;;;4CAEuB,E,EAAI,E,EAAI,I,EAAM;AACpC,aAAQ,KAAK,OAAL,CAAa,EAAb,EAAiB,KAAK,CAAtB,EAAyB,KAAK,CAAL,GAAS,KAAK,KAAvC,KACR,KAAK,OAAL,CAAa,EAAb,EAAiB,KAAK,CAAtB,EAAyB,KAAK,CAAL,GAAS,KAAK,MAAvC,CADA;AAED;;;oCAEe;AACd,eAAS,EAAT,GAAc;AACZ,eAAO,KAAK,KAAL,CAAW,CAAC,IAAI,KAAK,MAAL,EAAL,IAAsB,OAAjC,EACJ,QADI,CACK,EADL,EAEJ,SAFI,CAEM,CAFN,CAAP;AAGD;AACD,aAAO,OAAO,IAAP,GAAc,GAAd,GAAoB,IAApB,GAA2B,GAA3B,GAAiC,IAAjC,GAAwC,GAAxC,GACL,IADK,GACE,GADF,GACQ,IADR,GACe,IADf,GACsB,IAD7B;AAED;;;kCAEa;AACZ,aAAO,UAAU,OAAV,CAAkB,IAAlB,EAAuB,YAAU;AAAC,eAAO,CAAC,CAAC,EAAE,KAAK,MAAL,KAAc,EAAhB,CAAF,EAAuB,QAAvB,CAAgC,EAAhC,CAAP;AAA4C,OAA9E,CAAP;AACD;;;;;;AAGH,IAAI,WAAW,IAAI,KAAJ,EAAf;;kBAEe,Q","file":"app.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n* Copyright (c) 2006-2007 Erin Catto http://www.gphysics.com\n*\n* This software is provided 'as-is', without any express or implied\n* warranty.  In no event will the authors be held liable for any damages\n* arising from the use of this software.\n* Permission is granted to anyone to use this software for any purpose,\n* including commercial applications, and to alter it and redistribute it\n* freely, subject to the following restrictions:\n* 1. The origin of this software must not be misrepresented; you must not\n* claim that you wrote the original software. If you use this software\n* in a product, an acknowledgment in the product documentation would be\n* appreciated but is not required.\n* 2. Altered source versions must be plainly marked as such, and must not be\n* misrepresented as being the original software.\n* 3. This notice may not be removed or altered from any source distribution.\n*/\n\"use strict\"\n\nvar Box2D = {};\n\n(function (a2j, undefined) {\n   \n   function emptyFn() {};\n   a2j.inherit = function(cls, base) {\n      var tmpCtr = cls;\n      emptyFn.prototype = base.prototype;\n      cls.prototype = new emptyFn;\n      cls.prototype.constructor = tmpCtr;\n   };\n   \n   a2j.generateCallback = function generateCallback(context, cb) {\n      return function () {\n         cb.apply(context, arguments);\n      };\n   };\n   \n   a2j.NVector = function NVector(length) {\n      if (length === undefined) length = 0;\n      var tmp = new Array(length || 0);\n      for (var i = 0; i < length; ++i)\n      tmp[i] = 0;\n      return tmp;\n   };\n   \n   a2j.is = function is(o1, o2) {\n      if (o1 === null) return false;\n      if ((o2 instanceof Function) && (o1 instanceof o2)) return true;\n      if ((o1.constructor.__implements != undefined) && (o1.constructor.__implements[o2])) return true;\n      return false;\n   };\n   \n   a2j.parseUInt = function(v) {\n      return Math.abs(parseInt(v));\n   }\n   \n})(Box2D);\n\n//#TODO remove assignments from global namespace\nvar Vector = Array;\nvar Vector_a2j_Number = Box2D.NVector;\n//package structure\nif (typeof(Box2D) === \"undefined\") Box2D = {};\nif (typeof(Box2D.Collision) === \"undefined\") Box2D.Collision = {};\nif (typeof(Box2D.Collision.Shapes) === \"undefined\") Box2D.Collision.Shapes = {};\nif (typeof(Box2D.Common) === \"undefined\") Box2D.Common = {};\nif (typeof(Box2D.Common.Math) === \"undefined\") Box2D.Common.Math = {};\nif (typeof(Box2D.Dynamics) === \"undefined\") Box2D.Dynamics = {};\nif (typeof(Box2D.Dynamics.Contacts) === \"undefined\") Box2D.Dynamics.Contacts = {};\nif (typeof(Box2D.Dynamics.Controllers) === \"undefined\") Box2D.Dynamics.Controllers = {};\nif (typeof(Box2D.Dynamics.Joints) === \"undefined\") Box2D.Dynamics.Joints = {};\n//pre-definitions\n(function () {\n   Box2D.Collision.IBroadPhase = 'Box2D.Collision.IBroadPhase';\n\n   function b2AABB() {\n      b2AABB.b2AABB.apply(this, arguments);\n   };\n   Box2D.Collision.b2AABB = b2AABB;\n\n   function b2Bound() {\n      b2Bound.b2Bound.apply(this, arguments);\n   };\n   Box2D.Collision.b2Bound = b2Bound;\n\n   function b2BoundValues() {\n      b2BoundValues.b2BoundValues.apply(this, arguments);\n      if (this.constructor === b2BoundValues) this.b2BoundValues.apply(this, arguments);\n   };\n   Box2D.Collision.b2BoundValues = b2BoundValues;\n\n   function b2Collision() {\n      b2Collision.b2Collision.apply(this, arguments);\n   };\n   Box2D.Collision.b2Collision = b2Collision;\n\n   function b2ContactID() {\n      b2ContactID.b2ContactID.apply(this, arguments);\n      if (this.constructor === b2ContactID) this.b2ContactID.apply(this, arguments);\n   };\n   Box2D.Collision.b2ContactID = b2ContactID;\n\n   function b2ContactPoint() {\n      b2ContactPoint.b2ContactPoint.apply(this, arguments);\n   };\n   Box2D.Collision.b2ContactPoint = b2ContactPoint;\n\n   function b2Distance() {\n      b2Distance.b2Distance.apply(this, arguments);\n   };\n   Box2D.Collision.b2Distance = b2Distance;\n\n   function b2DistanceInput() {\n      b2DistanceInput.b2DistanceInput.apply(this, arguments);\n   };\n   Box2D.Collision.b2DistanceInput = b2DistanceInput;\n\n   function b2DistanceOutput() {\n      b2DistanceOutput.b2DistanceOutput.apply(this, arguments);\n   };\n   Box2D.Collision.b2DistanceOutput = b2DistanceOutput;\n\n   function b2DistanceProxy() {\n      b2DistanceProxy.b2DistanceProxy.apply(this, arguments);\n   };\n   Box2D.Collision.b2DistanceProxy = b2DistanceProxy;\n\n   function b2DynamicTree() {\n      b2DynamicTree.b2DynamicTree.apply(this, arguments);\n      if (this.constructor === b2DynamicTree) this.b2DynamicTree.apply(this, arguments);\n   };\n   Box2D.Collision.b2DynamicTree = b2DynamicTree;\n\n   function b2DynamicTreeBroadPhase() {\n      b2DynamicTreeBroadPhase.b2DynamicTreeBroadPhase.apply(this, arguments);\n   };\n   Box2D.Collision.b2DynamicTreeBroadPhase = b2DynamicTreeBroadPhase;\n\n   function b2DynamicTreeNode() {\n      b2DynamicTreeNode.b2DynamicTreeNode.apply(this, arguments);\n   };\n   Box2D.Collision.b2DynamicTreeNode = b2DynamicTreeNode;\n\n   function b2DynamicTreePair() {\n      b2DynamicTreePair.b2DynamicTreePair.apply(this, arguments);\n   };\n   Box2D.Collision.b2DynamicTreePair = b2DynamicTreePair;\n\n   function b2Manifold() {\n      b2Manifold.b2Manifold.apply(this, arguments);\n      if (this.constructor === b2Manifold) this.b2Manifold.apply(this, arguments);\n   };\n   Box2D.Collision.b2Manifold = b2Manifold;\n\n   function b2ManifoldPoint() {\n      b2ManifoldPoint.b2ManifoldPoint.apply(this, arguments);\n      if (this.constructor === b2ManifoldPoint) this.b2ManifoldPoint.apply(this, arguments);\n   };\n   Box2D.Collision.b2ManifoldPoint = b2ManifoldPoint;\n\n   function b2Point() {\n      b2Point.b2Point.apply(this, arguments);\n   };\n   Box2D.Collision.b2Point = b2Point;\n\n   function b2RayCastInput() {\n      b2RayCastInput.b2RayCastInput.apply(this, arguments);\n      if (this.constructor === b2RayCastInput) this.b2RayCastInput.apply(this, arguments);\n   };\n   Box2D.Collision.b2RayCastInput = b2RayCastInput;\n\n   function b2RayCastOutput() {\n      b2RayCastOutput.b2RayCastOutput.apply(this, arguments);\n   };\n   Box2D.Collision.b2RayCastOutput = b2RayCastOutput;\n\n   function b2Segment() {\n      b2Segment.b2Segment.apply(this, arguments);\n   };\n   Box2D.Collision.b2Segment = b2Segment;\n\n   function b2SeparationFunction() {\n      b2SeparationFunction.b2SeparationFunction.apply(this, arguments);\n   };\n   Box2D.Collision.b2SeparationFunction = b2SeparationFunction;\n\n   function b2Simplex() {\n      b2Simplex.b2Simplex.apply(this, arguments);\n      if (this.constructor === b2Simplex) this.b2Simplex.apply(this, arguments);\n   };\n   Box2D.Collision.b2Simplex = b2Simplex;\n\n   function b2SimplexCache() {\n      b2SimplexCache.b2SimplexCache.apply(this, arguments);\n   };\n   Box2D.Collision.b2SimplexCache = b2SimplexCache;\n\n   function b2SimplexVertex() {\n      b2SimplexVertex.b2SimplexVertex.apply(this, arguments);\n   };\n   Box2D.Collision.b2SimplexVertex = b2SimplexVertex;\n\n   function b2TimeOfImpact() {\n      b2TimeOfImpact.b2TimeOfImpact.apply(this, arguments);\n   };\n   Box2D.Collision.b2TimeOfImpact = b2TimeOfImpact;\n\n   function b2TOIInput() {\n      b2TOIInput.b2TOIInput.apply(this, arguments);\n   };\n   Box2D.Collision.b2TOIInput = b2TOIInput;\n\n   function b2WorldManifold() {\n      b2WorldManifold.b2WorldManifold.apply(this, arguments);\n      if (this.constructor === b2WorldManifold) this.b2WorldManifold.apply(this, arguments);\n   };\n   Box2D.Collision.b2WorldManifold = b2WorldManifold;\n\n   function ClipVertex() {\n      ClipVertex.ClipVertex.apply(this, arguments);\n   };\n   Box2D.Collision.ClipVertex = ClipVertex;\n\n   function Features() {\n      Features.Features.apply(this, arguments);\n   };\n   Box2D.Collision.Features = Features;\n\n   function b2CircleShape() {\n      b2CircleShape.b2CircleShape.apply(this, arguments);\n      if (this.constructor === b2CircleShape) this.b2CircleShape.apply(this, arguments);\n   };\n   Box2D.Collision.Shapes.b2CircleShape = b2CircleShape;\n\n   function b2EdgeChainDef() {\n      b2EdgeChainDef.b2EdgeChainDef.apply(this, arguments);\n      if (this.constructor === b2EdgeChainDef) this.b2EdgeChainDef.apply(this, arguments);\n   };\n   Box2D.Collision.Shapes.b2EdgeChainDef = b2EdgeChainDef;\n\n   function b2EdgeShape() {\n      b2EdgeShape.b2EdgeShape.apply(this, arguments);\n      if (this.constructor === b2EdgeShape) this.b2EdgeShape.apply(this, arguments);\n   };\n   Box2D.Collision.Shapes.b2EdgeShape = b2EdgeShape;\n\n   function b2MassData() {\n      b2MassData.b2MassData.apply(this, arguments);\n   };\n   Box2D.Collision.Shapes.b2MassData = b2MassData;\n\n   function b2PolygonShape() {\n      b2PolygonShape.b2PolygonShape.apply(this, arguments);\n      if (this.constructor === b2PolygonShape) this.b2PolygonShape.apply(this, arguments);\n   };\n   Box2D.Collision.Shapes.b2PolygonShape = b2PolygonShape;\n\n   function b2Shape() {\n      b2Shape.b2Shape.apply(this, arguments);\n      if (this.constructor === b2Shape) this.b2Shape.apply(this, arguments);\n   };\n   Box2D.Collision.Shapes.b2Shape = b2Shape;\n   Box2D.Common.b2internal = 'Box2D.Common.b2internal';\n\n   function b2Color() {\n      b2Color.b2Color.apply(this, arguments);\n      if (this.constructor === b2Color) this.b2Color.apply(this, arguments);\n   };\n   Box2D.Common.b2Color = b2Color;\n\n   function b2Settings() {\n      b2Settings.b2Settings.apply(this, arguments);\n   };\n   Box2D.Common.b2Settings = b2Settings;\n\n   function b2Mat22() {\n      b2Mat22.b2Mat22.apply(this, arguments);\n      if (this.constructor === b2Mat22) this.b2Mat22.apply(this, arguments);\n   };\n   Box2D.Common.Math.b2Mat22 = b2Mat22;\n\n   function b2Mat33() {\n      b2Mat33.b2Mat33.apply(this, arguments);\n      if (this.constructor === b2Mat33) this.b2Mat33.apply(this, arguments);\n   };\n   Box2D.Common.Math.b2Mat33 = b2Mat33;\n\n   function b2Math() {\n      b2Math.b2Math.apply(this, arguments);\n   };\n   Box2D.Common.Math.b2Math = b2Math;\n\n   function b2Sweep() {\n      b2Sweep.b2Sweep.apply(this, arguments);\n   };\n   Box2D.Common.Math.b2Sweep = b2Sweep;\n\n   function b2Transform() {\n      b2Transform.b2Transform.apply(this, arguments);\n      if (this.constructor === b2Transform) this.b2Transform.apply(this, arguments);\n   };\n   Box2D.Common.Math.b2Transform = b2Transform;\n\n   function b2Vec2() {\n      b2Vec2.b2Vec2.apply(this, arguments);\n      if (this.constructor === b2Vec2) this.b2Vec2.apply(this, arguments);\n   };\n   Box2D.Common.Math.b2Vec2 = b2Vec2;\n\n   function b2Vec3() {\n      b2Vec3.b2Vec3.apply(this, arguments);\n      if (this.constructor === b2Vec3) this.b2Vec3.apply(this, arguments);\n   };\n   Box2D.Common.Math.b2Vec3 = b2Vec3;\n\n   function b2Body() {\n      b2Body.b2Body.apply(this, arguments);\n      if (this.constructor === b2Body) this.b2Body.apply(this, arguments);\n   };\n   Box2D.Dynamics.b2Body = b2Body;\n\n   function b2BodyDef() {\n      b2BodyDef.b2BodyDef.apply(this, arguments);\n      if (this.constructor === b2BodyDef) this.b2BodyDef.apply(this, arguments);\n   };\n   Box2D.Dynamics.b2BodyDef = b2BodyDef;\n\n   function b2ContactFilter() {\n      b2ContactFilter.b2ContactFilter.apply(this, arguments);\n   };\n   Box2D.Dynamics.b2ContactFilter = b2ContactFilter;\n\n   function b2ContactImpulse() {\n      b2ContactImpulse.b2ContactImpulse.apply(this, arguments);\n   };\n   Box2D.Dynamics.b2ContactImpulse = b2ContactImpulse;\n\n   function b2ContactListener() {\n      b2ContactListener.b2ContactListener.apply(this, arguments);\n   };\n   Box2D.Dynamics.b2ContactListener = b2ContactListener;\n\n   function b2ContactManager() {\n      b2ContactManager.b2ContactManager.apply(this, arguments);\n      if (this.constructor === b2ContactManager) this.b2ContactManager.apply(this, arguments);\n   };\n   Box2D.Dynamics.b2ContactManager = b2ContactManager;\n\n   function b2DebugDraw() {\n      b2DebugDraw.b2DebugDraw.apply(this, arguments);\n      if (this.constructor === b2DebugDraw) this.b2DebugDraw.apply(this, arguments);\n   };\n   Box2D.Dynamics.b2DebugDraw = b2DebugDraw;\n\n   function b2DestructionListener() {\n      b2DestructionListener.b2DestructionListener.apply(this, arguments);\n   };\n   Box2D.Dynamics.b2DestructionListener = b2DestructionListener;\n\n   function b2FilterData() {\n      b2FilterData.b2FilterData.apply(this, arguments);\n   };\n   Box2D.Dynamics.b2FilterData = b2FilterData;\n\n   function b2Fixture() {\n      b2Fixture.b2Fixture.apply(this, arguments);\n      if (this.constructor === b2Fixture) this.b2Fixture.apply(this, arguments);\n   };\n   Box2D.Dynamics.b2Fixture = b2Fixture;\n\n   function b2FixtureDef() {\n      b2FixtureDef.b2FixtureDef.apply(this, arguments);\n      if (this.constructor === b2FixtureDef) this.b2FixtureDef.apply(this, arguments);\n   };\n   Box2D.Dynamics.b2FixtureDef = b2FixtureDef;\n\n   function b2Island() {\n      b2Island.b2Island.apply(this, arguments);\n      if (this.constructor === b2Island) this.b2Island.apply(this, arguments);\n   };\n   Box2D.Dynamics.b2Island = b2Island;\n\n   function b2TimeStep() {\n      b2TimeStep.b2TimeStep.apply(this, arguments);\n   };\n   Box2D.Dynamics.b2TimeStep = b2TimeStep;\n\n   function b2World() {\n      b2World.b2World.apply(this, arguments);\n      if (this.constructor === b2World) this.b2World.apply(this, arguments);\n   };\n   Box2D.Dynamics.b2World = b2World;\n\n   function b2CircleContact() {\n      b2CircleContact.b2CircleContact.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2CircleContact = b2CircleContact;\n\n   function b2Contact() {\n      b2Contact.b2Contact.apply(this, arguments);\n      if (this.constructor === b2Contact) this.b2Contact.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2Contact = b2Contact;\n\n   function b2ContactConstraint() {\n      b2ContactConstraint.b2ContactConstraint.apply(this, arguments);\n      if (this.constructor === b2ContactConstraint) this.b2ContactConstraint.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2ContactConstraint = b2ContactConstraint;\n\n   function b2ContactConstraintPoint() {\n      b2ContactConstraintPoint.b2ContactConstraintPoint.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2ContactConstraintPoint = b2ContactConstraintPoint;\n\n   function b2ContactEdge() {\n      b2ContactEdge.b2ContactEdge.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2ContactEdge = b2ContactEdge;\n\n   function b2ContactFactory() {\n      b2ContactFactory.b2ContactFactory.apply(this, arguments);\n      if (this.constructor === b2ContactFactory) this.b2ContactFactory.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2ContactFactory = b2ContactFactory;\n\n   function b2ContactRegister() {\n      b2ContactRegister.b2ContactRegister.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2ContactRegister = b2ContactRegister;\n\n   function b2ContactResult() {\n      b2ContactResult.b2ContactResult.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2ContactResult = b2ContactResult;\n\n   function b2ContactSolver() {\n      b2ContactSolver.b2ContactSolver.apply(this, arguments);\n      if (this.constructor === b2ContactSolver) this.b2ContactSolver.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2ContactSolver = b2ContactSolver;\n\n   function b2EdgeAndCircleContact() {\n      b2EdgeAndCircleContact.b2EdgeAndCircleContact.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2EdgeAndCircleContact = b2EdgeAndCircleContact;\n\n   function b2NullContact() {\n      b2NullContact.b2NullContact.apply(this, arguments);\n      if (this.constructor === b2NullContact) this.b2NullContact.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2NullContact = b2NullContact;\n\n   function b2PolyAndCircleContact() {\n      b2PolyAndCircleContact.b2PolyAndCircleContact.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2PolyAndCircleContact = b2PolyAndCircleContact;\n\n   function b2PolyAndEdgeContact() {\n      b2PolyAndEdgeContact.b2PolyAndEdgeContact.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2PolyAndEdgeContact = b2PolyAndEdgeContact;\n\n   function b2PolygonContact() {\n      b2PolygonContact.b2PolygonContact.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2PolygonContact = b2PolygonContact;\n\n   function b2PositionSolverManifold() {\n      b2PositionSolverManifold.b2PositionSolverManifold.apply(this, arguments);\n      if (this.constructor === b2PositionSolverManifold) this.b2PositionSolverManifold.apply(this, arguments);\n   };\n   Box2D.Dynamics.Contacts.b2PositionSolverManifold = b2PositionSolverManifold;\n\n   function b2BuoyancyController() {\n      b2BuoyancyController.b2BuoyancyController.apply(this, arguments);\n   };\n   Box2D.Dynamics.Controllers.b2BuoyancyController = b2BuoyancyController;\n\n   function b2ConstantAccelController() {\n      b2ConstantAccelController.b2ConstantAccelController.apply(this, arguments);\n   };\n   Box2D.Dynamics.Controllers.b2ConstantAccelController = b2ConstantAccelController;\n\n   function b2ConstantForceController() {\n      b2ConstantForceController.b2ConstantForceController.apply(this, arguments);\n   };\n   Box2D.Dynamics.Controllers.b2ConstantForceController = b2ConstantForceController;\n\n   function b2Controller() {\n      b2Controller.b2Controller.apply(this, arguments);\n   };\n   Box2D.Dynamics.Controllers.b2Controller = b2Controller;\n\n   function b2ControllerEdge() {\n      b2ControllerEdge.b2ControllerEdge.apply(this, arguments);\n   };\n   Box2D.Dynamics.Controllers.b2ControllerEdge = b2ControllerEdge;\n\n   function b2GravityController() {\n      b2GravityController.b2GravityController.apply(this, arguments);\n   };\n   Box2D.Dynamics.Controllers.b2GravityController = b2GravityController;\n\n   function b2TensorDampingController() {\n      b2TensorDampingController.b2TensorDampingController.apply(this, arguments);\n   };\n   Box2D.Dynamics.Controllers.b2TensorDampingController = b2TensorDampingController;\n\n   function b2DistanceJoint() {\n      b2DistanceJoint.b2DistanceJoint.apply(this, arguments);\n      if (this.constructor === b2DistanceJoint) this.b2DistanceJoint.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2DistanceJoint = b2DistanceJoint;\n\n   function b2DistanceJointDef() {\n      b2DistanceJointDef.b2DistanceJointDef.apply(this, arguments);\n      if (this.constructor === b2DistanceJointDef) this.b2DistanceJointDef.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2DistanceJointDef = b2DistanceJointDef;\n\n   function b2FrictionJoint() {\n      b2FrictionJoint.b2FrictionJoint.apply(this, arguments);\n      if (this.constructor === b2FrictionJoint) this.b2FrictionJoint.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2FrictionJoint = b2FrictionJoint;\n\n   function b2FrictionJointDef() {\n      b2FrictionJointDef.b2FrictionJointDef.apply(this, arguments);\n      if (this.constructor === b2FrictionJointDef) this.b2FrictionJointDef.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2FrictionJointDef = b2FrictionJointDef;\n\n   function b2GearJoint() {\n      b2GearJoint.b2GearJoint.apply(this, arguments);\n      if (this.constructor === b2GearJoint) this.b2GearJoint.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2GearJoint = b2GearJoint;\n\n   function b2GearJointDef() {\n      b2GearJointDef.b2GearJointDef.apply(this, arguments);\n      if (this.constructor === b2GearJointDef) this.b2GearJointDef.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2GearJointDef = b2GearJointDef;\n\n   function b2Jacobian() {\n      b2Jacobian.b2Jacobian.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2Jacobian = b2Jacobian;\n\n   function b2Joint() {\n      b2Joint.b2Joint.apply(this, arguments);\n      if (this.constructor === b2Joint) this.b2Joint.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2Joint = b2Joint;\n\n   function b2JointDef() {\n      b2JointDef.b2JointDef.apply(this, arguments);\n      if (this.constructor === b2JointDef) this.b2JointDef.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2JointDef = b2JointDef;\n\n   function b2JointEdge() {\n      b2JointEdge.b2JointEdge.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2JointEdge = b2JointEdge;\n\n   function b2LineJoint() {\n      b2LineJoint.b2LineJoint.apply(this, arguments);\n      if (this.constructor === b2LineJoint) this.b2LineJoint.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2LineJoint = b2LineJoint;\n\n   function b2LineJointDef() {\n      b2LineJointDef.b2LineJointDef.apply(this, arguments);\n      if (this.constructor === b2LineJointDef) this.b2LineJointDef.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2LineJointDef = b2LineJointDef;\n\n   function b2MouseJoint() {\n      b2MouseJoint.b2MouseJoint.apply(this, arguments);\n      if (this.constructor === b2MouseJoint) this.b2MouseJoint.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2MouseJoint = b2MouseJoint;\n\n   function b2MouseJointDef() {\n      b2MouseJointDef.b2MouseJointDef.apply(this, arguments);\n      if (this.constructor === b2MouseJointDef) this.b2MouseJointDef.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2MouseJointDef = b2MouseJointDef;\n\n   function b2PrismaticJoint() {\n      b2PrismaticJoint.b2PrismaticJoint.apply(this, arguments);\n      if (this.constructor === b2PrismaticJoint) this.b2PrismaticJoint.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2PrismaticJoint = b2PrismaticJoint;\n\n   function b2PrismaticJointDef() {\n      b2PrismaticJointDef.b2PrismaticJointDef.apply(this, arguments);\n      if (this.constructor === b2PrismaticJointDef) this.b2PrismaticJointDef.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2PrismaticJointDef = b2PrismaticJointDef;\n\n   function b2PulleyJoint() {\n      b2PulleyJoint.b2PulleyJoint.apply(this, arguments);\n      if (this.constructor === b2PulleyJoint) this.b2PulleyJoint.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2PulleyJoint = b2PulleyJoint;\n\n   function b2PulleyJointDef() {\n      b2PulleyJointDef.b2PulleyJointDef.apply(this, arguments);\n      if (this.constructor === b2PulleyJointDef) this.b2PulleyJointDef.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2PulleyJointDef = b2PulleyJointDef;\n\n   function b2RevoluteJoint() {\n      b2RevoluteJoint.b2RevoluteJoint.apply(this, arguments);\n      if (this.constructor === b2RevoluteJoint) this.b2RevoluteJoint.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2RevoluteJoint = b2RevoluteJoint;\n\n   function b2RevoluteJointDef() {\n      b2RevoluteJointDef.b2RevoluteJointDef.apply(this, arguments);\n      if (this.constructor === b2RevoluteJointDef) this.b2RevoluteJointDef.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2RevoluteJointDef = b2RevoluteJointDef;\n\n   function b2WeldJoint() {\n      b2WeldJoint.b2WeldJoint.apply(this, arguments);\n      if (this.constructor === b2WeldJoint) this.b2WeldJoint.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2WeldJoint = b2WeldJoint;\n\n   function b2WeldJointDef() {\n      b2WeldJointDef.b2WeldJointDef.apply(this, arguments);\n      if (this.constructor === b2WeldJointDef) this.b2WeldJointDef.apply(this, arguments);\n   };\n   Box2D.Dynamics.Joints.b2WeldJointDef = b2WeldJointDef;\n})(); //definitions\nBox2D.postDefs = [];\n(function () {\n   var b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,\n      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,\n      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,\n      b2MassData = Box2D.Collision.Shapes.b2MassData,\n      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,\n      b2Shape = Box2D.Collision.Shapes.b2Shape,\n      b2Color = Box2D.Common.b2Color,\n      b2internal = Box2D.Common.b2internal,\n      b2Settings = Box2D.Common.b2Settings,\n      b2Mat22 = Box2D.Common.Math.b2Mat22,\n      b2Mat33 = Box2D.Common.Math.b2Mat33,\n      b2Math = Box2D.Common.Math.b2Math,\n      b2Sweep = Box2D.Common.Math.b2Sweep,\n      b2Transform = Box2D.Common.Math.b2Transform,\n      b2Vec2 = Box2D.Common.Math.b2Vec2,\n      b2Vec3 = Box2D.Common.Math.b2Vec3,\n      b2AABB = Box2D.Collision.b2AABB,\n      b2Bound = Box2D.Collision.b2Bound,\n      b2BoundValues = Box2D.Collision.b2BoundValues,\n      b2Collision = Box2D.Collision.b2Collision,\n      b2ContactID = Box2D.Collision.b2ContactID,\n      b2ContactPoint = Box2D.Collision.b2ContactPoint,\n      b2Distance = Box2D.Collision.b2Distance,\n      b2DistanceInput = Box2D.Collision.b2DistanceInput,\n      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,\n      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,\n      b2DynamicTree = Box2D.Collision.b2DynamicTree,\n      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,\n      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,\n      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,\n      b2Manifold = Box2D.Collision.b2Manifold,\n      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,\n      b2Point = Box2D.Collision.b2Point,\n      b2RayCastInput = Box2D.Collision.b2RayCastInput,\n      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,\n      b2Segment = Box2D.Collision.b2Segment,\n      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,\n      b2Simplex = Box2D.Collision.b2Simplex,\n      b2SimplexCache = Box2D.Collision.b2SimplexCache,\n      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,\n      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,\n      b2TOIInput = Box2D.Collision.b2TOIInput,\n      b2WorldManifold = Box2D.Collision.b2WorldManifold,\n      ClipVertex = Box2D.Collision.ClipVertex,\n      Features = Box2D.Collision.Features,\n      IBroadPhase = Box2D.Collision.IBroadPhase;\n\n   b2AABB.b2AABB = function () {\n      this.lowerBound = new b2Vec2();\n      this.upperBound = new b2Vec2();\n   };\n   b2AABB.prototype.IsValid = function () {\n      var dX = this.upperBound.x - this.lowerBound.x;\n      var dY = this.upperBound.y - this.lowerBound.y;\n      var valid = dX >= 0.0 && dY >= 0.0;\n      valid = valid && this.lowerBound.IsValid() && this.upperBound.IsValid();\n      return valid;\n   }\n   b2AABB.prototype.GetCenter = function () {\n      return new b2Vec2((this.lowerBound.x + this.upperBound.x) / 2, (this.lowerBound.y + this.upperBound.y) / 2);\n   }\n   b2AABB.prototype.GetExtents = function () {\n      return new b2Vec2((this.upperBound.x - this.lowerBound.x) / 2, (this.upperBound.y - this.lowerBound.y) / 2);\n   }\n   b2AABB.prototype.Contains = function (aabb) {\n      var result = true;\n      result = result && this.lowerBound.x <= aabb.lowerBound.x;\n      result = result && this.lowerBound.y <= aabb.lowerBound.y;\n      result = result && aabb.upperBound.x <= this.upperBound.x;\n      result = result && aabb.upperBound.y <= this.upperBound.y;\n      return result;\n   }\n   b2AABB.prototype.RayCast = function (output, input) {\n      var tmin = (-Number.MAX_VALUE);\n      var tmax = Number.MAX_VALUE;\n      var pX = input.p1.x;\n      var pY = input.p1.y;\n      var dX = input.p2.x - input.p1.x;\n      var dY = input.p2.y - input.p1.y;\n      var absDX = Math.abs(dX);\n      var absDY = Math.abs(dY);\n      var normal = output.normal;\n      var inv_d = 0;\n      var t1 = 0;\n      var t2 = 0;\n      var t3 = 0;\n      var s = 0; {\n         if (absDX < Number.MIN_VALUE) {\n            if (pX < this.lowerBound.x || this.upperBound.x < pX) return false;\n         }\n         else {\n            inv_d = 1.0 / dX;\n            t1 = (this.lowerBound.x - pX) * inv_d;\n            t2 = (this.upperBound.x - pX) * inv_d;\n            s = (-1.0);\n            if (t1 > t2) {\n               t3 = t1;\n               t1 = t2;\n               t2 = t3;\n               s = 1.0;\n            }\n            if (t1 > tmin) {\n               normal.x = s;\n               normal.y = 0;\n               tmin = t1;\n            }\n            tmax = Math.min(tmax, t2);\n            if (tmin > tmax) return false;\n         }\n      } {\n         if (absDY < Number.MIN_VALUE) {\n            if (pY < this.lowerBound.y || this.upperBound.y < pY) return false;\n         }\n         else {\n            inv_d = 1.0 / dY;\n            t1 = (this.lowerBound.y - pY) * inv_d;\n            t2 = (this.upperBound.y - pY) * inv_d;\n            s = (-1.0);\n            if (t1 > t2) {\n               t3 = t1;\n               t1 = t2;\n               t2 = t3;\n               s = 1.0;\n            }\n            if (t1 > tmin) {\n               normal.y = s;\n               normal.x = 0;\n               tmin = t1;\n            }\n            tmax = Math.min(tmax, t2);\n            if (tmin > tmax) return false;\n         }\n      }\n      output.fraction = tmin;\n      return true;\n   }\n   b2AABB.prototype.TestOverlap = function (other) {\n      var d1X = other.lowerBound.x - this.upperBound.x;\n      var d1Y = other.lowerBound.y - this.upperBound.y;\n      var d2X = this.lowerBound.x - other.upperBound.x;\n      var d2Y = this.lowerBound.y - other.upperBound.y;\n      if (d1X > 0.0 || d1Y > 0.0) return false;\n      if (d2X > 0.0 || d2Y > 0.0) return false;\n      return true;\n   }\n   b2AABB.Combine = function (aabb1, aabb2) {\n      var aabb = new b2AABB();\n      aabb.Combine(aabb1, aabb2);\n      return aabb;\n   }\n   b2AABB.prototype.Combine = function (aabb1, aabb2) {\n      this.lowerBound.x = Math.min(aabb1.lowerBound.x, aabb2.lowerBound.x);\n      this.lowerBound.y = Math.min(aabb1.lowerBound.y, aabb2.lowerBound.y);\n      this.upperBound.x = Math.max(aabb1.upperBound.x, aabb2.upperBound.x);\n      this.upperBound.y = Math.max(aabb1.upperBound.y, aabb2.upperBound.y);\n   }\n   b2Bound.b2Bound = function () {};\n   b2Bound.prototype.IsLower = function () {\n      return (this.value & 1) == 0;\n   }\n   b2Bound.prototype.IsUpper = function () {\n      return (this.value & 1) == 1;\n   }\n   b2Bound.prototype.Swap = function (b) {\n      var tempValue = this.value;\n      var tempProxy = this.proxy;\n      var tempStabbingCount = this.stabbingCount;\n      this.value = b.value;\n      this.proxy = b.proxy;\n      this.stabbingCount = b.stabbingCount;\n      b.value = tempValue;\n      b.proxy = tempProxy;\n      b.stabbingCount = tempStabbingCount;\n   }\n   b2BoundValues.b2BoundValues = function () {};\n   b2BoundValues.prototype.b2BoundValues = function () {\n      this.lowerValues = new Vector_a2j_Number();\n      this.lowerValues[0] = 0.0;\n      this.lowerValues[1] = 0.0;\n      this.upperValues = new Vector_a2j_Number();\n      this.upperValues[0] = 0.0;\n      this.upperValues[1] = 0.0;\n   }\n   b2Collision.b2Collision = function () {};\n   b2Collision.ClipSegmentToLine = function (vOut, vIn, normal, offset) {\n      if (offset === undefined) offset = 0;\n      var cv;\n      var numOut = 0;\n      cv = vIn[0];\n      var vIn0 = cv.v;\n      cv = vIn[1];\n      var vIn1 = cv.v;\n      var distance0 = normal.x * vIn0.x + normal.y * vIn0.y - offset;\n      var distance1 = normal.x * vIn1.x + normal.y * vIn1.y - offset;\n      if (distance0 <= 0.0) vOut[numOut++].Set(vIn[0]);\n      if (distance1 <= 0.0) vOut[numOut++].Set(vIn[1]);\n      if (distance0 * distance1 < 0.0) {\n         var interp = distance0 / (distance0 - distance1);\n         cv = vOut[numOut];\n         var tVec = cv.v;\n         tVec.x = vIn0.x + interp * (vIn1.x - vIn0.x);\n         tVec.y = vIn0.y + interp * (vIn1.y - vIn0.y);\n         cv = vOut[numOut];\n         var cv2;\n         if (distance0 > 0.0) {\n            cv2 = vIn[0];\n            cv.id = cv2.id;\n         }\n         else {\n            cv2 = vIn[1];\n            cv.id = cv2.id;\n         }++numOut;\n      }\n      return numOut;\n   }\n   b2Collision.EdgeSeparation = function (poly1, xf1, edge1, poly2, xf2) {\n      if (edge1 === undefined) edge1 = 0;\n      var count1 = parseInt(poly1.m_vertexCount);\n      var vertices1 = poly1.m_vertices;\n      var normals1 = poly1.m_normals;\n      var count2 = parseInt(poly2.m_vertexCount);\n      var vertices2 = poly2.m_vertices;\n      var tMat;\n      var tVec;\n      tMat = xf1.R;\n      tVec = normals1[edge1];\n      var normal1WorldX = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      var normal1WorldY = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      tMat = xf2.R;\n      var normal1X = (tMat.col1.x * normal1WorldX + tMat.col1.y * normal1WorldY);\n      var normal1Y = (tMat.col2.x * normal1WorldX + tMat.col2.y * normal1WorldY);\n      var index = 0;\n      var minDot = Number.MAX_VALUE;\n      for (var i = 0; i < count2; ++i) {\n         tVec = vertices2[i];\n         var dot = tVec.x * normal1X + tVec.y * normal1Y;\n         if (dot < minDot) {\n            minDot = dot;\n            index = i;\n         }\n      }\n      tVec = vertices1[edge1];\n      tMat = xf1.R;\n      var v1X = xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      var v1Y = xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      tVec = vertices2[index];\n      tMat = xf2.R;\n      var v2X = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      var v2Y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      v2X -= v1X;\n      v2Y -= v1Y;\n      var separation = v2X * normal1WorldX + v2Y * normal1WorldY;\n      return separation;\n   }\n   b2Collision.FindMaxSeparation = function (edgeIndex, poly1, xf1, poly2, xf2) {\n      var count1 = parseInt(poly1.m_vertexCount);\n      var normals1 = poly1.m_normals;\n      var tVec;\n      var tMat;\n      tMat = xf2.R;\n      tVec = poly2.m_centroid;\n      var dX = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      var dY = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      tMat = xf1.R;\n      tVec = poly1.m_centroid;\n      dX -= xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      dY -= xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      var dLocal1X = (dX * xf1.R.col1.x + dY * xf1.R.col1.y);\n      var dLocal1Y = (dX * xf1.R.col2.x + dY * xf1.R.col2.y);\n      var edge = 0;\n      var maxDot = (-Number.MAX_VALUE);\n      for (var i = 0; i < count1; ++i) {\n         tVec = normals1[i];\n         var dot = (tVec.x * dLocal1X + tVec.y * dLocal1Y);\n         if (dot > maxDot) {\n            maxDot = dot;\n            edge = i;\n         }\n      }\n      var s = b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);\n      var prevEdge = parseInt(edge - 1 >= 0 ? edge - 1 : count1 - 1);\n      var sPrev = b2Collision.EdgeSeparation(poly1, xf1, prevEdge, poly2, xf2);\n      var nextEdge = parseInt(edge + 1 < count1 ? edge + 1 : 0);\n      var sNext = b2Collision.EdgeSeparation(poly1, xf1, nextEdge, poly2, xf2);\n      var bestEdge = 0;\n      var bestSeparation = 0;\n      var increment = 0;\n      if (sPrev > s && sPrev > sNext) {\n         increment = (-1);\n         bestEdge = prevEdge;\n         bestSeparation = sPrev;\n      }\n      else if (sNext > s) {\n         increment = 1;\n         bestEdge = nextEdge;\n         bestSeparation = sNext;\n      }\n      else {\n         edgeIndex[0] = edge;\n         return s;\n      }\n      while (true) {\n         if (increment == (-1)) edge = bestEdge - 1 >= 0 ? bestEdge - 1 : count1 - 1;\n         else edge = bestEdge + 1 < count1 ? bestEdge + 1 : 0;s = b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);\n         if (s > bestSeparation) {\n            bestEdge = edge;\n            bestSeparation = s;\n         }\n         else {\n            break;\n         }\n      }\n      edgeIndex[0] = bestEdge;\n      return bestSeparation;\n   }\n   b2Collision.FindIncidentEdge = function (c, poly1, xf1, edge1, poly2, xf2) {\n      if (edge1 === undefined) edge1 = 0;\n      var count1 = parseInt(poly1.m_vertexCount);\n      var normals1 = poly1.m_normals;\n      var count2 = parseInt(poly2.m_vertexCount);\n      var vertices2 = poly2.m_vertices;\n      var normals2 = poly2.m_normals;\n      var tMat;\n      var tVec;\n      tMat = xf1.R;\n      tVec = normals1[edge1];\n      var normal1X = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      var normal1Y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      tMat = xf2.R;\n      var tX = (tMat.col1.x * normal1X + tMat.col1.y * normal1Y);\n      normal1Y = (tMat.col2.x * normal1X + tMat.col2.y * normal1Y);\n      normal1X = tX;\n      var index = 0;\n      var minDot = Number.MAX_VALUE;\n      for (var i = 0; i < count2; ++i) {\n         tVec = normals2[i];\n         var dot = (normal1X * tVec.x + normal1Y * tVec.y);\n         if (dot < minDot) {\n            minDot = dot;\n            index = i;\n         }\n      }\n      var tClip;\n      var i1 = parseInt(index);\n      var i2 = parseInt(i1 + 1 < count2 ? i1 + 1 : 0);\n      tClip = c[0];\n      tVec = vertices2[i1];\n      tMat = xf2.R;\n      tClip.v.x = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      tClip.v.y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      tClip.id.features.referenceEdge = edge1;\n      tClip.id.features.incidentEdge = i1;\n      tClip.id.features.incidentVertex = 0;\n      tClip = c[1];\n      tVec = vertices2[i2];\n      tMat = xf2.R;\n      tClip.v.x = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      tClip.v.y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      tClip.id.features.referenceEdge = edge1;\n      tClip.id.features.incidentEdge = i2;\n      tClip.id.features.incidentVertex = 1;\n   }\n   b2Collision.MakeClipPointVector = function () {\n      var r = new Vector(2);\n      r[0] = new ClipVertex();\n      r[1] = new ClipVertex();\n      return r;\n   }\n   b2Collision.CollidePolygons = function (manifold, polyA, xfA, polyB, xfB) {\n      var cv;\n      manifold.m_pointCount = 0;\n      var totalRadius = polyA.m_radius + polyB.m_radius;\n      var edgeA = 0;\n      b2Collision.s_edgeAO[0] = edgeA;\n      var separationA = b2Collision.FindMaxSeparation(b2Collision.s_edgeAO, polyA, xfA, polyB, xfB);\n      edgeA = b2Collision.s_edgeAO[0];\n      if (separationA > totalRadius) return;\n      var edgeB = 0;\n      b2Collision.s_edgeBO[0] = edgeB;\n      var separationB = b2Collision.FindMaxSeparation(b2Collision.s_edgeBO, polyB, xfB, polyA, xfA);\n      edgeB = b2Collision.s_edgeBO[0];\n      if (separationB > totalRadius) return;\n      var poly1;\n      var poly2;\n      var xf1;\n      var xf2;\n      var edge1 = 0;\n      var flip = 0;\n      var k_relativeTol = 0.98;\n      var k_absoluteTol = 0.001;\n      var tMat;\n      if (separationB > k_relativeTol * separationA + k_absoluteTol) {\n         poly1 = polyB;\n         poly2 = polyA;\n         xf1 = xfB;\n         xf2 = xfA;\n         edge1 = edgeB;\n         manifold.m_type = b2Manifold.e_faceB;\n         flip = 1;\n      }\n      else {\n         poly1 = polyA;\n         poly2 = polyB;\n         xf1 = xfA;\n         xf2 = xfB;\n         edge1 = edgeA;\n         manifold.m_type = b2Manifold.e_faceA;\n         flip = 0;\n      }\n      var incidentEdge = b2Collision.s_incidentEdge;\n      b2Collision.FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n      var count1 = parseInt(poly1.m_vertexCount);\n      var vertices1 = poly1.m_vertices;\n      var local_v11 = vertices1[edge1];\n      var local_v12;\n      if (edge1 + 1 < count1) {\n         local_v12 = vertices1[parseInt(edge1 + 1)];\n      }\n      else {\n         local_v12 = vertices1[0];\n      }\n      var localTangent = b2Collision.s_localTangent;\n      localTangent.Set(local_v12.x - local_v11.x, local_v12.y - local_v11.y);\n      localTangent.Normalize();\n      var localNormal = b2Collision.s_localNormal;\n      localNormal.x = localTangent.y;\n      localNormal.y = (-localTangent.x);\n      var planePoint = b2Collision.s_planePoint;\n      planePoint.Set(0.5 * (local_v11.x + local_v12.x), 0.5 * (local_v11.y + local_v12.y));\n      var tangent = b2Collision.s_tangent;\n      tMat = xf1.R;\n      tangent.x = (tMat.col1.x * localTangent.x + tMat.col2.x * localTangent.y);\n      tangent.y = (tMat.col1.y * localTangent.x + tMat.col2.y * localTangent.y);\n      var tangent2 = b2Collision.s_tangent2;\n      tangent2.x = (-tangent.x);\n      tangent2.y = (-tangent.y);\n      var normal = b2Collision.s_normal;\n      normal.x = tangent.y;\n      normal.y = (-tangent.x);\n      var v11 = b2Collision.s_v11;\n      var v12 = b2Collision.s_v12;\n      v11.x = xf1.position.x + (tMat.col1.x * local_v11.x + tMat.col2.x * local_v11.y);\n      v11.y = xf1.position.y + (tMat.col1.y * local_v11.x + tMat.col2.y * local_v11.y);\n      v12.x = xf1.position.x + (tMat.col1.x * local_v12.x + tMat.col2.x * local_v12.y);\n      v12.y = xf1.position.y + (tMat.col1.y * local_v12.x + tMat.col2.y * local_v12.y);\n      var frontOffset = normal.x * v11.x + normal.y * v11.y;\n      var sideOffset1 = (-tangent.x * v11.x) - tangent.y * v11.y + totalRadius;\n      var sideOffset2 = tangent.x * v12.x + tangent.y * v12.y + totalRadius;\n      var clipPoints1 = b2Collision.s_clipPoints1;\n      var clipPoints2 = b2Collision.s_clipPoints2;\n      var np = 0;\n      np = b2Collision.ClipSegmentToLine(clipPoints1, incidentEdge, tangent2, sideOffset1);\n      if (np < 2) return;\n      np = b2Collision.ClipSegmentToLine(clipPoints2, clipPoints1, tangent, sideOffset2);\n      if (np < 2) return;\n      manifold.m_localPlaneNormal.SetV(localNormal);\n      manifold.m_localPoint.SetV(planePoint);\n      var pointCount = 0;\n      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; ++i) {\n         cv = clipPoints2[i];\n         var separation = normal.x * cv.v.x + normal.y * cv.v.y - frontOffset;\n         if (separation <= totalRadius) {\n            var cp = manifold.m_points[pointCount];\n            tMat = xf2.R;\n            var tX = cv.v.x - xf2.position.x;\n            var tY = cv.v.y - xf2.position.y;\n            cp.m_localPoint.x = (tX * tMat.col1.x + tY * tMat.col1.y);\n            cp.m_localPoint.y = (tX * tMat.col2.x + tY * tMat.col2.y);\n            cp.m_id.Set(cv.id);\n            cp.m_id.features.flip = flip;\n            ++pointCount;\n         }\n      }\n      manifold.m_pointCount = pointCount;\n   }\n   b2Collision.CollideCircles = function (manifold, circle1, xf1, circle2, xf2) {\n      manifold.m_pointCount = 0;\n      var tMat;\n      var tVec;\n      tMat = xf1.R;\n      tVec = circle1.m_p;\n      var p1X = xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      var p1Y = xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      tMat = xf2.R;\n      tVec = circle2.m_p;\n      var p2X = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      var p2Y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      var dX = p2X - p1X;\n      var dY = p2Y - p1Y;\n      var distSqr = dX * dX + dY * dY;\n      var radius = circle1.m_radius + circle2.m_radius;\n      if (distSqr > radius * radius) {\n         return;\n      }\n      manifold.m_type = b2Manifold.e_circles;\n      manifold.m_localPoint.SetV(circle1.m_p);\n      manifold.m_localPlaneNormal.SetZero();\n      manifold.m_pointCount = 1;\n      manifold.m_points[0].m_localPoint.SetV(circle2.m_p);\n      manifold.m_points[0].m_id.key = 0;\n   }\n   b2Collision.CollidePolygonAndCircle = function (manifold, polygon, xf1, circle, xf2) {\n      manifold.m_pointCount = 0;\n      var tPoint;\n      var dX = 0;\n      var dY = 0;\n      var positionX = 0;\n      var positionY = 0;\n      var tVec;\n      var tMat;\n      tMat = xf2.R;\n      tVec = circle.m_p;\n      var cX = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      var cY = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      dX = cX - xf1.position.x;\n      dY = cY - xf1.position.y;\n      tMat = xf1.R;\n      var cLocalX = (dX * tMat.col1.x + dY * tMat.col1.y);\n      var cLocalY = (dX * tMat.col2.x + dY * tMat.col2.y);\n      var dist = 0;\n      var normalIndex = 0;\n      var separation = (-Number.MAX_VALUE);\n      var radius = polygon.m_radius + circle.m_radius;\n      var vertexCount = parseInt(polygon.m_vertexCount);\n      var vertices = polygon.m_vertices;\n      var normals = polygon.m_normals;\n      for (var i = 0; i < vertexCount; ++i) {\n         tVec = vertices[i];\n         dX = cLocalX - tVec.x;\n         dY = cLocalY - tVec.y;\n         tVec = normals[i];\n         var s = tVec.x * dX + tVec.y * dY;\n         if (s > radius) {\n            return;\n         }\n         if (s > separation) {\n            separation = s;\n            normalIndex = i;\n         }\n      }\n      var vertIndex1 = parseInt(normalIndex);\n      var vertIndex2 = parseInt(vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0);\n      var v1 = vertices[vertIndex1];\n      var v2 = vertices[vertIndex2];\n      if (separation < Number.MIN_VALUE) {\n         manifold.m_pointCount = 1;\n         manifold.m_type = b2Manifold.e_faceA;\n         manifold.m_localPlaneNormal.SetV(normals[normalIndex]);\n         manifold.m_localPoint.x = 0.5 * (v1.x + v2.x);\n         manifold.m_localPoint.y = 0.5 * (v1.y + v2.y);\n         manifold.m_points[0].m_localPoint.SetV(circle.m_p);\n         manifold.m_points[0].m_id.key = 0;\n         return;\n      }\n      var u1 = (cLocalX - v1.x) * (v2.x - v1.x) + (cLocalY - v1.y) * (v2.y - v1.y);\n      var u2 = (cLocalX - v2.x) * (v1.x - v2.x) + (cLocalY - v2.y) * (v1.y - v2.y);\n      if (u1 <= 0.0) {\n         if ((cLocalX - v1.x) * (cLocalX - v1.x) + (cLocalY - v1.y) * (cLocalY - v1.y) > radius * radius) return;\n         manifold.m_pointCount = 1;\n         manifold.m_type = b2Manifold.e_faceA;\n         manifold.m_localPlaneNormal.x = cLocalX - v1.x;\n         manifold.m_localPlaneNormal.y = cLocalY - v1.y;\n         manifold.m_localPlaneNormal.Normalize();\n         manifold.m_localPoint.SetV(v1);\n         manifold.m_points[0].m_localPoint.SetV(circle.m_p);\n         manifold.m_points[0].m_id.key = 0;\n      }\n      else if (u2 <= 0) {\n         if ((cLocalX - v2.x) * (cLocalX - v2.x) + (cLocalY - v2.y) * (cLocalY - v2.y) > radius * radius) return;\n         manifold.m_pointCount = 1;\n         manifold.m_type = b2Manifold.e_faceA;\n         manifold.m_localPlaneNormal.x = cLocalX - v2.x;\n         manifold.m_localPlaneNormal.y = cLocalY - v2.y;\n         manifold.m_localPlaneNormal.Normalize();\n         manifold.m_localPoint.SetV(v2);\n         manifold.m_points[0].m_localPoint.SetV(circle.m_p);\n         manifold.m_points[0].m_id.key = 0;\n      }\n      else {\n         var faceCenterX = 0.5 * (v1.x + v2.x);\n         var faceCenterY = 0.5 * (v1.y + v2.y);\n         separation = (cLocalX - faceCenterX) * normals[vertIndex1].x + (cLocalY - faceCenterY) * normals[vertIndex1].y;\n         if (separation > radius) return;\n         manifold.m_pointCount = 1;\n         manifold.m_type = b2Manifold.e_faceA;\n         manifold.m_localPlaneNormal.x = normals[vertIndex1].x;\n         manifold.m_localPlaneNormal.y = normals[vertIndex1].y;\n         manifold.m_localPlaneNormal.Normalize();\n         manifold.m_localPoint.Set(faceCenterX, faceCenterY);\n         manifold.m_points[0].m_localPoint.SetV(circle.m_p);\n         manifold.m_points[0].m_id.key = 0;\n      }\n   }\n   b2Collision.TestOverlap = function (a, b) {\n      var t1 = b.lowerBound;\n      var t2 = a.upperBound;\n      var d1X = t1.x - t2.x;\n      var d1Y = t1.y - t2.y;\n      t1 = a.lowerBound;\n      t2 = b.upperBound;\n      var d2X = t1.x - t2.x;\n      var d2Y = t1.y - t2.y;\n      if (d1X > 0.0 || d1Y > 0.0) return false;\n      if (d2X > 0.0 || d2Y > 0.0) return false;\n      return true;\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Collision.b2Collision.s_incidentEdge = b2Collision.MakeClipPointVector();\n      Box2D.Collision.b2Collision.s_clipPoints1 = b2Collision.MakeClipPointVector();\n      Box2D.Collision.b2Collision.s_clipPoints2 = b2Collision.MakeClipPointVector();\n      Box2D.Collision.b2Collision.s_edgeAO = new Vector_a2j_Number(1);\n      Box2D.Collision.b2Collision.s_edgeBO = new Vector_a2j_Number(1);\n      Box2D.Collision.b2Collision.s_localTangent = new b2Vec2();\n      Box2D.Collision.b2Collision.s_localNormal = new b2Vec2();\n      Box2D.Collision.b2Collision.s_planePoint = new b2Vec2();\n      Box2D.Collision.b2Collision.s_normal = new b2Vec2();\n      Box2D.Collision.b2Collision.s_tangent = new b2Vec2();\n      Box2D.Collision.b2Collision.s_tangent2 = new b2Vec2();\n      Box2D.Collision.b2Collision.s_v11 = new b2Vec2();\n      Box2D.Collision.b2Collision.s_v12 = new b2Vec2();\n      Box2D.Collision.b2Collision.b2CollidePolyTempVec = new b2Vec2();\n      Box2D.Collision.b2Collision.b2_nullFeature = 0x000000ff;\n   });\n   b2ContactID.b2ContactID = function () {\n      this.features = new Features();\n   };\n   b2ContactID.prototype.b2ContactID = function () {\n      this.features._m_id = this;\n   }\n   b2ContactID.prototype.Set = function (id) {\n      this.key = id._key;\n   }\n   b2ContactID.prototype.Copy = function () {\n      var id = new b2ContactID();\n      id.key = this.key;\n      return id;\n   }\n   Object.defineProperty(b2ContactID.prototype, 'key', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n         return this._key;\n      }\n   });\n   Object.defineProperty(b2ContactID.prototype, 'key', {\n      enumerable: false,\n      configurable: true,\n      set: function (value) {\n         if (value === undefined) value = 0;\n         this._key = value;\n         this.features._referenceEdge = this._key & 0x000000ff;\n         this.features._incidentEdge = ((this._key & 0x0000ff00) >> 8) & 0x000000ff;\n         this.features._incidentVertex = ((this._key & 0x00ff0000) >> 16) & 0x000000ff;\n         this.features._flip = ((this._key & 0xff000000) >> 24) & 0x000000ff;\n      }\n   });\n   b2ContactPoint.b2ContactPoint = function () {\n      this.position = new b2Vec2();\n      this.velocity = new b2Vec2();\n      this.normal = new b2Vec2();\n      this.id = new b2ContactID();\n   };\n   b2Distance.b2Distance = function () {};\n   b2Distance.Distance = function (output, cache, input) {\n      ++b2Distance.b2_gjkCalls;\n      var proxyA = input.proxyA;\n      var proxyB = input.proxyB;\n      var transformA = input.transformA;\n      var transformB = input.transformB;\n      var simplex = b2Distance.s_simplex;\n      simplex.ReadCache(cache, proxyA, transformA, proxyB, transformB);\n      var vertices = simplex.m_vertices;\n      var k_maxIters = 20;\n      var saveA = b2Distance.s_saveA;\n      var saveB = b2Distance.s_saveB;\n      var saveCount = 0;\n      var closestPoint = simplex.GetClosestPoint();\n      var distanceSqr1 = closestPoint.LengthSquared();\n      var distanceSqr2 = distanceSqr1;\n      var i = 0;\n      var p;\n      var iter = 0;\n      while (iter < k_maxIters) {\n         saveCount = simplex.m_count;\n         for (i = 0;\n         i < saveCount; i++) {\n            saveA[i] = vertices[i].indexA;\n            saveB[i] = vertices[i].indexB;\n         }\n         switch (simplex.m_count) {\n         case 1:\n            break;\n         case 2:\n            simplex.Solve2();\n            break;\n         case 3:\n            simplex.Solve3();\n            break;\n         default:\n            b2Settings.b2Assert(false);\n         }\n         if (simplex.m_count == 3) {\n            break;\n         }\n         p = simplex.GetClosestPoint();\n         distanceSqr2 = p.LengthSquared();\n         if (distanceSqr2 > distanceSqr1) {}\n         distanceSqr1 = distanceSqr2;\n         var d = simplex.GetSearchDirection();\n         if (d.LengthSquared() < Number.MIN_VALUE * Number.MIN_VALUE) {\n            break;\n         }\n         var vertex = vertices[simplex.m_count];\n         vertex.indexA = proxyA.GetSupport(b2Math.MulTMV(transformA.R, d.GetNegative()));\n         vertex.wA = b2Math.MulX(transformA, proxyA.GetVertex(vertex.indexA));\n         vertex.indexB = proxyB.GetSupport(b2Math.MulTMV(transformB.R, d));\n         vertex.wB = b2Math.MulX(transformB, proxyB.GetVertex(vertex.indexB));\n         vertex.w = b2Math.SubtractVV(vertex.wB, vertex.wA);\n         ++iter;\n         ++b2Distance.b2_gjkIters;\n         var duplicate = false;\n         for (i = 0;\n         i < saveCount; i++) {\n            if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n               duplicate = true;\n               break;\n            }\n         }\n         if (duplicate) {\n            break;\n         }++simplex.m_count;\n      }\n      b2Distance.b2_gjkMaxIters = b2Math.Max(b2Distance.b2_gjkMaxIters, iter);\n      simplex.GetWitnessPoints(output.pointA, output.pointB);\n      output.distance = b2Math.SubtractVV(output.pointA, output.pointB).Length();\n      output.iterations = iter;\n      simplex.WriteCache(cache);\n      if (input.useRadii) {\n         var rA = proxyA.m_radius;\n         var rB = proxyB.m_radius;\n         if (output.distance > rA + rB && output.distance > Number.MIN_VALUE) {\n            output.distance -= rA + rB;\n            var normal = b2Math.SubtractVV(output.pointB, output.pointA);\n            normal.Normalize();\n            output.pointA.x += rA * normal.x;\n            output.pointA.y += rA * normal.y;\n            output.pointB.x -= rB * normal.x;\n            output.pointB.y -= rB * normal.y;\n         }\n         else {\n            p = new b2Vec2();\n            p.x = .5 * (output.pointA.x + output.pointB.x);\n            p.y = .5 * (output.pointA.y + output.pointB.y);\n            output.pointA.x = output.pointB.x = p.x;\n            output.pointA.y = output.pointB.y = p.y;\n            output.distance = 0.0;\n         }\n      }\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Collision.b2Distance.s_simplex = new b2Simplex();\n      Box2D.Collision.b2Distance.s_saveA = new Vector_a2j_Number(3);\n      Box2D.Collision.b2Distance.s_saveB = new Vector_a2j_Number(3);\n   });\n   b2DistanceInput.b2DistanceInput = function () {};\n   b2DistanceOutput.b2DistanceOutput = function () {\n      this.pointA = new b2Vec2();\n      this.pointB = new b2Vec2();\n   };\n   b2DistanceProxy.b2DistanceProxy = function () {};\n   b2DistanceProxy.prototype.Set = function (shape) {\n      switch (shape.GetType()) {\n      case b2Shape.e_circleShape:\n         {\n            var circle = (shape instanceof b2CircleShape ? shape : null);\n            this.m_vertices = new Vector(1, true);\n            this.m_vertices[0] = circle.m_p;\n            this.m_count = 1;\n            this.m_radius = circle.m_radius;\n         }\n         break;\n      case b2Shape.e_polygonShape:\n         {\n            var polygon = (shape instanceof b2PolygonShape ? shape : null);\n            this.m_vertices = polygon.m_vertices;\n            this.m_count = polygon.m_vertexCount;\n            this.m_radius = polygon.m_radius;\n         }\n         break;\n      default:\n         b2Settings.b2Assert(false);\n      }\n   }\n   b2DistanceProxy.prototype.GetSupport = function (d) {\n      var bestIndex = 0;\n      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;\n      for (var i = 1; i < this.m_count; ++i) {\n         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;\n         if (value > bestValue) {\n            bestIndex = i;\n            bestValue = value;\n         }\n      }\n      return bestIndex;\n   }\n   b2DistanceProxy.prototype.GetSupportVertex = function (d) {\n      var bestIndex = 0;\n      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;\n      for (var i = 1; i < this.m_count; ++i) {\n         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;\n         if (value > bestValue) {\n            bestIndex = i;\n            bestValue = value;\n         }\n      }\n      return this.m_vertices[bestIndex];\n   }\n   b2DistanceProxy.prototype.GetVertexCount = function () {\n      return this.m_count;\n   }\n   b2DistanceProxy.prototype.GetVertex = function (index) {\n      if (index === undefined) index = 0;\n      b2Settings.b2Assert(0 <= index && index < this.m_count);\n      return this.m_vertices[index];\n   }\n   b2DynamicTree.b2DynamicTree = function () {};\n   b2DynamicTree.prototype.b2DynamicTree = function () {\n      this.m_root = null;\n      this.m_freeList = null;\n      this.m_path = 0;\n      this.m_insertionCount = 0;\n   }\n   b2DynamicTree.prototype.CreateProxy = function (aabb, userData) {\n      var node = this.AllocateNode();\n      var extendX = b2Settings.b2_aabbExtension;\n      var extendY = b2Settings.b2_aabbExtension;\n      node.aabb.lowerBound.x = aabb.lowerBound.x - extendX;\n      node.aabb.lowerBound.y = aabb.lowerBound.y - extendY;\n      node.aabb.upperBound.x = aabb.upperBound.x + extendX;\n      node.aabb.upperBound.y = aabb.upperBound.y + extendY;\n      node.userData = userData;\n      this.InsertLeaf(node);\n      return node;\n   }\n   b2DynamicTree.prototype.DestroyProxy = function (proxy) {\n      this.RemoveLeaf(proxy);\n      this.FreeNode(proxy);\n   }\n   b2DynamicTree.prototype.MoveProxy = function (proxy, aabb, displacement) {\n      b2Settings.b2Assert(proxy.IsLeaf());\n      if (proxy.aabb.Contains(aabb)) {\n         return false;\n      }\n      this.RemoveLeaf(proxy);\n      var extendX = b2Settings.b2_aabbExtension + b2Settings.b2_aabbMultiplier * (displacement.x > 0 ? displacement.x : (-displacement.x));\n      var extendY = b2Settings.b2_aabbExtension + b2Settings.b2_aabbMultiplier * (displacement.y > 0 ? displacement.y : (-displacement.y));\n      proxy.aabb.lowerBound.x = aabb.lowerBound.x - extendX;\n      proxy.aabb.lowerBound.y = aabb.lowerBound.y - extendY;\n      proxy.aabb.upperBound.x = aabb.upperBound.x + extendX;\n      proxy.aabb.upperBound.y = aabb.upperBound.y + extendY;\n      this.InsertLeaf(proxy);\n      return true;\n   }\n   b2DynamicTree.prototype.Rebalance = function (iterations) {\n      if (iterations === undefined) iterations = 0;\n      if (this.m_root == null) return;\n      for (var i = 0; i < iterations; i++) {\n         var node = this.m_root;\n         var bit = 0;\n         while (node.IsLeaf() == false) {\n            node = (this.m_path >> bit) & 1 ? node.child2 : node.child1;\n            bit = (bit + 1) & 31;\n         }++this.m_path;\n         this.RemoveLeaf(node);\n         this.InsertLeaf(node);\n      }\n   }\n   b2DynamicTree.prototype.GetFatAABB = function (proxy) {\n      return proxy.aabb;\n   }\n   b2DynamicTree.prototype.GetUserData = function (proxy) {\n      return proxy.userData;\n   }\n   b2DynamicTree.prototype.Query = function (callback, aabb) {\n      if (this.m_root == null) return;\n      var stack = new Vector();\n      var count = 0;\n      stack[count++] = this.m_root;\n      while (count > 0) {\n         var node = stack[--count];\n         if (node.aabb.TestOverlap(aabb)) {\n            if (node.IsLeaf()) {\n               var proceed = callback(node);\n               if (!proceed) return;\n            }\n            else {\n               stack[count++] = node.child1;\n               stack[count++] = node.child2;\n            }\n         }\n      }\n   }\n   b2DynamicTree.prototype.RayCast = function (callback, input) {\n      if (this.m_root == null) return;\n      var p1 = input.p1;\n      var p2 = input.p2;\n      var r = b2Math.SubtractVV(p1, p2);\n      r.Normalize();\n      var v = b2Math.CrossFV(1.0, r);\n      var abs_v = b2Math.AbsV(v);\n      var maxFraction = input.maxFraction;\n      var segmentAABB = new b2AABB();\n      var tX = 0;\n      var tY = 0; {\n         tX = p1.x + maxFraction * (p2.x - p1.x);\n         tY = p1.y + maxFraction * (p2.y - p1.y);\n         segmentAABB.lowerBound.x = Math.min(p1.x, tX);\n         segmentAABB.lowerBound.y = Math.min(p1.y, tY);\n         segmentAABB.upperBound.x = Math.max(p1.x, tX);\n         segmentAABB.upperBound.y = Math.max(p1.y, tY);\n      }\n      var stack = new Vector();\n      var count = 0;\n      stack[count++] = this.m_root;\n      while (count > 0) {\n         var node = stack[--count];\n         if (node.aabb.TestOverlap(segmentAABB) == false) {\n            continue;\n         }\n         var c = node.aabb.GetCenter();\n         var h = node.aabb.GetExtents();\n         var separation = Math.abs(v.x * (p1.x - c.x) + v.y * (p1.y - c.y)) - abs_v.x * h.x - abs_v.y * h.y;\n         if (separation > 0.0) continue;\n         if (node.IsLeaf()) {\n            var subInput = new b2RayCastInput();\n            subInput.p1 = input.p1;\n            subInput.p2 = input.p2;\n            subInput.maxFraction = input.maxFraction;\n            maxFraction = callback(subInput, node);\n            if (maxFraction == 0.0) return;\n            if (maxFraction > 0.0) {\n               tX = p1.x + maxFraction * (p2.x - p1.x);\n               tY = p1.y + maxFraction * (p2.y - p1.y);\n               segmentAABB.lowerBound.x = Math.min(p1.x, tX);\n               segmentAABB.lowerBound.y = Math.min(p1.y, tY);\n               segmentAABB.upperBound.x = Math.max(p1.x, tX);\n               segmentAABB.upperBound.y = Math.max(p1.y, tY);\n            }\n         }\n         else {\n            stack[count++] = node.child1;\n            stack[count++] = node.child2;\n         }\n      }\n   }\n   b2DynamicTree.prototype.AllocateNode = function () {\n      if (this.m_freeList) {\n         var node = this.m_freeList;\n         this.m_freeList = node.parent;\n         node.parent = null;\n         node.child1 = null;\n         node.child2 = null;\n         return node;\n      }\n      return new b2DynamicTreeNode();\n   }\n   b2DynamicTree.prototype.FreeNode = function (node) {\n      node.parent = this.m_freeList;\n      this.m_freeList = node;\n   }\n   b2DynamicTree.prototype.InsertLeaf = function (leaf) {\n      ++this.m_insertionCount;\n      if (this.m_root == null) {\n         this.m_root = leaf;\n         this.m_root.parent = null;\n         return;\n      }\n      var center = leaf.aabb.GetCenter();\n      var sibling = this.m_root;\n      if (sibling.IsLeaf() == false) {\n         do {\n            var child1 = sibling.child1;\n            var child2 = sibling.child2;\n            var norm1 = Math.abs((child1.aabb.lowerBound.x + child1.aabb.upperBound.x) / 2 - center.x) + Math.abs((child1.aabb.lowerBound.y + child1.aabb.upperBound.y) / 2 - center.y);\n            var norm2 = Math.abs((child2.aabb.lowerBound.x + child2.aabb.upperBound.x) / 2 - center.x) + Math.abs((child2.aabb.lowerBound.y + child2.aabb.upperBound.y) / 2 - center.y);\n            if (norm1 < norm2) {\n               sibling = child1;\n            }\n            else {\n               sibling = child2;\n            }\n         }\n         while (sibling.IsLeaf() == false)\n      }\n      var node1 = sibling.parent;\n      var node2 = this.AllocateNode();\n      node2.parent = node1;\n      node2.userData = null;\n      node2.aabb.Combine(leaf.aabb, sibling.aabb);\n      if (node1) {\n         if (sibling.parent.child1 == sibling) {\n            node1.child1 = node2;\n         }\n         else {\n            node1.child2 = node2;\n         }\n         node2.child1 = sibling;\n         node2.child2 = leaf;\n         sibling.parent = node2;\n         leaf.parent = node2;\n         do {\n            if (node1.aabb.Contains(node2.aabb)) break;\n            node1.aabb.Combine(node1.child1.aabb, node1.child2.aabb);\n            node2 = node1;\n            node1 = node1.parent;\n         }\n         while (node1)\n      }\n      else {\n         node2.child1 = sibling;\n         node2.child2 = leaf;\n         sibling.parent = node2;\n         leaf.parent = node2;\n         this.m_root = node2;\n      }\n   }\n   b2DynamicTree.prototype.RemoveLeaf = function (leaf) {\n      if (leaf == this.m_root) {\n         this.m_root = null;\n         return;\n      }\n      var node2 = leaf.parent;\n      var node1 = node2.parent;\n      var sibling;\n      if (node2.child1 == leaf) {\n         sibling = node2.child2;\n      }\n      else {\n         sibling = node2.child1;\n      }\n      if (node1) {\n         if (node1.child1 == node2) {\n            node1.child1 = sibling;\n         }\n         else {\n            node1.child2 = sibling;\n         }\n         sibling.parent = node1;\n         this.FreeNode(node2);\n         while (node1) {\n            var oldAABB = node1.aabb;\n            node1.aabb = b2AABB.Combine(node1.child1.aabb, node1.child2.aabb);\n            if (oldAABB.Contains(node1.aabb)) break;\n            node1 = node1.parent;\n         }\n      }\n      else {\n         this.m_root = sibling;\n         sibling.parent = null;\n         this.FreeNode(node2);\n      }\n   }\n   b2DynamicTreeBroadPhase.b2DynamicTreeBroadPhase = function () {\n      this.m_tree = new b2DynamicTree();\n      this.m_moveBuffer = new Vector();\n      this.m_pairBuffer = new Vector();\n      this.m_pairCount = 0;\n   };\n   b2DynamicTreeBroadPhase.prototype.CreateProxy = function (aabb, userData) {\n      var proxy = this.m_tree.CreateProxy(aabb, userData);\n      ++this.m_proxyCount;\n      this.BufferMove(proxy);\n      return proxy;\n   }\n   b2DynamicTreeBroadPhase.prototype.DestroyProxy = function (proxy) {\n      this.UnBufferMove(proxy);\n      --this.m_proxyCount;\n      this.m_tree.DestroyProxy(proxy);\n   }\n   b2DynamicTreeBroadPhase.prototype.MoveProxy = function (proxy, aabb, displacement) {\n      var buffer = this.m_tree.MoveProxy(proxy, aabb, displacement);\n      if (buffer) {\n         this.BufferMove(proxy);\n      }\n   }\n   b2DynamicTreeBroadPhase.prototype.TestOverlap = function (proxyA, proxyB) {\n      var aabbA = this.m_tree.GetFatAABB(proxyA);\n      var aabbB = this.m_tree.GetFatAABB(proxyB);\n      return aabbA.TestOverlap(aabbB);\n   }\n   b2DynamicTreeBroadPhase.prototype.GetUserData = function (proxy) {\n      return this.m_tree.GetUserData(proxy);\n   }\n   b2DynamicTreeBroadPhase.prototype.GetFatAABB = function (proxy) {\n      return this.m_tree.GetFatAABB(proxy);\n   }\n   b2DynamicTreeBroadPhase.prototype.GetProxyCount = function () {\n      return this.m_proxyCount;\n   }\n   b2DynamicTreeBroadPhase.prototype.UpdatePairs = function (callback) {\n      var __this = this;\n      __this.m_pairCount = 0;\n      var i = 0,\n         queryProxy;\n       function QueryCallback(proxy) {\n          if (proxy == queryProxy) return true;\n          if (__this.m_pairCount == __this.m_pairBuffer.length) {\n             __this.m_pairBuffer[__this.m_pairCount] = new b2DynamicTreePair();\n          }\n          var pair = __this.m_pairBuffer[__this.m_pairCount];\n          pair.proxyA = proxy < queryProxy ? proxy : queryProxy;\n          pair.proxyB = proxy >= queryProxy ? proxy : queryProxy;++__this.m_pairCount;\n          return true;\n       };\n      for (i = 0;\n      i < __this.m_moveBuffer.length; ++i) {\n         queryProxy = __this.m_moveBuffer[i];\n         var fatAABB = __this.m_tree.GetFatAABB(queryProxy);\n         __this.m_tree.Query(QueryCallback, fatAABB);\n      }\n      __this.m_moveBuffer.length = 0;\n      for (var i = 0; i < __this.m_pairCount;) {\n         var primaryPair = __this.m_pairBuffer[i];\n         var userDataA = __this.m_tree.GetUserData(primaryPair.proxyA);\n         var userDataB = __this.m_tree.GetUserData(primaryPair.proxyB);\n         callback(userDataA, userDataB);\n         ++i;\n         while (i < __this.m_pairCount) {\n            var pair = __this.m_pairBuffer[i];\n            if (pair.proxyA != primaryPair.proxyA || pair.proxyB != primaryPair.proxyB) {\n               break;\n            }++i;\n         }\n      }\n   }\n   b2DynamicTreeBroadPhase.prototype.Query = function (callback, aabb) {\n      this.m_tree.Query(callback, aabb);\n   }\n   b2DynamicTreeBroadPhase.prototype.RayCast = function (callback, input) {\n      this.m_tree.RayCast(callback, input);\n   }\n   b2DynamicTreeBroadPhase.prototype.Validate = function () {}\n   b2DynamicTreeBroadPhase.prototype.Rebalance = function (iterations) {\n      if (iterations === undefined) iterations = 0;\n      this.m_tree.Rebalance(iterations);\n   }\n   b2DynamicTreeBroadPhase.prototype.BufferMove = function (proxy) {\n      this.m_moveBuffer[this.m_moveBuffer.length] = proxy;\n   }\n   b2DynamicTreeBroadPhase.prototype.UnBufferMove = function (proxy) {\n      var i = parseInt(this.m_moveBuffer.indexOf(proxy));\n      this.m_moveBuffer.splice(i, 1);\n   }\n   b2DynamicTreeBroadPhase.prototype.ComparePairs = function (pair1, pair2) {\n      return 0;\n   }\n   b2DynamicTreeBroadPhase.__implements = {};\n   b2DynamicTreeBroadPhase.__implements[IBroadPhase] = true;\n   b2DynamicTreeNode.b2DynamicTreeNode = function () {\n      this.aabb = new b2AABB();\n   };\n   b2DynamicTreeNode.prototype.IsLeaf = function () {\n      return this.child1 == null;\n   }\n   b2DynamicTreePair.b2DynamicTreePair = function () {};\n   b2Manifold.b2Manifold = function () {\n      this.m_pointCount = 0;\n   };\n   b2Manifold.prototype.b2Manifold = function () {\n      this.m_points = new Vector(b2Settings.b2_maxManifoldPoints);\n      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {\n         this.m_points[i] = new b2ManifoldPoint();\n      }\n      this.m_localPlaneNormal = new b2Vec2();\n      this.m_localPoint = new b2Vec2();\n   }\n   b2Manifold.prototype.Reset = function () {\n      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {\n         ((this.m_points[i] instanceof b2ManifoldPoint ? this.m_points[i] : null)).Reset();\n      }\n      this.m_localPlaneNormal.SetZero();\n      this.m_localPoint.SetZero();\n      this.m_type = 0;\n      this.m_pointCount = 0;\n   }\n   b2Manifold.prototype.Set = function (m) {\n      this.m_pointCount = m.m_pointCount;\n      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {\n         ((this.m_points[i] instanceof b2ManifoldPoint ? this.m_points[i] : null)).Set(m.m_points[i]);\n      }\n      this.m_localPlaneNormal.SetV(m.m_localPlaneNormal);\n      this.m_localPoint.SetV(m.m_localPoint);\n      this.m_type = m.m_type;\n   }\n   b2Manifold.prototype.Copy = function () {\n      var copy = new b2Manifold();\n      copy.Set(this);\n      return copy;\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Collision.b2Manifold.e_circles = 0x0001;\n      Box2D.Collision.b2Manifold.e_faceA = 0x0002;\n      Box2D.Collision.b2Manifold.e_faceB = 0x0004;\n   });\n   b2ManifoldPoint.b2ManifoldPoint = function () {\n      this.m_localPoint = new b2Vec2();\n      this.m_id = new b2ContactID();\n   };\n   b2ManifoldPoint.prototype.b2ManifoldPoint = function () {\n      this.Reset();\n   }\n   b2ManifoldPoint.prototype.Reset = function () {\n      this.m_localPoint.SetZero();\n      this.m_normalImpulse = 0.0;\n      this.m_tangentImpulse = 0.0;\n      this.m_id.key = 0;\n   }\n   b2ManifoldPoint.prototype.Set = function (m) {\n      this.m_localPoint.SetV(m.m_localPoint);\n      this.m_normalImpulse = m.m_normalImpulse;\n      this.m_tangentImpulse = m.m_tangentImpulse;\n      this.m_id.Set(m.m_id);\n   }\n   b2Point.b2Point = function () {\n      this.p = new b2Vec2();\n   };\n   b2Point.prototype.Support = function (xf, vX, vY) {\n      if (vX === undefined) vX = 0;\n      if (vY === undefined) vY = 0;\n      return this.p;\n   }\n   b2Point.prototype.GetFirstVertex = function (xf) {\n      return this.p;\n   }\n   b2RayCastInput.b2RayCastInput = function () {\n      this.p1 = new b2Vec2();\n      this.p2 = new b2Vec2();\n   };\n   b2RayCastInput.prototype.b2RayCastInput = function (p1, p2, maxFraction) {\n      if (p1 === undefined) p1 = null;\n      if (p2 === undefined) p2 = null;\n      if (maxFraction === undefined) maxFraction = 1;\n      if (p1) this.p1.SetV(p1);\n      if (p2) this.p2.SetV(p2);\n      this.maxFraction = maxFraction;\n   }\n   b2RayCastOutput.b2RayCastOutput = function () {\n      this.normal = new b2Vec2();\n   };\n   b2Segment.b2Segment = function () {\n      this.p1 = new b2Vec2();\n      this.p2 = new b2Vec2();\n   };\n   b2Segment.prototype.TestSegment = function (lambda, normal, segment, maxLambda) {\n      if (maxLambda === undefined) maxLambda = 0;\n      var s = segment.p1;\n      var rX = segment.p2.x - s.x;\n      var rY = segment.p2.y - s.y;\n      var dX = this.p2.x - this.p1.x;\n      var dY = this.p2.y - this.p1.y;\n      var nX = dY;\n      var nY = (-dX);\n      var k_slop = 100.0 * Number.MIN_VALUE;\n      var denom = (-(rX * nX + rY * nY));\n      if (denom > k_slop) {\n         var bX = s.x - this.p1.x;\n         var bY = s.y - this.p1.y;\n         var a = (bX * nX + bY * nY);\n         if (0.0 <= a && a <= maxLambda * denom) {\n            var mu2 = (-rX * bY) + rY * bX;\n            if ((-k_slop * denom) <= mu2 && mu2 <= denom * (1.0 + k_slop)) {\n               a /= denom;\n               var nLen = Math.sqrt(nX * nX + nY * nY);\n               nX /= nLen;\n               nY /= nLen;\n               lambda[0] = a;\n               normal.Set(nX, nY);\n               return true;\n            }\n         }\n      }\n      return false;\n   }\n   b2Segment.prototype.Extend = function (aabb) {\n      this.ExtendForward(aabb);\n      this.ExtendBackward(aabb);\n   }\n   b2Segment.prototype.ExtendForward = function (aabb) {\n      var dX = this.p2.x - this.p1.x;\n      var dY = this.p2.y - this.p1.y;\n      var lambda = Math.min(dX > 0 ? (aabb.upperBound.x - this.p1.x) / dX : dX < 0 ? (aabb.lowerBound.x - this.p1.x) / dX : Number.POSITIVE_INFINITY,\n      dY > 0 ? (aabb.upperBound.y - this.p1.y) / dY : dY < 0 ? (aabb.lowerBound.y - this.p1.y) / dY : Number.POSITIVE_INFINITY);\n      this.p2.x = this.p1.x + dX * lambda;\n      this.p2.y = this.p1.y + dY * lambda;\n   }\n   b2Segment.prototype.ExtendBackward = function (aabb) {\n      var dX = (-this.p2.x) + this.p1.x;\n      var dY = (-this.p2.y) + this.p1.y;\n      var lambda = Math.min(dX > 0 ? (aabb.upperBound.x - this.p2.x) / dX : dX < 0 ? (aabb.lowerBound.x - this.p2.x) / dX : Number.POSITIVE_INFINITY,\n      dY > 0 ? (aabb.upperBound.y - this.p2.y) / dY : dY < 0 ? (aabb.lowerBound.y - this.p2.y) / dY : Number.POSITIVE_INFINITY);\n      this.p1.x = this.p2.x + dX * lambda;\n      this.p1.y = this.p2.y + dY * lambda;\n   }\n   b2SeparationFunction.b2SeparationFunction = function () {\n      this.m_localPoint = new b2Vec2();\n      this.m_axis = new b2Vec2();\n   };\n   b2SeparationFunction.prototype.Initialize = function (cache, proxyA, transformA, proxyB, transformB) {\n      this.m_proxyA = proxyA;\n      this.m_proxyB = proxyB;\n      var count = parseInt(cache.count);\n      b2Settings.b2Assert(0 < count && count < 3);\n      var localPointA;\n      var localPointA1;\n      var localPointA2;\n      var localPointB;\n      var localPointB1;\n      var localPointB2;\n      var pointAX = 0;\n      var pointAY = 0;\n      var pointBX = 0;\n      var pointBY = 0;\n      var normalX = 0;\n      var normalY = 0;\n      var tMat;\n      var tVec;\n      var s = 0;\n      var sgn = 0;\n      if (count == 1) {\n         this.m_type = b2SeparationFunction.e_points;\n         localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);\n         localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);\n         tVec = localPointA;\n         tMat = transformA.R;\n         pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n         pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n         tVec = localPointB;\n         tMat = transformB.R;\n         pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n         pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n         this.m_axis.x = pointBX - pointAX;\n         this.m_axis.y = pointBY - pointAY;\n         this.m_axis.Normalize();\n      }\n      else if (cache.indexB[0] == cache.indexB[1]) {\n         this.m_type = b2SeparationFunction.e_faceA;\n         localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);\n         localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);\n         localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);\n         this.m_localPoint.x = 0.5 * (localPointA1.x + localPointA2.x);\n         this.m_localPoint.y = 0.5 * (localPointA1.y + localPointA2.y);\n         this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointA2, localPointA1), 1.0);\n         this.m_axis.Normalize();\n         tVec = this.m_axis;\n         tMat = transformA.R;\n         normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n         normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n         tVec = this.m_localPoint;\n         tMat = transformA.R;\n         pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n         pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n         tVec = localPointB;\n         tMat = transformB.R;\n         pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n         pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n         s = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;\n         if (s < 0.0) {\n            this.m_axis.NegativeSelf();\n         }\n      }\n      else if (cache.indexA[0] == cache.indexA[0]) {\n         this.m_type = b2SeparationFunction.e_faceB;\n         localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);\n         localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);\n         localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);\n         this.m_localPoint.x = 0.5 * (localPointB1.x + localPointB2.x);\n         this.m_localPoint.y = 0.5 * (localPointB1.y + localPointB2.y);\n         this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointB2, localPointB1), 1.0);\n         this.m_axis.Normalize();\n         tVec = this.m_axis;\n         tMat = transformB.R;\n         normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n         normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n         tVec = this.m_localPoint;\n         tMat = transformB.R;\n         pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n         pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n         tVec = localPointA;\n         tMat = transformA.R;\n         pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n         pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n         s = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;\n         if (s < 0.0) {\n            this.m_axis.NegativeSelf();\n         }\n      }\n      else {\n         localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);\n         localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);\n         localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);\n         localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);\n         var pA = b2Math.MulX(transformA, localPointA);\n         var dA = b2Math.MulMV(transformA.R, b2Math.SubtractVV(localPointA2, localPointA1));\n         var pB = b2Math.MulX(transformB, localPointB);\n         var dB = b2Math.MulMV(transformB.R, b2Math.SubtractVV(localPointB2, localPointB1));\n         var a = dA.x * dA.x + dA.y * dA.y;\n         var e = dB.x * dB.x + dB.y * dB.y;\n         var r = b2Math.SubtractVV(dB, dA);\n         var c = dA.x * r.x + dA.y * r.y;\n         var f = dB.x * r.x + dB.y * r.y;\n         var b = dA.x * dB.x + dA.y * dB.y;\n         var denom = a * e - b * b;\n         s = 0.0;\n         if (denom != 0.0) {\n            s = b2Math.Clamp((b * f - c * e) / denom, 0.0, 1.0);\n         }\n         var t = (b * s + f) / e;\n         if (t < 0.0) {\n            t = 0.0;\n            s = b2Math.Clamp((b - c) / a, 0.0, 1.0);\n         }\n         localPointA = new b2Vec2();\n         localPointA.x = localPointA1.x + s * (localPointA2.x - localPointA1.x);\n         localPointA.y = localPointA1.y + s * (localPointA2.y - localPointA1.y);\n         localPointB = new b2Vec2();\n         localPointB.x = localPointB1.x + s * (localPointB2.x - localPointB1.x);\n         localPointB.y = localPointB1.y + s * (localPointB2.y - localPointB1.y);\n         if (s == 0.0 || s == 1.0) {\n            this.m_type = b2SeparationFunction.e_faceB;\n            this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointB2, localPointB1), 1.0);\n            this.m_axis.Normalize();\n            this.m_localPoint = localPointB;\n            tVec = this.m_axis;\n            tMat = transformB.R;\n            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n            tVec = this.m_localPoint;\n            tMat = transformB.R;\n            pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n            pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n            tVec = localPointA;\n            tMat = transformA.R;\n            pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n            pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n            sgn = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;\n            if (s < 0.0) {\n               this.m_axis.NegativeSelf();\n            }\n         }\n         else {\n            this.m_type = b2SeparationFunction.e_faceA;\n            this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointA2, localPointA1), 1.0);\n            this.m_localPoint = localPointA;\n            tVec = this.m_axis;\n            tMat = transformA.R;\n            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n            tVec = this.m_localPoint;\n            tMat = transformA.R;\n            pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n            pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n            tVec = localPointB;\n            tMat = transformB.R;\n            pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n            pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n            sgn = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;\n            if (s < 0.0) {\n               this.m_axis.NegativeSelf();\n            }\n         }\n      }\n   }\n   b2SeparationFunction.prototype.Evaluate = function (transformA, transformB) {\n      var axisA;\n      var axisB;\n      var localPointA;\n      var localPointB;\n      var pointA;\n      var pointB;\n      var seperation = 0;\n      var normal;\n      switch (this.m_type) {\n      case b2SeparationFunction.e_points:\n         {\n            axisA = b2Math.MulTMV(transformA.R, this.m_axis);\n            axisB = b2Math.MulTMV(transformB.R, this.m_axis.GetNegative());\n            localPointA = this.m_proxyA.GetSupportVertex(axisA);\n            localPointB = this.m_proxyB.GetSupportVertex(axisB);\n            pointA = b2Math.MulX(transformA, localPointA);\n            pointB = b2Math.MulX(transformB, localPointB);\n            seperation = (pointB.x - pointA.x) * this.m_axis.x + (pointB.y - pointA.y) * this.m_axis.y;\n            return seperation;\n         }\n      case b2SeparationFunction.e_faceA:\n         {\n            normal = b2Math.MulMV(transformA.R, this.m_axis);\n            pointA = b2Math.MulX(transformA, this.m_localPoint);\n            axisB = b2Math.MulTMV(transformB.R, normal.GetNegative());\n            localPointB = this.m_proxyB.GetSupportVertex(axisB);\n            pointB = b2Math.MulX(transformB, localPointB);\n            seperation = (pointB.x - pointA.x) * normal.x + (pointB.y - pointA.y) * normal.y;\n            return seperation;\n         }\n      case b2SeparationFunction.e_faceB:\n         {\n            normal = b2Math.MulMV(transformB.R, this.m_axis);\n            pointB = b2Math.MulX(transformB, this.m_localPoint);\n            axisA = b2Math.MulTMV(transformA.R, normal.GetNegative());\n            localPointA = this.m_proxyA.GetSupportVertex(axisA);\n            pointA = b2Math.MulX(transformA, localPointA);\n            seperation = (pointA.x - pointB.x) * normal.x + (pointA.y - pointB.y) * normal.y;\n            return seperation;\n         }\n      default:\n         b2Settings.b2Assert(false);\n         return 0.0;\n      }\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Collision.b2SeparationFunction.e_points = 0x01;\n      Box2D.Collision.b2SeparationFunction.e_faceA = 0x02;\n      Box2D.Collision.b2SeparationFunction.e_faceB = 0x04;\n   });\n   b2Simplex.b2Simplex = function () {\n      this.m_v1 = new b2SimplexVertex();\n      this.m_v2 = new b2SimplexVertex();\n      this.m_v3 = new b2SimplexVertex();\n      this.m_vertices = new Vector(3);\n   };\n   b2Simplex.prototype.b2Simplex = function () {\n      this.m_vertices[0] = this.m_v1;\n      this.m_vertices[1] = this.m_v2;\n      this.m_vertices[2] = this.m_v3;\n   }\n   b2Simplex.prototype.ReadCache = function (cache, proxyA, transformA, proxyB, transformB) {\n      b2Settings.b2Assert(0 <= cache.count && cache.count <= 3);\n      var wALocal;\n      var wBLocal;\n      this.m_count = cache.count;\n      var vertices = this.m_vertices;\n      for (var i = 0; i < this.m_count; i++) {\n         var v = vertices[i];\n         v.indexA = cache.indexA[i];\n         v.indexB = cache.indexB[i];\n         wALocal = proxyA.GetVertex(v.indexA);\n         wBLocal = proxyB.GetVertex(v.indexB);\n         v.wA = b2Math.MulX(transformA, wALocal);\n         v.wB = b2Math.MulX(transformB, wBLocal);\n         v.w = b2Math.SubtractVV(v.wB, v.wA);\n         v.a = 0;\n      }\n      if (this.m_count > 1) {\n         var metric1 = cache.metric;\n         var metric2 = this.GetMetric();\n         if (metric2 < .5 * metric1 || 2.0 * metric1 < metric2 || metric2 < Number.MIN_VALUE) {\n            this.m_count = 0;\n         }\n      }\n      if (this.m_count == 0) {\n         v = vertices[0];\n         v.indexA = 0;\n         v.indexB = 0;\n         wALocal = proxyA.GetVertex(0);\n         wBLocal = proxyB.GetVertex(0);\n         v.wA = b2Math.MulX(transformA, wALocal);\n         v.wB = b2Math.MulX(transformB, wBLocal);\n         v.w = b2Math.SubtractVV(v.wB, v.wA);\n         this.m_count = 1;\n      }\n   }\n   b2Simplex.prototype.WriteCache = function (cache) {\n      cache.metric = this.GetMetric();\n      cache.count = Box2D.parseUInt(this.m_count);\n      var vertices = this.m_vertices;\n      for (var i = 0; i < this.m_count; i++) {\n         cache.indexA[i] = Box2D.parseUInt(vertices[i].indexA);\n         cache.indexB[i] = Box2D.parseUInt(vertices[i].indexB);\n      }\n   }\n   b2Simplex.prototype.GetSearchDirection = function () {\n      switch (this.m_count) {\n      case 1:\n         return this.m_v1.w.GetNegative();\n      case 2:\n         {\n            var e12 = b2Math.SubtractVV(this.m_v2.w, this.m_v1.w);\n            var sgn = b2Math.CrossVV(e12, this.m_v1.w.GetNegative());\n            if (sgn > 0.0) {\n               return b2Math.CrossFV(1.0, e12);\n            }\n            else {\n               return b2Math.CrossVF(e12, 1.0);\n            }\n         }\n      default:\n         b2Settings.b2Assert(false);\n         return new b2Vec2();\n      }\n   }\n   b2Simplex.prototype.GetClosestPoint = function () {\n      switch (this.m_count) {\n      case 0:\n         b2Settings.b2Assert(false);\n         return new b2Vec2();\n      case 1:\n         return this.m_v1.w;\n      case 2:\n         return new b2Vec2(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);\n      default:\n         b2Settings.b2Assert(false);\n         return new b2Vec2();\n      }\n   }\n   b2Simplex.prototype.GetWitnessPoints = function (pA, pB) {\n      switch (this.m_count) {\n      case 0:\n         b2Settings.b2Assert(false);\n         break;\n      case 1:\n         pA.SetV(this.m_v1.wA);\n         pB.SetV(this.m_v1.wB);\n         break;\n      case 2:\n         pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;\n         pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;\n         pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;\n         pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;\n         break;\n      case 3:\n         pB.x = pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;\n         pB.y = pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;\n         break;\n      default:\n         b2Settings.b2Assert(false);\n         break;\n      }\n   }\n   b2Simplex.prototype.GetMetric = function () {\n      switch (this.m_count) {\n      case 0:\n         b2Settings.b2Assert(false);\n         return 0.0;\n      case 1:\n         return 0.0;\n      case 2:\n         return b2Math.SubtractVV(this.m_v1.w, this.m_v2.w).Length();\n      case 3:\n         return b2Math.CrossVV(b2Math.SubtractVV(this.m_v2.w, this.m_v1.w), b2Math.SubtractVV(this.m_v3.w, this.m_v1.w));\n      default:\n         b2Settings.b2Assert(false);\n         return 0.0;\n      }\n   }\n   b2Simplex.prototype.Solve2 = function () {\n      var w1 = this.m_v1.w;\n      var w2 = this.m_v2.w;\n      var e12 = b2Math.SubtractVV(w2, w1);\n      var d12_2 = (-(w1.x * e12.x + w1.y * e12.y));\n      if (d12_2 <= 0.0) {\n         this.m_v1.a = 1.0;\n         this.m_count = 1;\n         return;\n      }\n      var d12_1 = (w2.x * e12.x + w2.y * e12.y);\n      if (d12_1 <= 0.0) {\n         this.m_v2.a = 1.0;\n         this.m_count = 1;\n         this.m_v1.Set(this.m_v2);\n         return;\n      }\n      var inv_d12 = 1.0 / (d12_1 + d12_2);\n      this.m_v1.a = d12_1 * inv_d12;\n      this.m_v2.a = d12_2 * inv_d12;\n      this.m_count = 2;\n   }\n   b2Simplex.prototype.Solve3 = function () {\n      var w1 = this.m_v1.w;\n      var w2 = this.m_v2.w;\n      var w3 = this.m_v3.w;\n      var e12 = b2Math.SubtractVV(w2, w1);\n      var w1e12 = b2Math.Dot(w1, e12);\n      var w2e12 = b2Math.Dot(w2, e12);\n      var d12_1 = w2e12;\n      var d12_2 = (-w1e12);\n      var e13 = b2Math.SubtractVV(w3, w1);\n      var w1e13 = b2Math.Dot(w1, e13);\n      var w3e13 = b2Math.Dot(w3, e13);\n      var d13_1 = w3e13;\n      var d13_2 = (-w1e13);\n      var e23 = b2Math.SubtractVV(w3, w2);\n      var w2e23 = b2Math.Dot(w2, e23);\n      var w3e23 = b2Math.Dot(w3, e23);\n      var d23_1 = w3e23;\n      var d23_2 = (-w2e23);\n      var n123 = b2Math.CrossVV(e12, e13);\n      var d123_1 = n123 * b2Math.CrossVV(w2, w3);\n      var d123_2 = n123 * b2Math.CrossVV(w3, w1);\n      var d123_3 = n123 * b2Math.CrossVV(w1, w2);\n      if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n         this.m_v1.a = 1.0;\n         this.m_count = 1;\n         return;\n      }\n      if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n         var inv_d12 = 1.0 / (d12_1 + d12_2);\n         this.m_v1.a = d12_1 * inv_d12;\n         this.m_v2.a = d12_2 * inv_d12;\n         this.m_count = 2;\n         return;\n      }\n      if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n         var inv_d13 = 1.0 / (d13_1 + d13_2);\n         this.m_v1.a = d13_1 * inv_d13;\n         this.m_v3.a = d13_2 * inv_d13;\n         this.m_count = 2;\n         this.m_v2.Set(this.m_v3);\n         return;\n      }\n      if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n         this.m_v2.a = 1.0;\n         this.m_count = 1;\n         this.m_v1.Set(this.m_v2);\n         return;\n      }\n      if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n         this.m_v3.a = 1.0;\n         this.m_count = 1;\n         this.m_v1.Set(this.m_v3);\n         return;\n      }\n      if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n         var inv_d23 = 1.0 / (d23_1 + d23_2);\n         this.m_v2.a = d23_1 * inv_d23;\n         this.m_v3.a = d23_2 * inv_d23;\n         this.m_count = 2;\n         this.m_v1.Set(this.m_v3);\n         return;\n      }\n      var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n      this.m_v1.a = d123_1 * inv_d123;\n      this.m_v2.a = d123_2 * inv_d123;\n      this.m_v3.a = d123_3 * inv_d123;\n      this.m_count = 3;\n   }\n   b2SimplexCache.b2SimplexCache = function () {\n      this.indexA = new Vector_a2j_Number(3);\n      this.indexB = new Vector_a2j_Number(3);\n   };\n   b2SimplexVertex.b2SimplexVertex = function () {};\n   b2SimplexVertex.prototype.Set = function (other) {\n      this.wA.SetV(other.wA);\n      this.wB.SetV(other.wB);\n      this.w.SetV(other.w);\n      this.a = other.a;\n      this.indexA = other.indexA;\n      this.indexB = other.indexB;\n   }\n   b2TimeOfImpact.b2TimeOfImpact = function () {};\n   b2TimeOfImpact.TimeOfImpact = function (input) {\n      ++b2TimeOfImpact.b2_toiCalls;\n      var proxyA = input.proxyA;\n      var proxyB = input.proxyB;\n      var sweepA = input.sweepA;\n      var sweepB = input.sweepB;\n      b2Settings.b2Assert(sweepA.t0 == sweepB.t0);\n      b2Settings.b2Assert(1.0 - sweepA.t0 > Number.MIN_VALUE);\n      var radius = proxyA.m_radius + proxyB.m_radius;\n      var tolerance = input.tolerance;\n      var alpha = 0.0;\n      var k_maxIterations = 1000;\n      var iter = 0;\n      var target = 0.0;\n      b2TimeOfImpact.s_cache.count = 0;\n      b2TimeOfImpact.s_distanceInput.useRadii = false;\n      for (;;) {\n         sweepA.GetTransform(b2TimeOfImpact.s_xfA, alpha);\n         sweepB.GetTransform(b2TimeOfImpact.s_xfB, alpha);\n         b2TimeOfImpact.s_distanceInput.proxyA = proxyA;\n         b2TimeOfImpact.s_distanceInput.proxyB = proxyB;\n         b2TimeOfImpact.s_distanceInput.transformA = b2TimeOfImpact.s_xfA;\n         b2TimeOfImpact.s_distanceInput.transformB = b2TimeOfImpact.s_xfB;\n         b2Distance.Distance(b2TimeOfImpact.s_distanceOutput, b2TimeOfImpact.s_cache, b2TimeOfImpact.s_distanceInput);\n         if (b2TimeOfImpact.s_distanceOutput.distance <= 0.0) {\n            alpha = 1.0;\n            break;\n         }\n         b2TimeOfImpact.s_fcn.Initialize(b2TimeOfImpact.s_cache, proxyA, b2TimeOfImpact.s_xfA, proxyB, b2TimeOfImpact.s_xfB);\n         var separation = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);\n         if (separation <= 0.0) {\n            alpha = 1.0;\n            break;\n         }\n         if (iter == 0) {\n            if (separation > radius) {\n               target = b2Math.Max(radius - tolerance, 0.75 * radius);\n            }\n            else {\n               target = b2Math.Max(separation - tolerance, 0.02 * radius);\n            }\n         }\n         if (separation - target < 0.5 * tolerance) {\n            if (iter == 0) {\n               alpha = 1.0;\n               break;\n            }\n            break;\n         }\n         var newAlpha = alpha; {\n            var x1 = alpha;\n            var x2 = 1.0;\n            var f1 = separation;\n            sweepA.GetTransform(b2TimeOfImpact.s_xfA, x2);\n            sweepB.GetTransform(b2TimeOfImpact.s_xfB, x2);\n            var f2 = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);\n            if (f2 >= target) {\n               alpha = 1.0;\n               break;\n            }\n            var rootIterCount = 0;\n            for (;;) {\n               var x = 0;\n               if (rootIterCount & 1) {\n                  x = x1 + (target - f1) * (x2 - x1) / (f2 - f1);\n               }\n               else {\n                  x = 0.5 * (x1 + x2);\n               }\n               sweepA.GetTransform(b2TimeOfImpact.s_xfA, x);\n               sweepB.GetTransform(b2TimeOfImpact.s_xfB, x);\n               var f = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);\n               if (b2Math.Abs(f - target) < 0.025 * tolerance) {\n                  newAlpha = x;\n                  break;\n               }\n               if (f > target) {\n                  x1 = x;\n                  f1 = f;\n               }\n               else {\n                  x2 = x;\n                  f2 = f;\n               }++rootIterCount;\n               ++b2TimeOfImpact.b2_toiRootIters;\n               if (rootIterCount == 50) {\n                  break;\n               }\n            }\n            b2TimeOfImpact.b2_toiMaxRootIters = b2Math.Max(b2TimeOfImpact.b2_toiMaxRootIters, rootIterCount);\n         }\n         if (newAlpha < (1.0 + 100.0 * Number.MIN_VALUE) * alpha) {\n            break;\n         }\n         alpha = newAlpha;\n         iter++;\n         ++b2TimeOfImpact.b2_toiIters;\n         if (iter == k_maxIterations) {\n            break;\n         }\n      }\n      b2TimeOfImpact.b2_toiMaxIters = b2Math.Max(b2TimeOfImpact.b2_toiMaxIters, iter);\n      return alpha;\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Collision.b2TimeOfImpact.b2_toiCalls = 0;\n      Box2D.Collision.b2TimeOfImpact.b2_toiIters = 0;\n      Box2D.Collision.b2TimeOfImpact.b2_toiMaxIters = 0;\n      Box2D.Collision.b2TimeOfImpact.b2_toiRootIters = 0;\n      Box2D.Collision.b2TimeOfImpact.b2_toiMaxRootIters = 0;\n      Box2D.Collision.b2TimeOfImpact.s_cache = new b2SimplexCache();\n      Box2D.Collision.b2TimeOfImpact.s_distanceInput = new b2DistanceInput();\n      Box2D.Collision.b2TimeOfImpact.s_xfA = new b2Transform();\n      Box2D.Collision.b2TimeOfImpact.s_xfB = new b2Transform();\n      Box2D.Collision.b2TimeOfImpact.s_fcn = new b2SeparationFunction();\n      Box2D.Collision.b2TimeOfImpact.s_distanceOutput = new b2DistanceOutput();\n   });\n   b2TOIInput.b2TOIInput = function () {\n      this.proxyA = new b2DistanceProxy();\n      this.proxyB = new b2DistanceProxy();\n      this.sweepA = new b2Sweep();\n      this.sweepB = new b2Sweep();\n   };\n   b2WorldManifold.b2WorldManifold = function () {\n      this.m_normal = new b2Vec2();\n   };\n   b2WorldManifold.prototype.b2WorldManifold = function () {\n      this.m_points = new Vector(b2Settings.b2_maxManifoldPoints);\n      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {\n         this.m_points[i] = new b2Vec2();\n      }\n   }\n   b2WorldManifold.prototype.Initialize = function (manifold, xfA, radiusA, xfB, radiusB) {\n      if (radiusA === undefined) radiusA = 0;\n      if (radiusB === undefined) radiusB = 0;\n      if (manifold.m_pointCount == 0) {\n         return;\n      }\n      var i = 0;\n      var tVec;\n      var tMat;\n      var normalX = 0;\n      var normalY = 0;\n      var planePointX = 0;\n      var planePointY = 0;\n      var clipPointX = 0;\n      var clipPointY = 0;\n      switch (manifold.m_type) {\n      case b2Manifold.e_circles:\n         {\n            tMat = xfA.R;\n            tVec = manifold.m_localPoint;\n            var pointAX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n            var pointAY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n            tMat = xfB.R;\n            tVec = manifold.m_points[0].m_localPoint;\n            var pointBX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n            var pointBY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n            var dX = pointBX - pointAX;\n            var dY = pointBY - pointAY;\n            var d2 = dX * dX + dY * dY;\n            if (d2 > Number.MIN_VALUE * Number.MIN_VALUE) {\n               var d = Math.sqrt(d2);\n               this.m_normal.x = dX / d;\n               this.m_normal.y = dY / d;\n            }\n            else {\n               this.m_normal.x = 1;\n               this.m_normal.y = 0;\n            }\n            var cAX = pointAX + radiusA * this.m_normal.x;\n            var cAY = pointAY + radiusA * this.m_normal.y;\n            var cBX = pointBX - radiusB * this.m_normal.x;\n            var cBY = pointBY - radiusB * this.m_normal.y;\n            this.m_points[0].x = 0.5 * (cAX + cBX);\n            this.m_points[0].y = 0.5 * (cAY + cBY);\n         }\n         break;\n      case b2Manifold.e_faceA:\n         {\n            tMat = xfA.R;\n            tVec = manifold.m_localPlaneNormal;\n            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n            tMat = xfA.R;\n            tVec = manifold.m_localPoint;\n            planePointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n            planePointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n            this.m_normal.x = normalX;\n            this.m_normal.y = normalY;\n            for (i = 0;\n            i < manifold.m_pointCount; i++) {\n               tMat = xfB.R;\n               tVec = manifold.m_points[i].m_localPoint;\n               clipPointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n               clipPointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n               this.m_points[i].x = clipPointX + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalX;\n               this.m_points[i].y = clipPointY + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalY;\n            }\n         }\n         break;\n      case b2Manifold.e_faceB:\n         {\n            tMat = xfB.R;\n            tVec = manifold.m_localPlaneNormal;\n            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n            tMat = xfB.R;\n            tVec = manifold.m_localPoint;\n            planePointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n            planePointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n            this.m_normal.x = (-normalX);\n            this.m_normal.y = (-normalY);\n            for (i = 0;\n            i < manifold.m_pointCount; i++) {\n               tMat = xfA.R;\n               tVec = manifold.m_points[i].m_localPoint;\n               clipPointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n               clipPointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n               this.m_points[i].x = clipPointX + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalX;\n               this.m_points[i].y = clipPointY + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalY;\n            }\n         }\n         break;\n      }\n   }\n   ClipVertex.ClipVertex = function () {\n      this.v = new b2Vec2();\n      this.id = new b2ContactID();\n   };\n   ClipVertex.prototype.Set = function (other) {\n      this.v.SetV(other.v);\n      this.id.Set(other.id);\n   }\n   Features.Features = function () {};\n   Object.defineProperty(Features.prototype, 'referenceEdge', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n         return this._referenceEdge;\n      }\n   });\n   Object.defineProperty(Features.prototype, 'referenceEdge', {\n      enumerable: false,\n      configurable: true,\n      set: function (value) {\n         if (value === undefined) value = 0;\n         this._referenceEdge = value;\n         this._m_id._key = (this._m_id._key & 0xffffff00) | (this._referenceEdge & 0x000000ff);\n      }\n   });\n   Object.defineProperty(Features.prototype, 'incidentEdge', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n         return this._incidentEdge;\n      }\n   });\n   Object.defineProperty(Features.prototype, 'incidentEdge', {\n      enumerable: false,\n      configurable: true,\n      set: function (value) {\n         if (value === undefined) value = 0;\n         this._incidentEdge = value;\n         this._m_id._key = (this._m_id._key & 0xffff00ff) | ((this._incidentEdge << 8) & 0x0000ff00);\n      }\n   });\n   Object.defineProperty(Features.prototype, 'incidentVertex', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n         return this._incidentVertex;\n      }\n   });\n   Object.defineProperty(Features.prototype, 'incidentVertex', {\n      enumerable: false,\n      configurable: true,\n      set: function (value) {\n         if (value === undefined) value = 0;\n         this._incidentVertex = value;\n         this._m_id._key = (this._m_id._key & 0xff00ffff) | ((this._incidentVertex << 16) & 0x00ff0000);\n      }\n   });\n   Object.defineProperty(Features.prototype, 'flip', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n         return this._flip;\n      }\n   });\n   Object.defineProperty(Features.prototype, 'flip', {\n      enumerable: false,\n      configurable: true,\n      set: function (value) {\n         if (value === undefined) value = 0;\n         this._flip = value;\n         this._m_id._key = (this._m_id._key & 0x00ffffff) | ((this._flip << 24) & 0xff000000);\n      }\n   });\n})();\n(function () {\n   var b2Color = Box2D.Common.b2Color,\n      b2internal = Box2D.Common.b2internal,\n      b2Settings = Box2D.Common.b2Settings,\n      b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,\n      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,\n      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,\n      b2MassData = Box2D.Collision.Shapes.b2MassData,\n      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,\n      b2Shape = Box2D.Collision.Shapes.b2Shape,\n      b2Mat22 = Box2D.Common.Math.b2Mat22,\n      b2Mat33 = Box2D.Common.Math.b2Mat33,\n      b2Math = Box2D.Common.Math.b2Math,\n      b2Sweep = Box2D.Common.Math.b2Sweep,\n      b2Transform = Box2D.Common.Math.b2Transform,\n      b2Vec2 = Box2D.Common.Math.b2Vec2,\n      b2Vec3 = Box2D.Common.Math.b2Vec3,\n      b2Body = Box2D.Dynamics.b2Body,\n      b2BodyDef = Box2D.Dynamics.b2BodyDef,\n      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,\n      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,\n      b2ContactListener = Box2D.Dynamics.b2ContactListener,\n      b2ContactManager = Box2D.Dynamics.b2ContactManager,\n      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,\n      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,\n      b2FilterData = Box2D.Dynamics.b2FilterData,\n      b2Fixture = Box2D.Dynamics.b2Fixture,\n      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,\n      b2Island = Box2D.Dynamics.b2Island,\n      b2TimeStep = Box2D.Dynamics.b2TimeStep,\n      b2World = Box2D.Dynamics.b2World,\n      b2AABB = Box2D.Collision.b2AABB,\n      b2Bound = Box2D.Collision.b2Bound,\n      b2BoundValues = Box2D.Collision.b2BoundValues,\n      b2Collision = Box2D.Collision.b2Collision,\n      b2ContactID = Box2D.Collision.b2ContactID,\n      b2ContactPoint = Box2D.Collision.b2ContactPoint,\n      b2Distance = Box2D.Collision.b2Distance,\n      b2DistanceInput = Box2D.Collision.b2DistanceInput,\n      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,\n      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,\n      b2DynamicTree = Box2D.Collision.b2DynamicTree,\n      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,\n      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,\n      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,\n      b2Manifold = Box2D.Collision.b2Manifold,\n      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,\n      b2Point = Box2D.Collision.b2Point,\n      b2RayCastInput = Box2D.Collision.b2RayCastInput,\n      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,\n      b2Segment = Box2D.Collision.b2Segment,\n      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,\n      b2Simplex = Box2D.Collision.b2Simplex,\n      b2SimplexCache = Box2D.Collision.b2SimplexCache,\n      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,\n      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,\n      b2TOIInput = Box2D.Collision.b2TOIInput,\n      b2WorldManifold = Box2D.Collision.b2WorldManifold,\n      ClipVertex = Box2D.Collision.ClipVertex,\n      Features = Box2D.Collision.Features,\n      IBroadPhase = Box2D.Collision.IBroadPhase;\n\n   Box2D.inherit(b2CircleShape, Box2D.Collision.Shapes.b2Shape);\n   b2CircleShape.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;\n   b2CircleShape.b2CircleShape = function () {\n      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);\n      this.m_p = new b2Vec2();\n   };\n   b2CircleShape.prototype.Copy = function () {\n      var s = new b2CircleShape();\n      s.Set(this);\n      return s;\n   }\n   b2CircleShape.prototype.Set = function (other) {\n      this.__super.Set.call(this, other);\n      if (Box2D.is(other, b2CircleShape)) {\n         var other2 = (other instanceof b2CircleShape ? other : null);\n         this.m_p.SetV(other2.m_p);\n      }\n   }\n   b2CircleShape.prototype.TestPoint = function (transform, p) {\n      var tMat = transform.R;\n      var dX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);\n      var dY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);\n      dX = p.x - dX;\n      dY = p.y - dY;\n      return (dX * dX + dY * dY) <= this.m_radius * this.m_radius;\n   }\n   b2CircleShape.prototype.RayCast = function (output, input, transform) {\n      var tMat = transform.R;\n      var positionX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);\n      var positionY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);\n      var sX = input.p1.x - positionX;\n      var sY = input.p1.y - positionY;\n      var b = (sX * sX + sY * sY) - this.m_radius * this.m_radius;\n      var rX = input.p2.x - input.p1.x;\n      var rY = input.p2.y - input.p1.y;\n      var c = (sX * rX + sY * rY);\n      var rr = (rX * rX + rY * rY);\n      var sigma = c * c - rr * b;\n      if (sigma < 0.0 || rr < Number.MIN_VALUE) {\n         return false;\n      }\n      var a = (-(c + Math.sqrt(sigma)));\n      if (0.0 <= a && a <= input.maxFraction * rr) {\n         a /= rr;\n         output.fraction = a;\n         output.normal.x = sX + a * rX;\n         output.normal.y = sY + a * rY;\n         output.normal.Normalize();\n         return true;\n      }\n      return false;\n   }\n   b2CircleShape.prototype.ComputeAABB = function (aabb, transform) {\n      var tMat = transform.R;\n      var pX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);\n      var pY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);\n      aabb.lowerBound.Set(pX - this.m_radius, pY - this.m_radius);\n      aabb.upperBound.Set(pX + this.m_radius, pY + this.m_radius);\n   }\n   b2CircleShape.prototype.ComputeMass = function (massData, density) {\n      if (density === undefined) density = 0;\n      massData.mass = density * b2Settings.b2_pi * this.m_radius * this.m_radius;\n      massData.center.SetV(this.m_p);\n      massData.I = massData.mass * (0.5 * this.m_radius * this.m_radius + (this.m_p.x * this.m_p.x + this.m_p.y * this.m_p.y));\n   }\n   b2CircleShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {\n      if (offset === undefined) offset = 0;\n      var p = b2Math.MulX(xf, this.m_p);\n      var l = (-(b2Math.Dot(normal, p) - offset));\n      if (l < (-this.m_radius) + Number.MIN_VALUE) {\n         return 0;\n      }\n      if (l > this.m_radius) {\n         c.SetV(p);\n         return Math.PI * this.m_radius * this.m_radius;\n      }\n      var r2 = this.m_radius * this.m_radius;\n      var l2 = l * l;\n      var area = r2 * (Math.asin(l / this.m_radius) + Math.PI / 2) + l * Math.sqrt(r2 - l2);\n      var com = (-2 / 3 * Math.pow(r2 - l2, 1.5) / area);\n      c.x = p.x + normal.x * com;\n      c.y = p.y + normal.y * com;\n      return area;\n   }\n   b2CircleShape.prototype.GetLocalPosition = function () {\n      return this.m_p;\n   }\n   b2CircleShape.prototype.SetLocalPosition = function (position) {\n      this.m_p.SetV(position);\n   }\n   b2CircleShape.prototype.GetRadius = function () {\n      return this.m_radius;\n   }\n   b2CircleShape.prototype.SetRadius = function (radius) {\n      if (radius === undefined) radius = 0;\n      this.m_radius = radius;\n   }\n   b2CircleShape.prototype.b2CircleShape = function (radius) {\n      if (radius === undefined) radius = 0;\n      this.__super.b2Shape.call(this);\n      this.m_type = b2Shape.e_circleShape;\n      this.m_radius = radius;\n   }\n   b2EdgeChainDef.b2EdgeChainDef = function () {};\n   b2EdgeChainDef.prototype.b2EdgeChainDef = function () {\n      this.vertexCount = 0;\n      this.isALoop = true;\n      this.vertices = [];\n   }\n   Box2D.inherit(b2EdgeShape, Box2D.Collision.Shapes.b2Shape);\n   b2EdgeShape.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;\n   b2EdgeShape.b2EdgeShape = function () {\n      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);\n      this.s_supportVec = new b2Vec2();\n      this.m_v1 = new b2Vec2();\n      this.m_v2 = new b2Vec2();\n      this.m_coreV1 = new b2Vec2();\n      this.m_coreV2 = new b2Vec2();\n      this.m_normal = new b2Vec2();\n      this.m_direction = new b2Vec2();\n      this.m_cornerDir1 = new b2Vec2();\n      this.m_cornerDir2 = new b2Vec2();\n   };\n   b2EdgeShape.prototype.TestPoint = function (transform, p) {\n      return false;\n   }\n   b2EdgeShape.prototype.RayCast = function (output, input, transform) {\n      var tMat;\n      var rX = input.p2.x - input.p1.x;\n      var rY = input.p2.y - input.p1.y;\n      tMat = transform.R;\n      var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);\n      var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);\n      var nX = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y) - v1Y;\n      var nY = (-(transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y) - v1X));\n      var k_slop = 100.0 * Number.MIN_VALUE;\n      var denom = (-(rX * nX + rY * nY));\n      if (denom > k_slop) {\n         var bX = input.p1.x - v1X;\n         var bY = input.p1.y - v1Y;\n         var a = (bX * nX + bY * nY);\n         if (0.0 <= a && a <= input.maxFraction * denom) {\n            var mu2 = (-rX * bY) + rY * bX;\n            if ((-k_slop * denom) <= mu2 && mu2 <= denom * (1.0 + k_slop)) {\n               a /= denom;\n               output.fraction = a;\n               var nLen = Math.sqrt(nX * nX + nY * nY);\n               output.normal.x = nX / nLen;\n               output.normal.y = nY / nLen;\n               return true;\n            }\n         }\n      }\n      return false;\n   }\n   b2EdgeShape.prototype.ComputeAABB = function (aabb, transform) {\n      var tMat = transform.R;\n      var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);\n      var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);\n      var v2X = transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y);\n      var v2Y = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y);\n      if (v1X < v2X) {\n         aabb.lowerBound.x = v1X;\n         aabb.upperBound.x = v2X;\n      }\n      else {\n         aabb.lowerBound.x = v2X;\n         aabb.upperBound.x = v1X;\n      }\n      if (v1Y < v2Y) {\n         aabb.lowerBound.y = v1Y;\n         aabb.upperBound.y = v2Y;\n      }\n      else {\n         aabb.lowerBound.y = v2Y;\n         aabb.upperBound.y = v1Y;\n      }\n   }\n   b2EdgeShape.prototype.ComputeMass = function (massData, density) {\n      if (density === undefined) density = 0;\n      massData.mass = 0;\n      massData.center.SetV(this.m_v1);\n      massData.I = 0;\n   }\n   b2EdgeShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {\n      if (offset === undefined) offset = 0;\n      var v0 = new b2Vec2(normal.x * offset, normal.y * offset);\n      var v1 = b2Math.MulX(xf, this.m_v1);\n      var v2 = b2Math.MulX(xf, this.m_v2);\n      var d1 = b2Math.Dot(normal, v1) - offset;\n      var d2 = b2Math.Dot(normal, v2) - offset;\n      if (d1 > 0) {\n         if (d2 > 0) {\n            return 0;\n         }\n         else {\n            v1.x = (-d2 / (d1 - d2) * v1.x) + d1 / (d1 - d2) * v2.x;\n            v1.y = (-d2 / (d1 - d2) * v1.y) + d1 / (d1 - d2) * v2.y;\n         }\n      }\n      else {\n         if (d2 > 0) {\n            v2.x = (-d2 / (d1 - d2) * v1.x) + d1 / (d1 - d2) * v2.x;\n            v2.y = (-d2 / (d1 - d2) * v1.y) + d1 / (d1 - d2) * v2.y;\n         }\n         else {}\n      }\n      c.x = (v0.x + v1.x + v2.x) / 3;\n      c.y = (v0.y + v1.y + v2.y) / 3;\n      return 0.5 * ((v1.x - v0.x) * (v2.y - v0.y) - (v1.y - v0.y) * (v2.x - v0.x));\n   }\n   b2EdgeShape.prototype.GetLength = function () {\n      return this.m_length;\n   }\n   b2EdgeShape.prototype.GetVertex1 = function () {\n      return this.m_v1;\n   }\n   b2EdgeShape.prototype.GetVertex2 = function () {\n      return this.m_v2;\n   }\n   b2EdgeShape.prototype.GetCoreVertex1 = function () {\n      return this.m_coreV1;\n   }\n   b2EdgeShape.prototype.GetCoreVertex2 = function () {\n      return this.m_coreV2;\n   }\n   b2EdgeShape.prototype.GetNormalVector = function () {\n      return this.m_normal;\n   }\n   b2EdgeShape.prototype.GetDirectionVector = function () {\n      return this.m_direction;\n   }\n   b2EdgeShape.prototype.GetCorner1Vector = function () {\n      return this.m_cornerDir1;\n   }\n   b2EdgeShape.prototype.GetCorner2Vector = function () {\n      return this.m_cornerDir2;\n   }\n   b2EdgeShape.prototype.Corner1IsConvex = function () {\n      return this.m_cornerConvex1;\n   }\n   b2EdgeShape.prototype.Corner2IsConvex = function () {\n      return this.m_cornerConvex2;\n   }\n   b2EdgeShape.prototype.GetFirstVertex = function (xf) {\n      var tMat = xf.R;\n      return new b2Vec2(xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y), xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y));\n   }\n   b2EdgeShape.prototype.GetNextEdge = function () {\n      return this.m_nextEdge;\n   }\n   b2EdgeShape.prototype.GetPrevEdge = function () {\n      return this.m_prevEdge;\n   }\n   b2EdgeShape.prototype.Support = function (xf, dX, dY) {\n      if (dX === undefined) dX = 0;\n      if (dY === undefined) dY = 0;\n      var tMat = xf.R;\n      var v1X = xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y);\n      var v1Y = xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y);\n      var v2X = xf.position.x + (tMat.col1.x * this.m_coreV2.x + tMat.col2.x * this.m_coreV2.y);\n      var v2Y = xf.position.y + (tMat.col1.y * this.m_coreV2.x + tMat.col2.y * this.m_coreV2.y);\n      if ((v1X * dX + v1Y * dY) > (v2X * dX + v2Y * dY)) {\n         this.s_supportVec.x = v1X;\n         this.s_supportVec.y = v1Y;\n      }\n      else {\n         this.s_supportVec.x = v2X;\n         this.s_supportVec.y = v2Y;\n      }\n      return this.s_supportVec;\n   }\n   b2EdgeShape.prototype.b2EdgeShape = function (v1, v2) {\n      this.__super.b2Shape.call(this);\n      this.m_type = b2Shape.e_edgeShape;\n      this.m_prevEdge = null;\n      this.m_nextEdge = null;\n      this.m_v1 = v1;\n      this.m_v2 = v2;\n      this.m_direction.Set(this.m_v2.x - this.m_v1.x, this.m_v2.y - this.m_v1.y);\n      this.m_length = this.m_direction.Normalize();\n      this.m_normal.Set(this.m_direction.y, (-this.m_direction.x));\n      this.m_coreV1.Set((-b2Settings.b2_toiSlop * (this.m_normal.x - this.m_direction.x)) + this.m_v1.x, (-b2Settings.b2_toiSlop * (this.m_normal.y - this.m_direction.y)) + this.m_v1.y);\n      this.m_coreV2.Set((-b2Settings.b2_toiSlop * (this.m_normal.x + this.m_direction.x)) + this.m_v2.x, (-b2Settings.b2_toiSlop * (this.m_normal.y + this.m_direction.y)) + this.m_v2.y);\n      this.m_cornerDir1 = this.m_normal;\n      this.m_cornerDir2.Set((-this.m_normal.x), (-this.m_normal.y));\n   }\n   b2EdgeShape.prototype.SetPrevEdge = function (edge, core, cornerDir, convex) {\n      this.m_prevEdge = edge;\n      this.m_coreV1 = core;\n      this.m_cornerDir1 = cornerDir;\n      this.m_cornerConvex1 = convex;\n   }\n   b2EdgeShape.prototype.SetNextEdge = function (edge, core, cornerDir, convex) {\n      this.m_nextEdge = edge;\n      this.m_coreV2 = core;\n      this.m_cornerDir2 = cornerDir;\n      this.m_cornerConvex2 = convex;\n   }\n   b2MassData.b2MassData = function () {\n      this.mass = 0.0;\n      this.center = new b2Vec2(0, 0);\n      this.I = 0.0;\n   };\n   Box2D.inherit(b2PolygonShape, Box2D.Collision.Shapes.b2Shape);\n   b2PolygonShape.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;\n   b2PolygonShape.b2PolygonShape = function () {\n      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);\n   };\n   b2PolygonShape.prototype.Copy = function () {\n      var s = new b2PolygonShape();\n      s.Set(this);\n      return s;\n   }\n   b2PolygonShape.prototype.Set = function (other) {\n      this.__super.Set.call(this, other);\n      if (Box2D.is(other, b2PolygonShape)) {\n         var other2 = (other instanceof b2PolygonShape ? other : null);\n         this.m_centroid.SetV(other2.m_centroid);\n         this.m_vertexCount = other2.m_vertexCount;\n         this.Reserve(this.m_vertexCount);\n         for (var i = 0; i < this.m_vertexCount; i++) {\n            this.m_vertices[i].SetV(other2.m_vertices[i]);\n            this.m_normals[i].SetV(other2.m_normals[i]);\n         }\n      }\n   }\n   b2PolygonShape.prototype.SetAsArray = function (vertices, vertexCount) {\n      if (vertexCount === undefined) vertexCount = 0;\n      var v = new Vector();\n      var i = 0,\n         tVec;\n      for (i = 0;\n      i < vertices.length; ++i) {\n         tVec = vertices[i];\n         v.push(tVec);\n      }\n      this.SetAsVector(v, vertexCount);\n   }\n   b2PolygonShape.AsArray = function (vertices, vertexCount) {\n      if (vertexCount === undefined) vertexCount = 0;\n      var polygonShape = new b2PolygonShape();\n      polygonShape.SetAsArray(vertices, vertexCount);\n      return polygonShape;\n   }\n   b2PolygonShape.prototype.SetAsVector = function (vertices, vertexCount) {\n      if (vertexCount === undefined) vertexCount = 0;\n      if (vertexCount == 0) vertexCount = vertices.length;\n      b2Settings.b2Assert(2 <= vertexCount);\n      this.m_vertexCount = vertexCount;\n      this.Reserve(vertexCount);\n      var i = 0;\n      for (i = 0;\n      i < this.m_vertexCount; i++) {\n         this.m_vertices[i].SetV(vertices[i]);\n      }\n      for (i = 0;\n      i < this.m_vertexCount; ++i) {\n         var i1 = parseInt(i);\n         var i2 = parseInt(i + 1 < this.m_vertexCount ? i + 1 : 0);\n         var edge = b2Math.SubtractVV(this.m_vertices[i2], this.m_vertices[i1]);\n         b2Settings.b2Assert(edge.LengthSquared() > Number.MIN_VALUE);\n         this.m_normals[i].SetV(b2Math.CrossVF(edge, 1.0));\n         this.m_normals[i].Normalize();\n      }\n      this.m_centroid = b2PolygonShape.ComputeCentroid(this.m_vertices, this.m_vertexCount);\n   }\n   b2PolygonShape.AsVector = function (vertices, vertexCount) {\n      if (vertexCount === undefined) vertexCount = 0;\n      var polygonShape = new b2PolygonShape();\n      polygonShape.SetAsVector(vertices, vertexCount);\n      return polygonShape;\n   }\n   b2PolygonShape.prototype.SetAsBox = function (hx, hy) {\n      if (hx === undefined) hx = 0;\n      if (hy === undefined) hy = 0;\n      this.m_vertexCount = 4;\n      this.Reserve(4);\n      this.m_vertices[0].Set((-hx), (-hy));\n      this.m_vertices[1].Set(hx, (-hy));\n      this.m_vertices[2].Set(hx, hy);\n      this.m_vertices[3].Set((-hx), hy);\n      this.m_normals[0].Set(0.0, (-1.0));\n      this.m_normals[1].Set(1.0, 0.0);\n      this.m_normals[2].Set(0.0, 1.0);\n      this.m_normals[3].Set((-1.0), 0.0);\n      this.m_centroid.SetZero();\n   }\n   b2PolygonShape.AsBox = function (hx, hy) {\n      if (hx === undefined) hx = 0;\n      if (hy === undefined) hy = 0;\n      var polygonShape = new b2PolygonShape();\n      polygonShape.SetAsBox(hx, hy);\n      return polygonShape;\n   }\n   b2PolygonShape.prototype.SetAsOrientedBox = function (hx, hy, center, angle) {\n      if (hx === undefined) hx = 0;\n      if (hy === undefined) hy = 0;\n      if (center === undefined) center = null;\n      if (angle === undefined) angle = 0.0;\n      this.m_vertexCount = 4;\n      this.Reserve(4);\n      this.m_vertices[0].Set((-hx), (-hy));\n      this.m_vertices[1].Set(hx, (-hy));\n      this.m_vertices[2].Set(hx, hy);\n      this.m_vertices[3].Set((-hx), hy);\n      this.m_normals[0].Set(0.0, (-1.0));\n      this.m_normals[1].Set(1.0, 0.0);\n      this.m_normals[2].Set(0.0, 1.0);\n      this.m_normals[3].Set((-1.0), 0.0);\n      this.m_centroid = center;\n      var xf = new b2Transform();\n      xf.position = center;\n      xf.R.Set(angle);\n      for (var i = 0; i < this.m_vertexCount; ++i) {\n         this.m_vertices[i] = b2Math.MulX(xf, this.m_vertices[i]);\n         this.m_normals[i] = b2Math.MulMV(xf.R, this.m_normals[i]);\n      }\n   }\n   b2PolygonShape.AsOrientedBox = function (hx, hy, center, angle) {\n      if (hx === undefined) hx = 0;\n      if (hy === undefined) hy = 0;\n      if (center === undefined) center = null;\n      if (angle === undefined) angle = 0.0;\n      var polygonShape = new b2PolygonShape();\n      polygonShape.SetAsOrientedBox(hx, hy, center, angle);\n      return polygonShape;\n   }\n   b2PolygonShape.prototype.SetAsEdge = function (v1, v2) {\n      this.m_vertexCount = 2;\n      this.Reserve(2);\n      this.m_vertices[0].SetV(v1);\n      this.m_vertices[1].SetV(v2);\n      this.m_centroid.x = 0.5 * (v1.x + v2.x);\n      this.m_centroid.y = 0.5 * (v1.y + v2.y);\n      this.m_normals[0] = b2Math.CrossVF(b2Math.SubtractVV(v2, v1), 1.0);\n      this.m_normals[0].Normalize();\n      this.m_normals[1].x = (-this.m_normals[0].x);\n      this.m_normals[1].y = (-this.m_normals[0].y);\n   }\n   b2PolygonShape.AsEdge = function (v1, v2) {\n      var polygonShape = new b2PolygonShape();\n      polygonShape.SetAsEdge(v1, v2);\n      return polygonShape;\n   }\n   b2PolygonShape.prototype.TestPoint = function (xf, p) {\n      var tVec;\n      var tMat = xf.R;\n      var tX = p.x - xf.position.x;\n      var tY = p.y - xf.position.y;\n      var pLocalX = (tX * tMat.col1.x + tY * tMat.col1.y);\n      var pLocalY = (tX * tMat.col2.x + tY * tMat.col2.y);\n      for (var i = 0; i < this.m_vertexCount; ++i) {\n         tVec = this.m_vertices[i];\n         tX = pLocalX - tVec.x;\n         tY = pLocalY - tVec.y;\n         tVec = this.m_normals[i];\n         var dot = (tVec.x * tX + tVec.y * tY);\n         if (dot > 0.0) {\n            return false;\n         }\n      }\n      return true;\n   }\n   b2PolygonShape.prototype.RayCast = function (output, input, transform) {\n      var lower = 0.0;\n      var upper = input.maxFraction;\n      var tX = 0;\n      var tY = 0;\n      var tMat;\n      var tVec;\n      tX = input.p1.x - transform.position.x;\n      tY = input.p1.y - transform.position.y;\n      tMat = transform.R;\n      var p1X = (tX * tMat.col1.x + tY * tMat.col1.y);\n      var p1Y = (tX * tMat.col2.x + tY * tMat.col2.y);\n      tX = input.p2.x - transform.position.x;\n      tY = input.p2.y - transform.position.y;\n      tMat = transform.R;\n      var p2X = (tX * tMat.col1.x + tY * tMat.col1.y);\n      var p2Y = (tX * tMat.col2.x + tY * tMat.col2.y);\n      var dX = p2X - p1X;\n      var dY = p2Y - p1Y;\n      var index = parseInt((-1));\n      for (var i = 0; i < this.m_vertexCount; ++i) {\n         tVec = this.m_vertices[i];\n         tX = tVec.x - p1X;\n         tY = tVec.y - p1Y;\n         tVec = this.m_normals[i];\n         var numerator = (tVec.x * tX + tVec.y * tY);\n         var denominator = (tVec.x * dX + tVec.y * dY);\n         if (denominator == 0.0) {\n            if (numerator < 0.0) {\n               return false;\n            }\n         }\n         else {\n            if (denominator < 0.0 && numerator < lower * denominator) {\n               lower = numerator / denominator;\n               index = i;\n            }\n            else if (denominator > 0.0 && numerator < upper * denominator) {\n               upper = numerator / denominator;\n            }\n         }\n         if (upper < lower - Number.MIN_VALUE) {\n            return false;\n         }\n      }\n      if (index >= 0) {\n         output.fraction = lower;\n         tMat = transform.R;\n         tVec = this.m_normals[index];\n         output.normal.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n         output.normal.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n         return true;\n      }\n      return false;\n   }\n   b2PolygonShape.prototype.ComputeAABB = function (aabb, xf) {\n      var tMat = xf.R;\n      var tVec = this.m_vertices[0];\n      var lowerX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      var lowerY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      var upperX = lowerX;\n      var upperY = lowerY;\n      for (var i = 1; i < this.m_vertexCount; ++i) {\n         tVec = this.m_vertices[i];\n         var vX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n         var vY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n         lowerX = lowerX < vX ? lowerX : vX;\n         lowerY = lowerY < vY ? lowerY : vY;\n         upperX = upperX > vX ? upperX : vX;\n         upperY = upperY > vY ? upperY : vY;\n      }\n      aabb.lowerBound.x = lowerX - this.m_radius;\n      aabb.lowerBound.y = lowerY - this.m_radius;\n      aabb.upperBound.x = upperX + this.m_radius;\n      aabb.upperBound.y = upperY + this.m_radius;\n   }\n   b2PolygonShape.prototype.ComputeMass = function (massData, density) {\n      if (density === undefined) density = 0;\n      if (this.m_vertexCount == 2) {\n         massData.center.x = 0.5 * (this.m_vertices[0].x + this.m_vertices[1].x);\n         massData.center.y = 0.5 * (this.m_vertices[0].y + this.m_vertices[1].y);\n         massData.mass = 0.0;\n         massData.I = 0.0;\n         return;\n      }\n      var centerX = 0.0;\n      var centerY = 0.0;\n      var area = 0.0;\n      var I = 0.0;\n      var p1X = 0.0;\n      var p1Y = 0.0;\n      var k_inv3 = 1.0 / 3.0;\n      for (var i = 0; i < this.m_vertexCount; ++i) {\n         var p2 = this.m_vertices[i];\n         var p3 = i + 1 < this.m_vertexCount ? this.m_vertices[parseInt(i + 1)] : this.m_vertices[0];\n         var e1X = p2.x - p1X;\n         var e1Y = p2.y - p1Y;\n         var e2X = p3.x - p1X;\n         var e2Y = p3.y - p1Y;\n         var D = e1X * e2Y - e1Y * e2X;\n         var triangleArea = 0.5 * D;area += triangleArea;\n         centerX += triangleArea * k_inv3 * (p1X + p2.x + p3.x);\n         centerY += triangleArea * k_inv3 * (p1Y + p2.y + p3.y);\n         var px = p1X;\n         var py = p1Y;\n         var ex1 = e1X;\n         var ey1 = e1Y;\n         var ex2 = e2X;\n         var ey2 = e2Y;\n         var intx2 = k_inv3 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px;\n         var inty2 = k_inv3 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py;I += D * (intx2 + inty2);\n      }\n      massData.mass = density * area;\n      centerX *= 1.0 / area;\n      centerY *= 1.0 / area;\n      massData.center.Set(centerX, centerY);\n      massData.I = density * I;\n   }\n   b2PolygonShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {\n      if (offset === undefined) offset = 0;\n      var normalL = b2Math.MulTMV(xf.R, normal);\n      var offsetL = offset - b2Math.Dot(normal, xf.position);\n      var depths = new Vector_a2j_Number();\n      var diveCount = 0;\n      var intoIndex = parseInt((-1));\n      var outoIndex = parseInt((-1));\n      var lastSubmerged = false;\n      var i = 0;\n      for (i = 0;\n      i < this.m_vertexCount; ++i) {\n         depths[i] = b2Math.Dot(normalL, this.m_vertices[i]) - offsetL;\n         var isSubmerged = depths[i] < (-Number.MIN_VALUE);\n         if (i > 0) {\n            if (isSubmerged) {\n               if (!lastSubmerged) {\n                  intoIndex = i - 1;\n                  diveCount++;\n               }\n            }\n            else {\n               if (lastSubmerged) {\n                  outoIndex = i - 1;\n                  diveCount++;\n               }\n            }\n         }\n         lastSubmerged = isSubmerged;\n      }\n      switch (diveCount) {\n      case 0:\n         if (lastSubmerged) {\n            var md = new b2MassData();\n            this.ComputeMass(md, 1);\n            c.SetV(b2Math.MulX(xf, md.center));\n            return md.mass;\n         }\n         else {\n            return 0;\n         }\n         break;\n      case 1:\n         if (intoIndex == (-1)) {\n            intoIndex = this.m_vertexCount - 1;\n         }\n         else {\n            outoIndex = this.m_vertexCount - 1;\n         }\n         break;\n      }\n      var intoIndex2 = parseInt((intoIndex + 1) % this.m_vertexCount);\n      var outoIndex2 = parseInt((outoIndex + 1) % this.m_vertexCount);\n      var intoLamdda = (0 - depths[intoIndex]) / (depths[intoIndex2] - depths[intoIndex]);\n      var outoLamdda = (0 - depths[outoIndex]) / (depths[outoIndex2] - depths[outoIndex]);\n      var intoVec = new b2Vec2(this.m_vertices[intoIndex].x * (1 - intoLamdda) + this.m_vertices[intoIndex2].x * intoLamdda, this.m_vertices[intoIndex].y * (1 - intoLamdda) + this.m_vertices[intoIndex2].y * intoLamdda);\n      var outoVec = new b2Vec2(this.m_vertices[outoIndex].x * (1 - outoLamdda) + this.m_vertices[outoIndex2].x * outoLamdda, this.m_vertices[outoIndex].y * (1 - outoLamdda) + this.m_vertices[outoIndex2].y * outoLamdda);\n      var area = 0;\n      var center = new b2Vec2();\n      var p2 = this.m_vertices[intoIndex2];\n      var p3;\n      i = intoIndex2;\n      while (i != outoIndex2) {\n         i = (i + 1) % this.m_vertexCount;\n         if (i == outoIndex2) p3 = outoVec;\n         else p3 = this.m_vertices[i];\n         var triangleArea = 0.5 * ((p2.x - intoVec.x) * (p3.y - intoVec.y) - (p2.y - intoVec.y) * (p3.x - intoVec.x));\n         area += triangleArea;\n         center.x += triangleArea * (intoVec.x + p2.x + p3.x) / 3;\n         center.y += triangleArea * (intoVec.y + p2.y + p3.y) / 3;\n         p2 = p3;\n      }\n      center.Multiply(1 / area);\n      c.SetV(b2Math.MulX(xf, center));\n      return area;\n   }\n   b2PolygonShape.prototype.GetVertexCount = function () {\n      return this.m_vertexCount;\n   }\n   b2PolygonShape.prototype.GetVertices = function () {\n      return this.m_vertices;\n   }\n   b2PolygonShape.prototype.GetNormals = function () {\n      return this.m_normals;\n   }\n   b2PolygonShape.prototype.GetSupport = function (d) {\n      var bestIndex = 0;\n      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;\n      for (var i = 1; i < this.m_vertexCount; ++i) {\n         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;\n         if (value > bestValue) {\n            bestIndex = i;\n            bestValue = value;\n         }\n      }\n      return bestIndex;\n   }\n   b2PolygonShape.prototype.GetSupportVertex = function (d) {\n      var bestIndex = 0;\n      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;\n      for (var i = 1; i < this.m_vertexCount; ++i) {\n         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;\n         if (value > bestValue) {\n            bestIndex = i;\n            bestValue = value;\n         }\n      }\n      return this.m_vertices[bestIndex];\n   }\n   b2PolygonShape.prototype.Validate = function () {\n      return false;\n   }\n   b2PolygonShape.prototype.b2PolygonShape = function () {\n      this.__super.b2Shape.call(this);\n      this.m_type = b2Shape.e_polygonShape;\n      this.m_centroid = new b2Vec2();\n      this.m_vertices = new Vector();\n      this.m_normals = new Vector();\n   }\n   b2PolygonShape.prototype.Reserve = function (count) {\n      if (count === undefined) count = 0;\n      for (var i = parseInt(this.m_vertices.length); i < count; i++) {\n         this.m_vertices[i] = new b2Vec2();\n         this.m_normals[i] = new b2Vec2();\n      }\n   }\n   b2PolygonShape.ComputeCentroid = function (vs, count) {\n      if (count === undefined) count = 0;\n      var c = new b2Vec2();\n      var area = 0.0;\n      var p1X = 0.0;\n      var p1Y = 0.0;\n      var inv3 = 1.0 / 3.0;\n      for (var i = 0; i < count; ++i) {\n         var p2 = vs[i];\n         var p3 = i + 1 < count ? vs[parseInt(i + 1)] : vs[0];\n         var e1X = p2.x - p1X;\n         var e1Y = p2.y - p1Y;\n         var e2X = p3.x - p1X;\n         var e2Y = p3.y - p1Y;\n         var D = (e1X * e2Y - e1Y * e2X);\n         var triangleArea = 0.5 * D;area += triangleArea;\n         c.x += triangleArea * inv3 * (p1X + p2.x + p3.x);\n         c.y += triangleArea * inv3 * (p1Y + p2.y + p3.y);\n      }\n      c.x *= 1.0 / area;\n      c.y *= 1.0 / area;\n      return c;\n   }\n   b2PolygonShape.ComputeOBB = function (obb, vs, count) {\n      if (count === undefined) count = 0;\n      var i = 0;\n      var p = new Vector(count + 1);\n      for (i = 0;\n      i < count; ++i) {\n         p[i] = vs[i];\n      }\n      p[count] = p[0];\n      var minArea = Number.MAX_VALUE;\n      for (i = 1;\n      i <= count; ++i) {\n         var root = p[parseInt(i - 1)];\n         var uxX = p[i].x - root.x;\n         var uxY = p[i].y - root.y;\n         var length = Math.sqrt(uxX * uxX + uxY * uxY);\n         uxX /= length;\n         uxY /= length;\n         var uyX = (-uxY);\n         var uyY = uxX;\n         var lowerX = Number.MAX_VALUE;\n         var lowerY = Number.MAX_VALUE;\n         var upperX = (-Number.MAX_VALUE);\n         var upperY = (-Number.MAX_VALUE);\n         for (var j = 0; j < count; ++j) {\n            var dX = p[j].x - root.x;\n            var dY = p[j].y - root.y;\n            var rX = (uxX * dX + uxY * dY);\n            var rY = (uyX * dX + uyY * dY);\n            if (rX < lowerX) lowerX = rX;\n            if (rY < lowerY) lowerY = rY;\n            if (rX > upperX) upperX = rX;\n            if (rY > upperY) upperY = rY;\n         }\n         var area = (upperX - lowerX) * (upperY - lowerY);\n         if (area < 0.95 * minArea) {\n            minArea = area;\n            obb.R.col1.x = uxX;\n            obb.R.col1.y = uxY;\n            obb.R.col2.x = uyX;\n            obb.R.col2.y = uyY;\n            var centerX = 0.5 * (lowerX + upperX);\n            var centerY = 0.5 * (lowerY + upperY);\n            var tMat = obb.R;\n            obb.center.x = root.x + (tMat.col1.x * centerX + tMat.col2.x * centerY);\n            obb.center.y = root.y + (tMat.col1.y * centerX + tMat.col2.y * centerY);\n            obb.extents.x = 0.5 * (upperX - lowerX);\n            obb.extents.y = 0.5 * (upperY - lowerY);\n         }\n      }\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Collision.Shapes.b2PolygonShape.s_mat = new b2Mat22();\n   });\n   b2Shape.b2Shape = function () {};\n   b2Shape.prototype.Copy = function () {\n      return null;\n   }\n   b2Shape.prototype.Set = function (other) {\n      this.m_radius = other.m_radius;\n   }\n   b2Shape.prototype.GetType = function () {\n      return this.m_type;\n   }\n   b2Shape.prototype.TestPoint = function (xf, p) {\n      return false;\n   }\n   b2Shape.prototype.RayCast = function (output, input, transform) {\n      return false;\n   }\n   b2Shape.prototype.ComputeAABB = function (aabb, xf) {}\n   b2Shape.prototype.ComputeMass = function (massData, density) {\n      if (density === undefined) density = 0;\n   }\n   b2Shape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {\n      if (offset === undefined) offset = 0;\n      return 0;\n   }\n   b2Shape.TestOverlap = function (shape1, transform1, shape2, transform2) {\n      var input = new b2DistanceInput();\n      input.proxyA = new b2DistanceProxy();\n      input.proxyA.Set(shape1);\n      input.proxyB = new b2DistanceProxy();\n      input.proxyB.Set(shape2);\n      input.transformA = transform1;\n      input.transformB = transform2;\n      input.useRadii = true;\n      var simplexCache = new b2SimplexCache();\n      simplexCache.count = 0;\n      var output = new b2DistanceOutput();\n      b2Distance.Distance(output, simplexCache, input);\n      return output.distance < 10.0 * Number.MIN_VALUE;\n   }\n   b2Shape.prototype.b2Shape = function () {\n      this.m_type = b2Shape.e_unknownShape;\n      this.m_radius = b2Settings.b2_linearSlop;\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Collision.Shapes.b2Shape.e_unknownShape = parseInt((-1));\n      Box2D.Collision.Shapes.b2Shape.e_circleShape = 0;\n      Box2D.Collision.Shapes.b2Shape.e_polygonShape = 1;\n      Box2D.Collision.Shapes.b2Shape.e_edgeShape = 2;\n      Box2D.Collision.Shapes.b2Shape.e_shapeTypeCount = 3;\n      Box2D.Collision.Shapes.b2Shape.e_hitCollide = 1;\n      Box2D.Collision.Shapes.b2Shape.e_missCollide = 0;\n      Box2D.Collision.Shapes.b2Shape.e_startsInsideCollide = parseInt((-1));\n   });\n})();\n(function () {\n   var b2Color = Box2D.Common.b2Color,\n      b2internal = Box2D.Common.b2internal,\n      b2Settings = Box2D.Common.b2Settings,\n      b2Mat22 = Box2D.Common.Math.b2Mat22,\n      b2Mat33 = Box2D.Common.Math.b2Mat33,\n      b2Math = Box2D.Common.Math.b2Math,\n      b2Sweep = Box2D.Common.Math.b2Sweep,\n      b2Transform = Box2D.Common.Math.b2Transform,\n      b2Vec2 = Box2D.Common.Math.b2Vec2,\n      b2Vec3 = Box2D.Common.Math.b2Vec3;\n\n   b2Color.b2Color = function () {\n      this._r = 0;\n      this._g = 0;\n      this._b = 0;\n   };\n   b2Color.prototype.b2Color = function (rr, gg, bb) {\n      if (rr === undefined) rr = 0;\n      if (gg === undefined) gg = 0;\n      if (bb === undefined) bb = 0;\n      this._r = Box2D.parseUInt(255 * b2Math.Clamp(rr, 0.0, 1.0));\n      this._g = Box2D.parseUInt(255 * b2Math.Clamp(gg, 0.0, 1.0));\n      this._b = Box2D.parseUInt(255 * b2Math.Clamp(bb, 0.0, 1.0));\n   }\n   b2Color.prototype.Set = function (rr, gg, bb) {\n      if (rr === undefined) rr = 0;\n      if (gg === undefined) gg = 0;\n      if (bb === undefined) bb = 0;\n      this._r = Box2D.parseUInt(255 * b2Math.Clamp(rr, 0.0, 1.0));\n      this._g = Box2D.parseUInt(255 * b2Math.Clamp(gg, 0.0, 1.0));\n      this._b = Box2D.parseUInt(255 * b2Math.Clamp(bb, 0.0, 1.0));\n   }\n   Object.defineProperty(b2Color.prototype, 'r', {\n      enumerable: false,\n      configurable: true,\n      set: function (rr) {\n         if (rr === undefined) rr = 0;\n         this._r = Box2D.parseUInt(255 * b2Math.Clamp(rr, 0.0, 1.0));\n      }\n   });\n   Object.defineProperty(b2Color.prototype, 'g', {\n      enumerable: false,\n      configurable: true,\n      set: function (gg) {\n         if (gg === undefined) gg = 0;\n         this._g = Box2D.parseUInt(255 * b2Math.Clamp(gg, 0.0, 1.0));\n      }\n   });\n   Object.defineProperty(b2Color.prototype, 'b', {\n      enumerable: false,\n      configurable: true,\n      set: function (bb) {\n         if (bb === undefined) bb = 0;\n         this._b = Box2D.parseUInt(255 * b2Math.Clamp(bb, 0.0, 1.0));\n      }\n   });\n   Object.defineProperty(b2Color.prototype, 'color', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n         return (this._r << 16) | (this._g << 8) | (this._b);\n      }\n   });\n   b2Settings.b2Settings = function () {};\n   b2Settings.b2MixFriction = function (friction1, friction2) {\n      if (friction1 === undefined) friction1 = 0;\n      if (friction2 === undefined) friction2 = 0;\n      return Math.sqrt(friction1 * friction2);\n   }\n   b2Settings.b2MixRestitution = function (restitution1, restitution2) {\n      if (restitution1 === undefined) restitution1 = 0;\n      if (restitution2 === undefined) restitution2 = 0;\n      return restitution1 > restitution2 ? restitution1 : restitution2;\n   }\n   b2Settings.b2Assert = function (a) {\n      if (!a) {\n         throw \"Assertion Failed\";\n      }\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Common.b2Settings.VERSION = \"2.1alpha\";\n      Box2D.Common.b2Settings.USHRT_MAX = 0x0000ffff;\n      Box2D.Common.b2Settings.b2_pi = Math.PI;\n      Box2D.Common.b2Settings.b2_maxManifoldPoints = 2;\n      Box2D.Common.b2Settings.b2_aabbExtension = 0.1;\n      Box2D.Common.b2Settings.b2_aabbMultiplier = 2.0;\n      Box2D.Common.b2Settings.b2_polygonRadius = 2.0 * b2Settings.b2_linearSlop;\n      Box2D.Common.b2Settings.b2_linearSlop = 0.005;\n      Box2D.Common.b2Settings.b2_angularSlop = 2.0 / 180.0 * b2Settings.b2_pi;\n      Box2D.Common.b2Settings.b2_toiSlop = 8.0 * b2Settings.b2_linearSlop;\n      Box2D.Common.b2Settings.b2_maxTOIContactsPerIsland = 32;\n      Box2D.Common.b2Settings.b2_maxTOIJointsPerIsland = 32;\n      Box2D.Common.b2Settings.b2_velocityThreshold = 1.0;\n      Box2D.Common.b2Settings.b2_maxLinearCorrection = 0.2;\n      Box2D.Common.b2Settings.b2_maxAngularCorrection = 8.0 / 180.0 * b2Settings.b2_pi;\n      Box2D.Common.b2Settings.b2_maxTranslation = 2.0;\n      Box2D.Common.b2Settings.b2_maxTranslationSquared = b2Settings.b2_maxTranslation * b2Settings.b2_maxTranslation;\n      Box2D.Common.b2Settings.b2_maxRotation = 0.5 * b2Settings.b2_pi;\n      Box2D.Common.b2Settings.b2_maxRotationSquared = b2Settings.b2_maxRotation * b2Settings.b2_maxRotation;\n      Box2D.Common.b2Settings.b2_contactBaumgarte = 0.2;\n      Box2D.Common.b2Settings.b2_timeToSleep = 0.5;\n      Box2D.Common.b2Settings.b2_linearSleepTolerance = 0.01;\n      Box2D.Common.b2Settings.b2_angularSleepTolerance = 2.0 / 180.0 * b2Settings.b2_pi;\n   });\n})();\n(function () {\n   var b2AABB = Box2D.Collision.b2AABB,\n      b2Color = Box2D.Common.b2Color,\n      b2internal = Box2D.Common.b2internal,\n      b2Settings = Box2D.Common.b2Settings,\n      b2Mat22 = Box2D.Common.Math.b2Mat22,\n      b2Mat33 = Box2D.Common.Math.b2Mat33,\n      b2Math = Box2D.Common.Math.b2Math,\n      b2Sweep = Box2D.Common.Math.b2Sweep,\n      b2Transform = Box2D.Common.Math.b2Transform,\n      b2Vec2 = Box2D.Common.Math.b2Vec2,\n      b2Vec3 = Box2D.Common.Math.b2Vec3;\n\n   b2Mat22.b2Mat22 = function () {\n      this.col1 = new b2Vec2();\n      this.col2 = new b2Vec2();\n   };\n   b2Mat22.prototype.b2Mat22 = function () {\n      this.SetIdentity();\n   }\n   b2Mat22.FromAngle = function (angle) {\n      if (angle === undefined) angle = 0;\n      var mat = new b2Mat22();\n      mat.Set(angle);\n      return mat;\n   }\n   b2Mat22.FromVV = function (c1, c2) {\n      var mat = new b2Mat22();\n      mat.SetVV(c1, c2);\n      return mat;\n   }\n   b2Mat22.prototype.Set = function (angle) {\n      if (angle === undefined) angle = 0;\n      var c = Math.cos(angle);\n      var s = Math.sin(angle);\n      this.col1.x = c;\n      this.col2.x = (-s);\n      this.col1.y = s;\n      this.col2.y = c;\n   }\n   b2Mat22.prototype.SetVV = function (c1, c2) {\n      this.col1.SetV(c1);\n      this.col2.SetV(c2);\n   }\n   b2Mat22.prototype.Copy = function () {\n      var mat = new b2Mat22();\n      mat.SetM(this);\n      return mat;\n   }\n   b2Mat22.prototype.SetM = function (m) {\n      this.col1.SetV(m.col1);\n      this.col2.SetV(m.col2);\n   }\n   b2Mat22.prototype.AddM = function (m) {\n      this.col1.x += m.col1.x;\n      this.col1.y += m.col1.y;\n      this.col2.x += m.col2.x;\n      this.col2.y += m.col2.y;\n   }\n   b2Mat22.prototype.SetIdentity = function () {\n      this.col1.x = 1.0;\n      this.col2.x = 0.0;\n      this.col1.y = 0.0;\n      this.col2.y = 1.0;\n   }\n   b2Mat22.prototype.SetZero = function () {\n      this.col1.x = 0.0;\n      this.col2.x = 0.0;\n      this.col1.y = 0.0;\n      this.col2.y = 0.0;\n   }\n   b2Mat22.prototype.GetAngle = function () {\n      return Math.atan2(this.col1.y, this.col1.x);\n   }\n   b2Mat22.prototype.GetInverse = function (out) {\n      var a = this.col1.x;\n      var b = this.col2.x;\n      var c = this.col1.y;\n      var d = this.col2.y;\n      var det = a * d - b * c;\n      if (det != 0.0) {\n         det = 1.0 / det;\n      }\n      out.col1.x = det * d;\n      out.col2.x = (-det * b);\n      out.col1.y = (-det * c);\n      out.col2.y = det * a;\n      return out;\n   }\n   b2Mat22.prototype.Solve = function (out, bX, bY) {\n      if (bX === undefined) bX = 0;\n      if (bY === undefined) bY = 0;\n      var a11 = this.col1.x;\n      var a12 = this.col2.x;\n      var a21 = this.col1.y;\n      var a22 = this.col2.y;\n      var det = a11 * a22 - a12 * a21;\n      if (det != 0.0) {\n         det = 1.0 / det;\n      }\n      out.x = det * (a22 * bX - a12 * bY);\n      out.y = det * (a11 * bY - a21 * bX);\n      return out;\n   }\n   b2Mat22.prototype.Abs = function () {\n      this.col1.Abs();\n      this.col2.Abs();\n   }\n   b2Mat33.b2Mat33 = function () {\n      this.col1 = new b2Vec3();\n      this.col2 = new b2Vec3();\n      this.col3 = new b2Vec3();\n   };\n   b2Mat33.prototype.b2Mat33 = function (c1, c2, c3) {\n      if (c1 === undefined) c1 = null;\n      if (c2 === undefined) c2 = null;\n      if (c3 === undefined) c3 = null;\n      if (!c1 && !c2 && !c3) {\n         this.col1.SetZero();\n         this.col2.SetZero();\n         this.col3.SetZero();\n      }\n      else {\n         this.col1.SetV(c1);\n         this.col2.SetV(c2);\n         this.col3.SetV(c3);\n      }\n   }\n   b2Mat33.prototype.SetVVV = function (c1, c2, c3) {\n      this.col1.SetV(c1);\n      this.col2.SetV(c2);\n      this.col3.SetV(c3);\n   }\n   b2Mat33.prototype.Copy = function () {\n      return new b2Mat33(this.col1, this.col2, this.col3);\n   }\n   b2Mat33.prototype.SetM = function (m) {\n      this.col1.SetV(m.col1);\n      this.col2.SetV(m.col2);\n      this.col3.SetV(m.col3);\n   }\n   b2Mat33.prototype.AddM = function (m) {\n      this.col1.x += m.col1.x;\n      this.col1.y += m.col1.y;\n      this.col1.z += m.col1.z;\n      this.col2.x += m.col2.x;\n      this.col2.y += m.col2.y;\n      this.col2.z += m.col2.z;\n      this.col3.x += m.col3.x;\n      this.col3.y += m.col3.y;\n      this.col3.z += m.col3.z;\n   }\n   b2Mat33.prototype.SetIdentity = function () {\n      this.col1.x = 1.0;\n      this.col2.x = 0.0;\n      this.col3.x = 0.0;\n      this.col1.y = 0.0;\n      this.col2.y = 1.0;\n      this.col3.y = 0.0;\n      this.col1.z = 0.0;\n      this.col2.z = 0.0;\n      this.col3.z = 1.0;\n   }\n   b2Mat33.prototype.SetZero = function () {\n      this.col1.x = 0.0;\n      this.col2.x = 0.0;\n      this.col3.x = 0.0;\n      this.col1.y = 0.0;\n      this.col2.y = 0.0;\n      this.col3.y = 0.0;\n      this.col1.z = 0.0;\n      this.col2.z = 0.0;\n      this.col3.z = 0.0;\n   }\n   b2Mat33.prototype.Solve22 = function (out, bX, bY) {\n      if (bX === undefined) bX = 0;\n      if (bY === undefined) bY = 0;\n      var a11 = this.col1.x;\n      var a12 = this.col2.x;\n      var a21 = this.col1.y;\n      var a22 = this.col2.y;\n      var det = a11 * a22 - a12 * a21;\n      if (det != 0.0) {\n         det = 1.0 / det;\n      }\n      out.x = det * (a22 * bX - a12 * bY);\n      out.y = det * (a11 * bY - a21 * bX);\n      return out;\n   }\n   b2Mat33.prototype.Solve33 = function (out, bX, bY, bZ) {\n      if (bX === undefined) bX = 0;\n      if (bY === undefined) bY = 0;\n      if (bZ === undefined) bZ = 0;\n      var a11 = this.col1.x;\n      var a21 = this.col1.y;\n      var a31 = this.col1.z;\n      var a12 = this.col2.x;\n      var a22 = this.col2.y;\n      var a32 = this.col2.z;\n      var a13 = this.col3.x;\n      var a23 = this.col3.y;\n      var a33 = this.col3.z;\n      var det = a11 * (a22 * a33 - a32 * a23) + a21 * (a32 * a13 - a12 * a33) + a31 * (a12 * a23 - a22 * a13);\n      if (det != 0.0) {\n         det = 1.0 / det;\n      }\n      out.x = det * (bX * (a22 * a33 - a32 * a23) + bY * (a32 * a13 - a12 * a33) + bZ * (a12 * a23 - a22 * a13));\n      out.y = det * (a11 * (bY * a33 - bZ * a23) + a21 * (bZ * a13 - bX * a33) + a31 * (bX * a23 - bY * a13));\n      out.z = det * (a11 * (a22 * bZ - a32 * bY) + a21 * (a32 * bX - a12 * bZ) + a31 * (a12 * bY - a22 * bX));\n      return out;\n   }\n   b2Math.b2Math = function () {};\n   b2Math.IsValid = function (x) {\n      if (x === undefined) x = 0;\n      return isFinite(x);\n   }\n   b2Math.Dot = function (a, b) {\n      return a.x * b.x + a.y * b.y;\n   }\n   b2Math.CrossVV = function (a, b) {\n      return a.x * b.y - a.y * b.x;\n   }\n   b2Math.CrossVF = function (a, s) {\n      if (s === undefined) s = 0;\n      var v = new b2Vec2(s * a.y, (-s * a.x));\n      return v;\n   }\n   b2Math.CrossFV = function (s, a) {\n      if (s === undefined) s = 0;\n      var v = new b2Vec2((-s * a.y), s * a.x);\n      return v;\n   }\n   b2Math.MulMV = function (A, v) {\n      var u = new b2Vec2(A.col1.x * v.x + A.col2.x * v.y, A.col1.y * v.x + A.col2.y * v.y);\n      return u;\n   }\n   b2Math.MulTMV = function (A, v) {\n      var u = new b2Vec2(b2Math.Dot(v, A.col1), b2Math.Dot(v, A.col2));\n      return u;\n   }\n   b2Math.MulX = function (T, v) {\n      var a = b2Math.MulMV(T.R, v);\n      a.x += T.position.x;\n      a.y += T.position.y;\n      return a;\n   }\n   b2Math.MulXT = function (T, v) {\n      var a = b2Math.SubtractVV(v, T.position);\n      var tX = (a.x * T.R.col1.x + a.y * T.R.col1.y);\n      a.y = (a.x * T.R.col2.x + a.y * T.R.col2.y);\n      a.x = tX;\n      return a;\n   }\n   b2Math.AddVV = function (a, b) {\n      var v = new b2Vec2(a.x + b.x, a.y + b.y);\n      return v;\n   }\n   b2Math.SubtractVV = function (a, b) {\n      var v = new b2Vec2(a.x - b.x, a.y - b.y);\n      return v;\n   }\n   b2Math.Distance = function (a, b) {\n      var cX = a.x - b.x;\n      var cY = a.y - b.y;\n      return Math.sqrt(cX * cX + cY * cY);\n   }\n   b2Math.DistanceSquared = function (a, b) {\n      var cX = a.x - b.x;\n      var cY = a.y - b.y;\n      return (cX * cX + cY * cY);\n   }\n   b2Math.MulFV = function (s, a) {\n      if (s === undefined) s = 0;\n      var v = new b2Vec2(s * a.x, s * a.y);\n      return v;\n   }\n   b2Math.AddMM = function (A, B) {\n      var C = b2Mat22.FromVV(b2Math.AddVV(A.col1, B.col1), b2Math.AddVV(A.col2, B.col2));\n      return C;\n   }\n   b2Math.MulMM = function (A, B) {\n      var C = b2Mat22.FromVV(b2Math.MulMV(A, B.col1), b2Math.MulMV(A, B.col2));\n      return C;\n   }\n   b2Math.MulTMM = function (A, B) {\n      var c1 = new b2Vec2(b2Math.Dot(A.col1, B.col1), b2Math.Dot(A.col2, B.col1));\n      var c2 = new b2Vec2(b2Math.Dot(A.col1, B.col2), b2Math.Dot(A.col2, B.col2));\n      var C = b2Mat22.FromVV(c1, c2);\n      return C;\n   }\n   b2Math.Abs = function (a) {\n      if (a === undefined) a = 0;\n      return a > 0.0 ? a : (-a);\n   }\n   b2Math.AbsV = function (a) {\n      var b = new b2Vec2(b2Math.Abs(a.x), b2Math.Abs(a.y));\n      return b;\n   }\n   b2Math.AbsM = function (A) {\n      var B = b2Mat22.FromVV(b2Math.AbsV(A.col1), b2Math.AbsV(A.col2));\n      return B;\n   }\n   b2Math.Min = function (a, b) {\n      if (a === undefined) a = 0;\n      if (b === undefined) b = 0;\n      return a < b ? a : b;\n   }\n   b2Math.MinV = function (a, b) {\n      var c = new b2Vec2(b2Math.Min(a.x, b.x), b2Math.Min(a.y, b.y));\n      return c;\n   }\n   b2Math.Max = function (a, b) {\n      if (a === undefined) a = 0;\n      if (b === undefined) b = 0;\n      return a > b ? a : b;\n   }\n   b2Math.MaxV = function (a, b) {\n      var c = new b2Vec2(b2Math.Max(a.x, b.x), b2Math.Max(a.y, b.y));\n      return c;\n   }\n   b2Math.Clamp = function (a, low, high) {\n      if (a === undefined) a = 0;\n      if (low === undefined) low = 0;\n      if (high === undefined) high = 0;\n      return a < low ? low : a > high ? high : a;\n   }\n   b2Math.ClampV = function (a, low, high) {\n      return b2Math.MaxV(low, b2Math.MinV(a, high));\n   }\n   b2Math.Swap = function (a, b) {\n      var tmp = a[0];\n      a[0] = b[0];\n      b[0] = tmp;\n   }\n   b2Math.Random = function () {\n      return Math.random() * 2 - 1;\n   }\n   b2Math.RandomRange = function (lo, hi) {\n      if (lo === undefined) lo = 0;\n      if (hi === undefined) hi = 0;\n      var r = Math.random();\n      r = (hi - lo) * r + lo;\n      return r;\n   }\n   b2Math.NextPowerOfTwo = function (x) {\n      if (x === undefined) x = 0;\n      x |= (x >> 1) & 0x7FFFFFFF;\n      x |= (x >> 2) & 0x3FFFFFFF;\n      x |= (x >> 4) & 0x0FFFFFFF;\n      x |= (x >> 8) & 0x00FFFFFF;\n      x |= (x >> 16) & 0x0000FFFF;\n      return x + 1;\n   }\n   b2Math.IsPowerOfTwo = function (x) {\n      if (x === undefined) x = 0;\n      var result = x > 0 && (x & (x - 1)) == 0;\n      return result;\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Common.Math.b2Math.b2Vec2_zero = new b2Vec2(0.0, 0.0);\n      Box2D.Common.Math.b2Math.b2Mat22_identity = b2Mat22.FromVV(new b2Vec2(1.0, 0.0), new b2Vec2(0.0, 1.0));\n      Box2D.Common.Math.b2Math.b2Transform_identity = new b2Transform(b2Math.b2Vec2_zero, b2Math.b2Mat22_identity);\n   });\n   b2Sweep.b2Sweep = function () {\n      this.localCenter = new b2Vec2();\n      this.c0 = new b2Vec2;\n      this.c = new b2Vec2();\n   };\n   b2Sweep.prototype.Set = function (other) {\n      this.localCenter.SetV(other.localCenter);\n      this.c0.SetV(other.c0);\n      this.c.SetV(other.c);\n      this.a0 = other.a0;\n      this.a = other.a;\n      this.t0 = other.t0;\n   }\n   b2Sweep.prototype.Copy = function () {\n      var copy = new b2Sweep();\n      copy.localCenter.SetV(this.localCenter);\n      copy.c0.SetV(this.c0);\n      copy.c.SetV(this.c);\n      copy.a0 = this.a0;\n      copy.a = this.a;\n      copy.t0 = this.t0;\n      return copy;\n   }\n   b2Sweep.prototype.GetTransform = function (xf, alpha) {\n      if (alpha === undefined) alpha = 0;\n      xf.position.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;\n      xf.position.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;\n      var angle = (1.0 - alpha) * this.a0 + alpha * this.a;\n      xf.R.Set(angle);\n      var tMat = xf.R;\n      xf.position.x -= (tMat.col1.x * this.localCenter.x + tMat.col2.x * this.localCenter.y);\n      xf.position.y -= (tMat.col1.y * this.localCenter.x + tMat.col2.y * this.localCenter.y);\n   }\n   b2Sweep.prototype.Advance = function (t) {\n      if (t === undefined) t = 0;\n      if (this.t0 < t && 1.0 - this.t0 > Number.MIN_VALUE) {\n         var alpha = (t - this.t0) / (1.0 - this.t0);\n         this.c0.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;\n         this.c0.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;\n         this.a0 = (1.0 - alpha) * this.a0 + alpha * this.a;\n         this.t0 = t;\n      }\n   }\n   b2Transform.b2Transform = function () {\n      this.position = new b2Vec2;\n      this.R = new b2Mat22();\n   };\n   b2Transform.prototype.b2Transform = function (pos, r) {\n      if (pos === undefined) pos = null;\n      if (r === undefined) r = null;\n      if (pos) {\n         this.position.SetV(pos);\n         this.R.SetM(r);\n      }\n   }\n   b2Transform.prototype.Initialize = function (pos, r) {\n      this.position.SetV(pos);\n      this.R.SetM(r);\n   }\n   b2Transform.prototype.SetIdentity = function () {\n      this.position.SetZero();\n      this.R.SetIdentity();\n   }\n   b2Transform.prototype.Set = function (x) {\n      this.position.SetV(x.position);\n      this.R.SetM(x.R);\n   }\n   b2Transform.prototype.GetAngle = function () {\n      return Math.atan2(this.R.col1.y, this.R.col1.x);\n   }\n   b2Vec2.b2Vec2 = function () {};\n   b2Vec2.prototype.b2Vec2 = function (x_, y_) {\n      if (x_ === undefined) x_ = 0;\n      if (y_ === undefined) y_ = 0;\n      this.x = x_;\n      this.y = y_;\n   }\n   b2Vec2.prototype.SetZero = function () {\n      this.x = 0.0;\n      this.y = 0.0;\n   }\n   b2Vec2.prototype.Set = function (x_, y_) {\n      if (x_ === undefined) x_ = 0;\n      if (y_ === undefined) y_ = 0;\n      this.x = x_;\n      this.y = y_;\n   }\n   b2Vec2.prototype.SetV = function (v) {\n      this.x = v.x;\n      this.y = v.y;\n   }\n   b2Vec2.prototype.GetNegative = function () {\n      return new b2Vec2((-this.x), (-this.y));\n   }\n   b2Vec2.prototype.NegativeSelf = function () {\n      this.x = (-this.x);\n      this.y = (-this.y);\n   }\n   b2Vec2.Make = function (x_, y_) {\n      if (x_ === undefined) x_ = 0;\n      if (y_ === undefined) y_ = 0;\n      return new b2Vec2(x_, y_);\n   }\n   b2Vec2.prototype.Copy = function () {\n      return new b2Vec2(this.x, this.y);\n   }\n   b2Vec2.prototype.Add = function (v) {\n      this.x += v.x;\n      this.y += v.y;\n   }\n   b2Vec2.prototype.Subtract = function (v) {\n      this.x -= v.x;\n      this.y -= v.y;\n   }\n   b2Vec2.prototype.Multiply = function (a) {\n      if (a === undefined) a = 0;\n      this.x *= a;\n      this.y *= a;\n   }\n   b2Vec2.prototype.MulM = function (A) {\n      var tX = this.x;\n      this.x = A.col1.x * tX + A.col2.x * this.y;\n      this.y = A.col1.y * tX + A.col2.y * this.y;\n   }\n   b2Vec2.prototype.MulTM = function (A) {\n      var tX = b2Math.Dot(this, A.col1);\n      this.y = b2Math.Dot(this, A.col2);\n      this.x = tX;\n   }\n   b2Vec2.prototype.CrossVF = function (s) {\n      if (s === undefined) s = 0;\n      var tX = this.x;\n      this.x = s * this.y;\n      this.y = (-s * tX);\n   }\n   b2Vec2.prototype.CrossFV = function (s) {\n      if (s === undefined) s = 0;\n      var tX = this.x;\n      this.x = (-s * this.y);\n      this.y = s * tX;\n   }\n   b2Vec2.prototype.MinV = function (b) {\n      this.x = this.x < b.x ? this.x : b.x;\n      this.y = this.y < b.y ? this.y : b.y;\n   }\n   b2Vec2.prototype.MaxV = function (b) {\n      this.x = this.x > b.x ? this.x : b.x;\n      this.y = this.y > b.y ? this.y : b.y;\n   }\n   b2Vec2.prototype.Abs = function () {\n      if (this.x < 0) this.x = (-this.x);\n      if (this.y < 0) this.y = (-this.y);\n   }\n   b2Vec2.prototype.Length = function () {\n      return Math.sqrt(this.x * this.x + this.y * this.y);\n   }\n   b2Vec2.prototype.LengthSquared = function () {\n      return (this.x * this.x + this.y * this.y);\n   }\n   b2Vec2.prototype.Normalize = function () {\n      var length = Math.sqrt(this.x * this.x + this.y * this.y);\n      if (length < Number.MIN_VALUE) {\n         return 0.0;\n      }\n      var invLength = 1.0 / length;\n      this.x *= invLength;\n      this.y *= invLength;\n      return length;\n   }\n   b2Vec2.prototype.IsValid = function () {\n      return b2Math.IsValid(this.x) && b2Math.IsValid(this.y);\n   }\n   b2Vec3.b2Vec3 = function () {};\n   b2Vec3.prototype.b2Vec3 = function (x, y, z) {\n      if (x === undefined) x = 0;\n      if (y === undefined) y = 0;\n      if (z === undefined) z = 0;\n      this.x = x;\n      this.y = y;\n      this.z = z;\n   }\n   b2Vec3.prototype.SetZero = function () {\n      this.x = this.y = this.z = 0.0;\n   }\n   b2Vec3.prototype.Set = function (x, y, z) {\n      if (x === undefined) x = 0;\n      if (y === undefined) y = 0;\n      if (z === undefined) z = 0;\n      this.x = x;\n      this.y = y;\n      this.z = z;\n   }\n   b2Vec3.prototype.SetV = function (v) {\n      this.x = v.x;\n      this.y = v.y;\n      this.z = v.z;\n   }\n   b2Vec3.prototype.GetNegative = function () {\n      return new b2Vec3((-this.x), (-this.y), (-this.z));\n   }\n   b2Vec3.prototype.NegativeSelf = function () {\n      this.x = (-this.x);\n      this.y = (-this.y);\n      this.z = (-this.z);\n   }\n   b2Vec3.prototype.Copy = function () {\n      return new b2Vec3(this.x, this.y, this.z);\n   }\n   b2Vec3.prototype.Add = function (v) {\n      this.x += v.x;\n      this.y += v.y;\n      this.z += v.z;\n   }\n   b2Vec3.prototype.Subtract = function (v) {\n      this.x -= v.x;\n      this.y -= v.y;\n      this.z -= v.z;\n   }\n   b2Vec3.prototype.Multiply = function (a) {\n      if (a === undefined) a = 0;\n      this.x *= a;\n      this.y *= a;\n      this.z *= a;\n   }\n})();\n(function () {\n   var b2ControllerEdge = Box2D.Dynamics.Controllers.b2ControllerEdge,\n      b2Mat22 = Box2D.Common.Math.b2Mat22,\n      b2Mat33 = Box2D.Common.Math.b2Mat33,\n      b2Math = Box2D.Common.Math.b2Math,\n      b2Sweep = Box2D.Common.Math.b2Sweep,\n      b2Transform = Box2D.Common.Math.b2Transform,\n      b2Vec2 = Box2D.Common.Math.b2Vec2,\n      b2Vec3 = Box2D.Common.Math.b2Vec3,\n      b2Color = Box2D.Common.b2Color,\n      b2internal = Box2D.Common.b2internal,\n      b2Settings = Box2D.Common.b2Settings,\n      b2AABB = Box2D.Collision.b2AABB,\n      b2Bound = Box2D.Collision.b2Bound,\n      b2BoundValues = Box2D.Collision.b2BoundValues,\n      b2Collision = Box2D.Collision.b2Collision,\n      b2ContactID = Box2D.Collision.b2ContactID,\n      b2ContactPoint = Box2D.Collision.b2ContactPoint,\n      b2Distance = Box2D.Collision.b2Distance,\n      b2DistanceInput = Box2D.Collision.b2DistanceInput,\n      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,\n      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,\n      b2DynamicTree = Box2D.Collision.b2DynamicTree,\n      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,\n      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,\n      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,\n      b2Manifold = Box2D.Collision.b2Manifold,\n      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,\n      b2Point = Box2D.Collision.b2Point,\n      b2RayCastInput = Box2D.Collision.b2RayCastInput,\n      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,\n      b2Segment = Box2D.Collision.b2Segment,\n      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,\n      b2Simplex = Box2D.Collision.b2Simplex,\n      b2SimplexCache = Box2D.Collision.b2SimplexCache,\n      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,\n      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,\n      b2TOIInput = Box2D.Collision.b2TOIInput,\n      b2WorldManifold = Box2D.Collision.b2WorldManifold,\n      ClipVertex = Box2D.Collision.ClipVertex,\n      Features = Box2D.Collision.Features,\n      IBroadPhase = Box2D.Collision.IBroadPhase,\n      b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,\n      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,\n      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,\n      b2MassData = Box2D.Collision.Shapes.b2MassData,\n      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,\n      b2Shape = Box2D.Collision.Shapes.b2Shape,\n      b2Body = Box2D.Dynamics.b2Body,\n      b2BodyDef = Box2D.Dynamics.b2BodyDef,\n      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,\n      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,\n      b2ContactListener = Box2D.Dynamics.b2ContactListener,\n      b2ContactManager = Box2D.Dynamics.b2ContactManager,\n      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,\n      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,\n      b2FilterData = Box2D.Dynamics.b2FilterData,\n      b2Fixture = Box2D.Dynamics.b2Fixture,\n      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,\n      b2Island = Box2D.Dynamics.b2Island,\n      b2TimeStep = Box2D.Dynamics.b2TimeStep,\n      b2World = Box2D.Dynamics.b2World,\n      b2CircleContact = Box2D.Dynamics.Contacts.b2CircleContact,\n      b2Contact = Box2D.Dynamics.Contacts.b2Contact,\n      b2ContactConstraint = Box2D.Dynamics.Contacts.b2ContactConstraint,\n      b2ContactConstraintPoint = Box2D.Dynamics.Contacts.b2ContactConstraintPoint,\n      b2ContactEdge = Box2D.Dynamics.Contacts.b2ContactEdge,\n      b2ContactFactory = Box2D.Dynamics.Contacts.b2ContactFactory,\n      b2ContactRegister = Box2D.Dynamics.Contacts.b2ContactRegister,\n      b2ContactResult = Box2D.Dynamics.Contacts.b2ContactResult,\n      b2ContactSolver = Box2D.Dynamics.Contacts.b2ContactSolver,\n      b2EdgeAndCircleContact = Box2D.Dynamics.Contacts.b2EdgeAndCircleContact,\n      b2NullContact = Box2D.Dynamics.Contacts.b2NullContact,\n      b2PolyAndCircleContact = Box2D.Dynamics.Contacts.b2PolyAndCircleContact,\n      b2PolyAndEdgeContact = Box2D.Dynamics.Contacts.b2PolyAndEdgeContact,\n      b2PolygonContact = Box2D.Dynamics.Contacts.b2PolygonContact,\n      b2PositionSolverManifold = Box2D.Dynamics.Contacts.b2PositionSolverManifold,\n      b2Controller = Box2D.Dynamics.Controllers.b2Controller,\n      b2DistanceJoint = Box2D.Dynamics.Joints.b2DistanceJoint,\n      b2DistanceJointDef = Box2D.Dynamics.Joints.b2DistanceJointDef,\n      b2FrictionJoint = Box2D.Dynamics.Joints.b2FrictionJoint,\n      b2FrictionJointDef = Box2D.Dynamics.Joints.b2FrictionJointDef,\n      b2GearJoint = Box2D.Dynamics.Joints.b2GearJoint,\n      b2GearJointDef = Box2D.Dynamics.Joints.b2GearJointDef,\n      b2Jacobian = Box2D.Dynamics.Joints.b2Jacobian,\n      b2Joint = Box2D.Dynamics.Joints.b2Joint,\n      b2JointDef = Box2D.Dynamics.Joints.b2JointDef,\n      b2JointEdge = Box2D.Dynamics.Joints.b2JointEdge,\n      b2LineJoint = Box2D.Dynamics.Joints.b2LineJoint,\n      b2LineJointDef = Box2D.Dynamics.Joints.b2LineJointDef,\n      b2MouseJoint = Box2D.Dynamics.Joints.b2MouseJoint,\n      b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef,\n      b2PrismaticJoint = Box2D.Dynamics.Joints.b2PrismaticJoint,\n      b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef,\n      b2PulleyJoint = Box2D.Dynamics.Joints.b2PulleyJoint,\n      b2PulleyJointDef = Box2D.Dynamics.Joints.b2PulleyJointDef,\n      b2RevoluteJoint = Box2D.Dynamics.Joints.b2RevoluteJoint,\n      b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef,\n      b2WeldJoint = Box2D.Dynamics.Joints.b2WeldJoint,\n      b2WeldJointDef = Box2D.Dynamics.Joints.b2WeldJointDef;\n\n   b2Body.b2Body = function () {\n      this.m_xf = new b2Transform();\n      this.m_sweep = new b2Sweep();\n      this.m_linearVelocity = new b2Vec2();\n      this.m_force = new b2Vec2();\n   };\n   b2Body.prototype.connectEdges = function (s1, s2, angle1) {\n      if (angle1 === undefined) angle1 = 0;\n      var angle2 = Math.atan2(s2.GetDirectionVector().y, s2.GetDirectionVector().x);\n      var coreOffset = Math.tan((angle2 - angle1) * 0.5);\n      var core = b2Math.MulFV(coreOffset, s2.GetDirectionVector());\n      core = b2Math.SubtractVV(core, s2.GetNormalVector());\n      core = b2Math.MulFV(b2Settings.b2_toiSlop, core);\n      core = b2Math.AddVV(core, s2.GetVertex1());\n      var cornerDir = b2Math.AddVV(s1.GetDirectionVector(), s2.GetDirectionVector());\n      cornerDir.Normalize();\n      var convex = b2Math.Dot(s1.GetDirectionVector(), s2.GetNormalVector()) > 0.0;\n      s1.SetNextEdge(s2, core, cornerDir, convex);\n      s2.SetPrevEdge(s1, core, cornerDir, convex);\n      return angle2;\n   }\n   b2Body.prototype.CreateFixture = function (def) {\n      if (this.m_world.IsLocked() == true) {\n         return null;\n      }\n      var fixture = new b2Fixture();\n      fixture.Create(this, this.m_xf, def);\n      if (this.m_flags & b2Body.e_activeFlag) {\n         var broadPhase = this.m_world.m_contactManager.m_broadPhase;\n         fixture.CreateProxy(broadPhase, this.m_xf);\n      }\n      fixture.m_next = this.m_fixtureList;\n      this.m_fixtureList = fixture;\n      ++this.m_fixtureCount;\n      fixture.m_body = this;\n      if (fixture.m_density > 0.0) {\n         this.ResetMassData();\n      }\n      this.m_world.m_flags |= b2World.e_newFixture;\n      return fixture;\n   }\n   b2Body.prototype.CreateFixture2 = function (shape, density) {\n      if (density === undefined) density = 0.0;\n      var def = new b2FixtureDef();\n      def.shape = shape;\n      def.density = density;\n      return this.CreateFixture(def);\n   }\n   b2Body.prototype.DestroyFixture = function (fixture) {\n      if (this.m_world.IsLocked() == true) {\n         return;\n      }\n      var node = this.m_fixtureList;\n      var ppF = null;\n      var found = false;\n      while (node != null) {\n         if (node == fixture) {\n            if (ppF) ppF.m_next = fixture.m_next;\n            else this.m_fixtureList = fixture.m_next;\n            found = true;\n            break;\n         }\n         ppF = node;\n         node = node.m_next;\n      }\n      var edge = this.m_contactList;\n      while (edge) {\n         var c = edge.contact;\n         edge = edge.next;\n         var fixtureA = c.GetFixtureA();\n         var fixtureB = c.GetFixtureB();\n         if (fixture == fixtureA || fixture == fixtureB) {\n            this.m_world.m_contactManager.Destroy(c);\n         }\n      }\n      if (this.m_flags & b2Body.e_activeFlag) {\n         var broadPhase = this.m_world.m_contactManager.m_broadPhase;\n         fixture.DestroyProxy(broadPhase);\n      }\n      else {}\n      fixture.Destroy();\n      fixture.m_body = null;\n      fixture.m_next = null;\n      --this.m_fixtureCount;\n      this.ResetMassData();\n   }\n   b2Body.prototype.SetPositionAndAngle = function (position, angle) {\n      if (angle === undefined) angle = 0;\n      var f;\n      if (this.m_world.IsLocked() == true) {\n         return;\n      }\n      this.m_xf.R.Set(angle);\n      this.m_xf.position.SetV(position);\n      var tMat = this.m_xf.R;\n      var tVec = this.m_sweep.localCenter;\n      this.m_sweep.c.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      this.m_sweep.c.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      this.m_sweep.c.x += this.m_xf.position.x;\n      this.m_sweep.c.y += this.m_xf.position.y;\n      this.m_sweep.c0.SetV(this.m_sweep.c);\n      this.m_sweep.a0 = this.m_sweep.a = angle;\n      var broadPhase = this.m_world.m_contactManager.m_broadPhase;\n      for (f = this.m_fixtureList;\n      f; f = f.m_next) {\n         f.Synchronize(broadPhase, this.m_xf, this.m_xf);\n      }\n      this.m_world.m_contactManager.FindNewContacts();\n   }\n   b2Body.prototype.SetTransform = function (xf) {\n      this.SetPositionAndAngle(xf.position, xf.GetAngle());\n   }\n   b2Body.prototype.GetTransform = function () {\n      return this.m_xf;\n   }\n   b2Body.prototype.GetPosition = function () {\n      return this.m_xf.position;\n   }\n   b2Body.prototype.SetPosition = function (position) {\n      this.SetPositionAndAngle(position, this.GetAngle());\n   }\n   b2Body.prototype.GetAngle = function () {\n      return this.m_sweep.a;\n   }\n   b2Body.prototype.SetAngle = function (angle) {\n      if (angle === undefined) angle = 0;\n      this.SetPositionAndAngle(this.GetPosition(), angle);\n   }\n   b2Body.prototype.GetWorldCenter = function () {\n      return this.m_sweep.c;\n   }\n   b2Body.prototype.GetLocalCenter = function () {\n      return this.m_sweep.localCenter;\n   }\n   b2Body.prototype.SetLinearVelocity = function (v) {\n      if (this.m_type == b2Body.b2_staticBody) {\n         return;\n      }\n      this.m_linearVelocity.SetV(v);\n   }\n   b2Body.prototype.GetLinearVelocity = function () {\n      return this.m_linearVelocity;\n   }\n   b2Body.prototype.SetAngularVelocity = function (omega) {\n      if (omega === undefined) omega = 0;\n      if (this.m_type == b2Body.b2_staticBody) {\n         return;\n      }\n      this.m_angularVelocity = omega;\n   }\n   b2Body.prototype.GetAngularVelocity = function () {\n      return this.m_angularVelocity;\n   }\n   b2Body.prototype.GetDefinition = function () {\n      var bd = new b2BodyDef();\n      bd.type = this.GetType();\n      bd.allowSleep = (this.m_flags & b2Body.e_allowSleepFlag) == b2Body.e_allowSleepFlag;\n      bd.angle = this.GetAngle();\n      bd.angularDamping = this.m_angularDamping;\n      bd.angularVelocity = this.m_angularVelocity;\n      bd.fixedRotation = (this.m_flags & b2Body.e_fixedRotationFlag) == b2Body.e_fixedRotationFlag;\n      bd.bullet = (this.m_flags & b2Body.e_bulletFlag) == b2Body.e_bulletFlag;\n      bd.awake = (this.m_flags & b2Body.e_awakeFlag) == b2Body.e_awakeFlag;\n      bd.linearDamping = this.m_linearDamping;\n      bd.linearVelocity.SetV(this.GetLinearVelocity());\n      bd.position = this.GetPosition();\n      bd.userData = this.GetUserData();\n      return bd;\n   }\n   b2Body.prototype.ApplyForce = function (force, point) {\n      if (this.m_type != b2Body.b2_dynamicBody) {\n         return;\n      }\n      if (this.IsAwake() == false) {\n         this.SetAwake(true);\n      }\n      this.m_force.x += force.x;\n      this.m_force.y += force.y;\n      this.m_torque += ((point.x - this.m_sweep.c.x) * force.y - (point.y - this.m_sweep.c.y) * force.x);\n   }\n   b2Body.prototype.ApplyTorque = function (torque) {\n      if (torque === undefined) torque = 0;\n      if (this.m_type != b2Body.b2_dynamicBody) {\n         return;\n      }\n      if (this.IsAwake() == false) {\n         this.SetAwake(true);\n      }\n      this.m_torque += torque;\n   }\n   b2Body.prototype.ApplyImpulse = function (impulse, point) {\n      if (this.m_type != b2Body.b2_dynamicBody) {\n         return;\n      }\n      if (this.IsAwake() == false) {\n         this.SetAwake(true);\n      }\n      this.m_linearVelocity.x += this.m_invMass * impulse.x;\n      this.m_linearVelocity.y += this.m_invMass * impulse.y;\n      this.m_angularVelocity += this.m_invI * ((point.x - this.m_sweep.c.x) * impulse.y - (point.y - this.m_sweep.c.y) * impulse.x);\n   }\n   b2Body.prototype.Split = function (callback) {\n      var linearVelocity = this.GetLinearVelocity().Copy();\n      var angularVelocity = this.GetAngularVelocity();\n      var center = this.GetWorldCenter();\n      var body1 = this;\n      var body2 = this.m_world.CreateBody(this.GetDefinition());\n      var prev;\n      for (var f = body1.m_fixtureList; f;) {\n         if (callback(f)) {\n            var next = f.m_next;\n            if (prev) {\n               prev.m_next = next;\n            }\n            else {\n               body1.m_fixtureList = next;\n            }\n            body1.m_fixtureCount--;\n            f.m_next = body2.m_fixtureList;\n            body2.m_fixtureList = f;\n            body2.m_fixtureCount++;\n            f.m_body = body2;\n            f = next;\n         }\n         else {\n            prev = f;\n            f = f.m_next;\n         }\n      }\n      body1.ResetMassData();\n      body2.ResetMassData();\n      var center1 = body1.GetWorldCenter();\n      var center2 = body2.GetWorldCenter();\n      var velocity1 = b2Math.AddVV(linearVelocity, b2Math.CrossFV(angularVelocity, b2Math.SubtractVV(center1, center)));\n      var velocity2 = b2Math.AddVV(linearVelocity, b2Math.CrossFV(angularVelocity, b2Math.SubtractVV(center2, center)));\n      body1.SetLinearVelocity(velocity1);\n      body2.SetLinearVelocity(velocity2);\n      body1.SetAngularVelocity(angularVelocity);\n      body2.SetAngularVelocity(angularVelocity);\n      body1.SynchronizeFixtures();\n      body2.SynchronizeFixtures();\n      return body2;\n   }\n   b2Body.prototype.Merge = function (other) {\n      var f;\n      for (f = other.m_fixtureList;\n      f;) {\n         var next = f.m_next;\n         other.m_fixtureCount--;\n         f.m_next = this.m_fixtureList;\n         this.m_fixtureList = f;\n         this.m_fixtureCount++;\n         f.m_body = body2;\n         f = next;\n      }\n      body1.m_fixtureCount = 0;\n      var body1 = this;\n      var body2 = other;\n      var center1 = body1.GetWorldCenter();\n      var center2 = body2.GetWorldCenter();\n      var velocity1 = body1.GetLinearVelocity().Copy();\n      var velocity2 = body2.GetLinearVelocity().Copy();\n      var angular1 = body1.GetAngularVelocity();\n      var angular = body2.GetAngularVelocity();\n      body1.ResetMassData();\n      this.SynchronizeFixtures();\n   }\n   b2Body.prototype.GetMass = function () {\n      return this.m_mass;\n   }\n   b2Body.prototype.GetInertia = function () {\n      return this.m_I;\n   }\n   b2Body.prototype.GetMassData = function (data) {\n      data.mass = this.m_mass;\n      data.I = this.m_I;\n      data.center.SetV(this.m_sweep.localCenter);\n   }\n   b2Body.prototype.SetMassData = function (massData) {\n      b2Settings.b2Assert(this.m_world.IsLocked() == false);\n      if (this.m_world.IsLocked() == true) {\n         return;\n      }\n      if (this.m_type != b2Body.b2_dynamicBody) {\n         return;\n      }\n      this.m_invMass = 0.0;\n      this.m_I = 0.0;\n      this.m_invI = 0.0;\n      this.m_mass = massData.mass;\n      if (this.m_mass <= 0.0) {\n         this.m_mass = 1.0;\n      }\n      this.m_invMass = 1.0 / this.m_mass;\n      if (massData.I > 0.0 && (this.m_flags & b2Body.e_fixedRotationFlag) == 0) {\n         this.m_I = massData.I - this.m_mass * (massData.center.x * massData.center.x + massData.center.y * massData.center.y);\n         this.m_invI = 1.0 / this.m_I;\n      }\n      var oldCenter = this.m_sweep.c.Copy();\n      this.m_sweep.localCenter.SetV(massData.center);\n      this.m_sweep.c0.SetV(b2Math.MulX(this.m_xf, this.m_sweep.localCenter));\n      this.m_sweep.c.SetV(this.m_sweep.c0);\n      this.m_linearVelocity.x += this.m_angularVelocity * (-(this.m_sweep.c.y - oldCenter.y));\n      this.m_linearVelocity.y += this.m_angularVelocity * (+(this.m_sweep.c.x - oldCenter.x));\n   }\n   b2Body.prototype.ResetMassData = function () {\n      this.m_mass = 0.0;\n      this.m_invMass = 0.0;\n      this.m_I = 0.0;\n      this.m_invI = 0.0;\n      this.m_sweep.localCenter.SetZero();\n      if (this.m_type == b2Body.b2_staticBody || this.m_type == b2Body.b2_kinematicBody) {\n         return;\n      }\n      var center = b2Vec2.Make(0, 0);\n      for (var f = this.m_fixtureList; f; f = f.m_next) {\n         if (f.m_density == 0.0) {\n            continue;\n         }\n         var massData = f.GetMassData();\n         this.m_mass += massData.mass;\n         center.x += massData.center.x * massData.mass;\n         center.y += massData.center.y * massData.mass;\n         this.m_I += massData.I;\n      }\n      if (this.m_mass > 0.0) {\n         this.m_invMass = 1.0 / this.m_mass;\n         center.x *= this.m_invMass;\n         center.y *= this.m_invMass;\n      }\n      else {\n         this.m_mass = 1.0;\n         this.m_invMass = 1.0;\n      }\n      if (this.m_I > 0.0 && (this.m_flags & b2Body.e_fixedRotationFlag) == 0) {\n         this.m_I -= this.m_mass * (center.x * center.x + center.y * center.y);\n         this.m_I *= this.m_inertiaScale;\n         b2Settings.b2Assert(this.m_I > 0);\n         this.m_invI = 1.0 / this.m_I;\n      }\n      else {\n         this.m_I = 0.0;\n         this.m_invI = 0.0;\n      }\n      var oldCenter = this.m_sweep.c.Copy();\n      this.m_sweep.localCenter.SetV(center);\n      this.m_sweep.c0.SetV(b2Math.MulX(this.m_xf, this.m_sweep.localCenter));\n      this.m_sweep.c.SetV(this.m_sweep.c0);\n      this.m_linearVelocity.x += this.m_angularVelocity * (-(this.m_sweep.c.y - oldCenter.y));\n      this.m_linearVelocity.y += this.m_angularVelocity * (+(this.m_sweep.c.x - oldCenter.x));\n   }\n   b2Body.prototype.GetWorldPoint = function (localPoint) {\n      var A = this.m_xf.R;\n      var u = new b2Vec2(A.col1.x * localPoint.x + A.col2.x * localPoint.y, A.col1.y * localPoint.x + A.col2.y * localPoint.y);\n      u.x += this.m_xf.position.x;\n      u.y += this.m_xf.position.y;\n      return u;\n   }\n   b2Body.prototype.GetWorldVector = function (localVector) {\n      return b2Math.MulMV(this.m_xf.R, localVector);\n   }\n   b2Body.prototype.GetLocalPoint = function (worldPoint) {\n      return b2Math.MulXT(this.m_xf, worldPoint);\n   }\n   b2Body.prototype.GetLocalVector = function (worldVector) {\n      return b2Math.MulTMV(this.m_xf.R, worldVector);\n   }\n   b2Body.prototype.GetLinearVelocityFromWorldPoint = function (worldPoint) {\n      return new b2Vec2(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));\n   }\n   b2Body.prototype.GetLinearVelocityFromLocalPoint = function (localPoint) {\n      var A = this.m_xf.R;\n      var worldPoint = new b2Vec2(A.col1.x * localPoint.x + A.col2.x * localPoint.y, A.col1.y * localPoint.x + A.col2.y * localPoint.y);\n      worldPoint.x += this.m_xf.position.x;\n      worldPoint.y += this.m_xf.position.y;\n      return new b2Vec2(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));\n   }\n   b2Body.prototype.GetLinearDamping = function () {\n      return this.m_linearDamping;\n   }\n   b2Body.prototype.SetLinearDamping = function (linearDamping) {\n      if (linearDamping === undefined) linearDamping = 0;\n      this.m_linearDamping = linearDamping;\n   }\n   b2Body.prototype.GetAngularDamping = function () {\n      return this.m_angularDamping;\n   }\n   b2Body.prototype.SetAngularDamping = function (angularDamping) {\n      if (angularDamping === undefined) angularDamping = 0;\n      this.m_angularDamping = angularDamping;\n   }\n   b2Body.prototype.SetType = function (type) {\n      if (type === undefined) type = 0;\n      if (this.m_type == type) {\n         return;\n      }\n      this.m_type = type;\n      this.ResetMassData();\n      if (this.m_type == b2Body.b2_staticBody) {\n         this.m_linearVelocity.SetZero();\n         this.m_angularVelocity = 0.0;\n      }\n      this.SetAwake(true);\n      this.m_force.SetZero();\n      this.m_torque = 0.0;\n      for (var ce = this.m_contactList; ce; ce = ce.next) {\n         ce.contact.FlagForFiltering();\n      }\n   }\n   b2Body.prototype.GetType = function () {\n      return this.m_type;\n   }\n   b2Body.prototype.SetBullet = function (flag) {\n      if (flag) {\n         this.m_flags |= b2Body.e_bulletFlag;\n      }\n      else {\n         this.m_flags &= ~b2Body.e_bulletFlag;\n      }\n   }\n   b2Body.prototype.IsBullet = function () {\n      return (this.m_flags & b2Body.e_bulletFlag) == b2Body.e_bulletFlag;\n   }\n   b2Body.prototype.SetSleepingAllowed = function (flag) {\n      if (flag) {\n         this.m_flags |= b2Body.e_allowSleepFlag;\n      }\n      else {\n         this.m_flags &= ~b2Body.e_allowSleepFlag;\n         this.SetAwake(true);\n      }\n   }\n   b2Body.prototype.SetAwake = function (flag) {\n      if (flag) {\n         this.m_flags |= b2Body.e_awakeFlag;\n         this.m_sleepTime = 0.0;\n      }\n      else {\n         this.m_flags &= ~b2Body.e_awakeFlag;\n         this.m_sleepTime = 0.0;\n         this.m_linearVelocity.SetZero();\n         this.m_angularVelocity = 0.0;\n         this.m_force.SetZero();\n         this.m_torque = 0.0;\n      }\n   }\n   b2Body.prototype.IsAwake = function () {\n      return (this.m_flags & b2Body.e_awakeFlag) == b2Body.e_awakeFlag;\n   }\n   b2Body.prototype.SetFixedRotation = function (fixed) {\n      if (fixed) {\n         this.m_flags |= b2Body.e_fixedRotationFlag;\n      }\n      else {\n         this.m_flags &= ~b2Body.e_fixedRotationFlag;\n      }\n      this.ResetMassData();\n   }\n   b2Body.prototype.IsFixedRotation = function () {\n      return (this.m_flags & b2Body.e_fixedRotationFlag) == b2Body.e_fixedRotationFlag;\n   }\n   b2Body.prototype.SetActive = function (flag) {\n      if (flag == this.IsActive()) {\n         return;\n      }\n      var broadPhase;\n      var f;\n      if (flag) {\n         this.m_flags |= b2Body.e_activeFlag;\n         broadPhase = this.m_world.m_contactManager.m_broadPhase;\n         for (f = this.m_fixtureList;\n         f; f = f.m_next) {\n            f.CreateProxy(broadPhase, this.m_xf);\n         }\n      }\n      else {\n         this.m_flags &= ~b2Body.e_activeFlag;\n         broadPhase = this.m_world.m_contactManager.m_broadPhase;\n         for (f = this.m_fixtureList;\n         f; f = f.m_next) {\n            f.DestroyProxy(broadPhase);\n         }\n         var ce = this.m_contactList;\n         while (ce) {\n            var ce0 = ce;\n            ce = ce.next;\n            this.m_world.m_contactManager.Destroy(ce0.contact);\n         }\n         this.m_contactList = null;\n      }\n   }\n   b2Body.prototype.IsActive = function () {\n      return (this.m_flags & b2Body.e_activeFlag) == b2Body.e_activeFlag;\n   }\n   b2Body.prototype.IsSleepingAllowed = function () {\n      return (this.m_flags & b2Body.e_allowSleepFlag) == b2Body.e_allowSleepFlag;\n   }\n   b2Body.prototype.GetFixtureList = function () {\n      return this.m_fixtureList;\n   }\n   b2Body.prototype.GetJointList = function () {\n      return this.m_jointList;\n   }\n   b2Body.prototype.GetControllerList = function () {\n      return this.m_controllerList;\n   }\n   b2Body.prototype.GetContactList = function () {\n      return this.m_contactList;\n   }\n   b2Body.prototype.GetNext = function () {\n      return this.m_next;\n   }\n   b2Body.prototype.GetUserData = function () {\n      return this.m_userData;\n   }\n   b2Body.prototype.SetUserData = function (data) {\n      this.m_userData = data;\n   }\n   b2Body.prototype.GetWorld = function () {\n      return this.m_world;\n   }\n   b2Body.prototype.b2Body = function (bd, world) {\n      this.m_flags = 0;\n      if (bd.bullet) {\n         this.m_flags |= b2Body.e_bulletFlag;\n      }\n      if (bd.fixedRotation) {\n         this.m_flags |= b2Body.e_fixedRotationFlag;\n      }\n      if (bd.allowSleep) {\n         this.m_flags |= b2Body.e_allowSleepFlag;\n      }\n      if (bd.awake) {\n         this.m_flags |= b2Body.e_awakeFlag;\n      }\n      if (bd.active) {\n         this.m_flags |= b2Body.e_activeFlag;\n      }\n      this.m_world = world;\n      this.m_xf.position.SetV(bd.position);\n      this.m_xf.R.Set(bd.angle);\n      this.m_sweep.localCenter.SetZero();\n      this.m_sweep.t0 = 1.0;\n      this.m_sweep.a0 = this.m_sweep.a = bd.angle;\n      var tMat = this.m_xf.R;\n      var tVec = this.m_sweep.localCenter;\n      this.m_sweep.c.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      this.m_sweep.c.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      this.m_sweep.c.x += this.m_xf.position.x;\n      this.m_sweep.c.y += this.m_xf.position.y;\n      this.m_sweep.c0.SetV(this.m_sweep.c);\n      this.m_jointList = null;\n      this.m_controllerList = null;\n      this.m_contactList = null;\n      this.m_controllerCount = 0;\n      this.m_prev = null;\n      this.m_next = null;\n      this.m_linearVelocity.SetV(bd.linearVelocity);\n      this.m_angularVelocity = bd.angularVelocity;\n      this.m_linearDamping = bd.linearDamping;\n      this.m_angularDamping = bd.angularDamping;\n      this.m_force.Set(0.0, 0.0);\n      this.m_torque = 0.0;\n      this.m_sleepTime = 0.0;\n      this.m_type = bd.type;\n      if (this.m_type == b2Body.b2_dynamicBody) {\n         this.m_mass = 1.0;\n         this.m_invMass = 1.0;\n      }\n      else {\n         this.m_mass = 0.0;\n         this.m_invMass = 0.0;\n      }\n      this.m_I = 0.0;\n      this.m_invI = 0.0;\n      this.m_inertiaScale = bd.inertiaScale;\n      this.m_userData = bd.userData;\n      this.m_fixtureList = null;\n      this.m_fixtureCount = 0;\n   }\n   b2Body.prototype.SynchronizeFixtures = function () {\n      var xf1 = b2Body.s_xf1;\n      xf1.R.Set(this.m_sweep.a0);\n      var tMat = xf1.R;\n      var tVec = this.m_sweep.localCenter;\n      xf1.position.x = this.m_sweep.c0.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      xf1.position.y = this.m_sweep.c0.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n      var f;\n      var broadPhase = this.m_world.m_contactManager.m_broadPhase;\n      for (f = this.m_fixtureList;\n      f; f = f.m_next) {\n         f.Synchronize(broadPhase, xf1, this.m_xf);\n      }\n   }\n   b2Body.prototype.SynchronizeTransform = function () {\n      this.m_xf.R.Set(this.m_sweep.a);\n      var tMat = this.m_xf.R;\n      var tVec = this.m_sweep.localCenter;\n      this.m_xf.position.x = this.m_sweep.c.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n      this.m_xf.position.y = this.m_sweep.c.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n   }\n   b2Body.prototype.ShouldCollide = function (other) {\n      if (this.m_type != b2Body.b2_dynamicBody && other.m_type != b2Body.b2_dynamicBody) {\n         return false;\n      }\n      for (var jn = this.m_jointList; jn; jn = jn.next) {\n         if (jn.other == other) if (jn.joint.m_collideConnected == false) {\n            return false;\n         }\n      }\n      return true;\n   }\n   b2Body.prototype.Advance = function (t) {\n      if (t === undefined) t = 0;\n      this.m_sweep.Advance(t);\n      this.m_sweep.c.SetV(this.m_sweep.c0);\n      this.m_sweep.a = this.m_sweep.a0;\n      this.SynchronizeTransform();\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Dynamics.b2Body.s_xf1 = new b2Transform();\n      Box2D.Dynamics.b2Body.e_islandFlag = 0x0001;\n      Box2D.Dynamics.b2Body.e_awakeFlag = 0x0002;\n      Box2D.Dynamics.b2Body.e_allowSleepFlag = 0x0004;\n      Box2D.Dynamics.b2Body.e_bulletFlag = 0x0008;\n      Box2D.Dynamics.b2Body.e_fixedRotationFlag = 0x0010;\n      Box2D.Dynamics.b2Body.e_activeFlag = 0x0020;\n      Box2D.Dynamics.b2Body.b2_staticBody = 0;\n      Box2D.Dynamics.b2Body.b2_kinematicBody = 1;\n      Box2D.Dynamics.b2Body.b2_dynamicBody = 2;\n   });\n   b2BodyDef.b2BodyDef = function () {\n      this.position = new b2Vec2();\n      this.linearVelocity = new b2Vec2();\n   };\n   b2BodyDef.prototype.b2BodyDef = function () {\n      this.userData = null;\n      this.position.Set(0.0, 0.0);\n      this.angle = 0.0;\n      this.linearVelocity.Set(0, 0);\n      this.angularVelocity = 0.0;\n      this.linearDamping = 0.0;\n      this.angularDamping = 0.0;\n      this.allowSleep = true;\n      this.awake = true;\n      this.fixedRotation = false;\n      this.bullet = false;\n      this.type = b2Body.b2_staticBody;\n      this.active = true;\n      this.inertiaScale = 1.0;\n   }\n   b2ContactFilter.b2ContactFilter = function () {};\n   b2ContactFilter.prototype.ShouldCollide = function (fixtureA, fixtureB) {\n      var filter1 = fixtureA.GetFilterData();\n      var filter2 = fixtureB.GetFilterData();\n      if (filter1.groupIndex == filter2.groupIndex && filter1.groupIndex != 0) {\n         return filter1.groupIndex > 0;\n      }\n      var collide = (filter1.maskBits & filter2.categoryBits) != 0 && (filter1.categoryBits & filter2.maskBits) != 0;\n      return collide;\n   }\n   b2ContactFilter.prototype.RayCollide = function (userData, fixture) {\n      if (!userData) return true;\n      return this.ShouldCollide((userData instanceof b2Fixture ? userData : null), fixture);\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Dynamics.b2ContactFilter.b2_defaultFilter = new b2ContactFilter();\n   });\n   b2ContactImpulse.b2ContactImpulse = function () {\n      this.normalImpulses = new Vector_a2j_Number(b2Settings.b2_maxManifoldPoints);\n      this.tangentImpulses = new Vector_a2j_Number(b2Settings.b2_maxManifoldPoints);\n   };\n   b2ContactListener.b2ContactListener = function () {};\n   b2ContactListener.prototype.BeginContact = function (contact) {}\n   b2ContactListener.prototype.EndContact = function (contact) {}\n   b2ContactListener.prototype.PreSolve = function (contact, oldManifold) {}\n   b2ContactListener.prototype.PostSolve = function (contact, impulse) {}\n   Box2D.postDefs.push(function () {\n      Box2D.Dynamics.b2ContactListener.b2_defaultListener = new b2ContactListener();\n   });\n   b2ContactManager.b2ContactManager = function () {};\n   b2ContactManager.prototype.b2ContactManager = function () {\n      this.m_world = null;\n      this.m_contactCount = 0;\n      this.m_contactFilter = b2ContactFilter.b2_defaultFilter;\n      this.m_contactListener = b2ContactListener.b2_defaultListener;\n      this.m_contactFactory = new b2ContactFactory(this.m_allocator);\n      this.m_broadPhase = new b2DynamicTreeBroadPhase();\n   }\n   b2ContactManager.prototype.AddPair = function (proxyUserDataA, proxyUserDataB) {\n      var fixtureA = (proxyUserDataA instanceof b2Fixture ? proxyUserDataA : null);\n      var fixtureB = (proxyUserDataB instanceof b2Fixture ? proxyUserDataB : null);\n      var bodyA = fixtureA.GetBody();\n      var bodyB = fixtureB.GetBody();\n      if (bodyA == bodyB) return;\n      var edge = bodyB.GetContactList();\n      while (edge) {\n         if (edge.other == bodyA) {\n            var fA = edge.contact.GetFixtureA();\n            var fB = edge.contact.GetFixtureB();\n            if (fA == fixtureA && fB == fixtureB) return;\n            if (fA == fixtureB && fB == fixtureA) return;\n         }\n         edge = edge.next;\n      }\n      if (bodyB.ShouldCollide(bodyA) == false) {\n         return;\n      }\n      if (this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false) {\n         return;\n      }\n      var c = this.m_contactFactory.Create(fixtureA, fixtureB);\n      fixtureA = c.GetFixtureA();\n      fixtureB = c.GetFixtureB();\n      bodyA = fixtureA.m_body;\n      bodyB = fixtureB.m_body;\n      c.m_prev = null;\n      c.m_next = this.m_world.m_contactList;\n      if (this.m_world.m_contactList != null) {\n         this.m_world.m_contactList.m_prev = c;\n      }\n      this.m_world.m_contactList = c;\n      c.m_nodeA.contact = c;\n      c.m_nodeA.other = bodyB;\n      c.m_nodeA.prev = null;\n      c.m_nodeA.next = bodyA.m_contactList;\n      if (bodyA.m_contactList != null) {\n         bodyA.m_contactList.prev = c.m_nodeA;\n      }\n      bodyA.m_contactList = c.m_nodeA;\n      c.m_nodeB.contact = c;\n      c.m_nodeB.other = bodyA;\n      c.m_nodeB.prev = null;\n      c.m_nodeB.next = bodyB.m_contactList;\n      if (bodyB.m_contactList != null) {\n         bodyB.m_contactList.prev = c.m_nodeB;\n      }\n      bodyB.m_contactList = c.m_nodeB;\n      ++this.m_world.m_contactCount;\n      return;\n   }\n   b2ContactManager.prototype.FindNewContacts = function () {\n      this.m_broadPhase.UpdatePairs(Box2D.generateCallback(this, this.AddPair));\n   }\n   b2ContactManager.prototype.Destroy = function (c) {\n      var fixtureA = c.GetFixtureA();\n      var fixtureB = c.GetFixtureB();\n      var bodyA = fixtureA.GetBody();\n      var bodyB = fixtureB.GetBody();\n      if (c.IsTouching()) {\n         this.m_contactListener.EndContact(c);\n      }\n      if (c.m_prev) {\n         c.m_prev.m_next = c.m_next;\n      }\n      if (c.m_next) {\n         c.m_next.m_prev = c.m_prev;\n      }\n      if (c == this.m_world.m_contactList) {\n         this.m_world.m_contactList = c.m_next;\n      }\n      if (c.m_nodeA.prev) {\n         c.m_nodeA.prev.next = c.m_nodeA.next;\n      }\n      if (c.m_nodeA.next) {\n         c.m_nodeA.next.prev = c.m_nodeA.prev;\n      }\n      if (c.m_nodeA == bodyA.m_contactList) {\n         bodyA.m_contactList = c.m_nodeA.next;\n      }\n      if (c.m_nodeB.prev) {\n         c.m_nodeB.prev.next = c.m_nodeB.next;\n      }\n      if (c.m_nodeB.next) {\n         c.m_nodeB.next.prev = c.m_nodeB.prev;\n      }\n      if (c.m_nodeB == bodyB.m_contactList) {\n         bodyB.m_contactList = c.m_nodeB.next;\n      }\n      this.m_contactFactory.Destroy(c);\n      --this.m_contactCount;\n   }\n   b2ContactManager.prototype.Collide = function () {\n      var c = this.m_world.m_contactList;\n      while (c) {\n         var fixtureA = c.GetFixtureA();\n         var fixtureB = c.GetFixtureB();\n         var bodyA = fixtureA.GetBody();\n         var bodyB = fixtureB.GetBody();\n         if (bodyA.IsAwake() == false && bodyB.IsAwake() == false) {\n            c = c.GetNext();\n            continue;\n         }\n         if (c.m_flags & b2Contact.e_filterFlag) {\n            if (bodyB.ShouldCollide(bodyA) == false) {\n               var cNuke = c;\n               c = cNuke.GetNext();\n               this.Destroy(cNuke);\n               continue;\n            }\n            if (this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false) {\n               cNuke = c;\n               c = cNuke.GetNext();\n               this.Destroy(cNuke);\n               continue;\n            }\n            c.m_flags &= ~b2Contact.e_filterFlag;\n         }\n         var proxyA = fixtureA.m_proxy;\n         var proxyB = fixtureB.m_proxy;\n         var overlap = this.m_broadPhase.TestOverlap(proxyA, proxyB);\n         if (overlap == false) {\n            cNuke = c;\n            c = cNuke.GetNext();\n            this.Destroy(cNuke);\n            continue;\n         }\n         c.Update(this.m_contactListener);\n         c = c.GetNext();\n      }\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Dynamics.b2ContactManager.s_evalCP = new b2ContactPoint();\n   });\n   b2DebugDraw.b2DebugDraw = function () {};\n   b2DebugDraw.prototype.b2DebugDraw = function () {}\n   b2DebugDraw.prototype.SetFlags = function (flags) {\n      if (flags === undefined) flags = 0;\n   }\n   b2DebugDraw.prototype.GetFlags = function () {}\n   b2DebugDraw.prototype.AppendFlags = function (flags) {\n      if (flags === undefined) flags = 0;\n   }\n   b2DebugDraw.prototype.ClearFlags = function (flags) {\n      if (flags === undefined) flags = 0;\n   }\n   b2DebugDraw.prototype.SetSprite = function (sprite) {}\n   b2DebugDraw.prototype.GetSprite = function () {}\n   b2DebugDraw.prototype.SetDrawScale = function (drawScale) {\n      if (drawScale === undefined) drawScale = 0;\n   }\n   b2DebugDraw.prototype.GetDrawScale = function () {}\n   b2DebugDraw.prototype.SetLineThickness = function (lineThickness) {\n      if (lineThickness === undefined) lineThickness = 0;\n   }\n   b2DebugDraw.prototype.GetLineThickness = function () {}\n   b2DebugDraw.prototype.SetAlpha = function (alpha) {\n      if (alpha === undefined) alpha = 0;\n   }\n   b2DebugDraw.prototype.GetAlpha = function () {}\n   b2DebugDraw.prototype.SetFillAlpha = function (alpha) {\n      if (alpha === undefined) alpha = 0;\n   }\n   b2DebugDraw.prototype.GetFillAlpha = function () {}\n   b2DebugDraw.prototype.SetXFormScale = function (xformScale) {\n      if (xformScale === undefined) xformScale = 0;\n   }\n   b2DebugDraw.prototype.GetXFormScale = function () {}\n   b2DebugDraw.prototype.DrawPolygon = function (vertices, vertexCount, color) {\n      if (vertexCount === undefined) vertexCount = 0;\n   }\n   b2DebugDraw.prototype.DrawSolidPolygon = function (vertices, vertexCount, color) {\n      if (vertexCount === undefined) vertexCount = 0;\n   }\n   b2DebugDraw.prototype.DrawCircle = function (center, radius, color) {\n      if (radius === undefined) radius = 0;\n   }\n   b2DebugDraw.prototype.DrawSolidCircle = function (center, radius, axis, color) {\n      if (radius === undefined) radius = 0;\n   }\n   b2DebugDraw.prototype.DrawSegment = function (p1, p2, color) {}\n   b2DebugDraw.prototype.DrawTransform = function (xf) {}\n   Box2D.postDefs.push(function () {\n      Box2D.Dynamics.b2DebugDraw.e_shapeBit = 0x0001;\n      Box2D.Dynamics.b2DebugDraw.e_jointBit = 0x0002;\n      Box2D.Dynamics.b2DebugDraw.e_aabbBit = 0x0004;\n      Box2D.Dynamics.b2DebugDraw.e_pairBit = 0x0008;\n      Box2D.Dynamics.b2DebugDraw.e_centerOfMassBit = 0x0010;\n      Box2D.Dynamics.b2DebugDraw.e_controllerBit = 0x0020;\n   });\n   b2DestructionListener.b2DestructionListener = function () {};\n   b2DestructionListener.prototype.SayGoodbyeJoint = function (joint) {}\n   b2DestructionListener.prototype.SayGoodbyeFixture = function (fixture) {}\n   b2FilterData.b2FilterData = function () {\n      this.categoryBits = 0x0001;\n      this.maskBits = 0xFFFF;\n      this.groupIndex = 0;\n   };\n   b2FilterData.prototype.Copy = function () {\n      var copy = new b2FilterData();\n      copy.categoryBits = this.categoryBits;\n      copy.maskBits = this.maskBits;\n      copy.groupIndex = this.groupIndex;\n      return copy;\n   }\n   b2Fixture.b2Fixture = function () {\n      this.m_filter = new b2FilterData();\n   };\n   b2Fixture.prototype.GetType = function () {\n      return this.m_shape.GetType();\n   }\n   b2Fixture.prototype.GetShape = function () {\n      return this.m_shape;\n   }\n   b2Fixture.prototype.SetSensor = function (sensor) {\n      if (this.m_isSensor == sensor) return;\n      this.m_isSensor = sensor;\n      if (this.m_body == null) return;\n      var edge = this.m_body.GetContactList();\n      while (edge) {\n         var contact = edge.contact;\n         var fixtureA = contact.GetFixtureA();\n         var fixtureB = contact.GetFixtureB();\n         if (fixtureA == this || fixtureB == this) contact.SetSensor(fixtureA.IsSensor() || fixtureB.IsSensor());\n         edge = edge.next;\n      }\n   }\n   b2Fixture.prototype.IsSensor = function () {\n      return this.m_isSensor;\n   }\n   b2Fixture.prototype.SetFilterData = function (filter) {\n      this.m_filter = filter.Copy();\n      if (this.m_body) return;\n      var edge = this.m_body.GetContactList();\n      while (edge) {\n         var contact = edge.contact;\n         var fixtureA = contact.GetFixtureA();\n         var fixtureB = contact.GetFixtureB();\n         if (fixtureA == this || fixtureB == this) contact.FlagForFiltering();\n         edge = edge.next;\n      }\n   }\n   b2Fixture.prototype.GetFilterData = function () {\n      return this.m_filter.Copy();\n   }\n   b2Fixture.prototype.GetBody = function () {\n      return this.m_body;\n   }\n   b2Fixture.prototype.GetNext = function () {\n      return this.m_next;\n   }\n   b2Fixture.prototype.GetUserData = function () {\n      return this.m_userData;\n   }\n   b2Fixture.prototype.SetUserData = function (data) {\n      this.m_userData = data;\n   }\n   b2Fixture.prototype.TestPoint = function (p) {\n      return this.m_shape.TestPoint(this.m_body.GetTransform(), p);\n   }\n   b2Fixture.prototype.RayCast = function (output, input) {\n      return this.m_shape.RayCast(output, input, this.m_body.GetTransform());\n   }\n   b2Fixture.prototype.GetMassData = function (massData) {\n      if (massData === undefined) massData = null;\n      if (massData == null) {\n         massData = new b2MassData();\n      }\n      this.m_shape.ComputeMass(massData, this.m_density);\n      return massData;\n   }\n   b2Fixture.prototype.SetDensity = function (density) {\n      if (density === undefined) density = 0;\n      this.m_density = density;\n   }\n   b2Fixture.prototype.GetDensity = function () {\n      return this.m_density;\n   }\n   b2Fixture.prototype.GetFriction = function () {\n      return this.m_friction;\n   }\n   b2Fixture.prototype.SetFriction = function (friction) {\n      if (friction === undefined) friction = 0;\n      this.m_friction = friction;\n   }\n   b2Fixture.prototype.GetRestitution = function () {\n      return this.m_restitution;\n   }\n   b2Fixture.prototype.SetRestitution = function (restitution) {\n      if (restitution === undefined) restitution = 0;\n      this.m_restitution = restitution;\n   }\n   b2Fixture.prototype.GetAABB = function () {\n      return this.m_aabb;\n   }\n   b2Fixture.prototype.b2Fixture = function () {\n      this.m_aabb = new b2AABB();\n      this.m_userData = null;\n      this.m_body = null;\n      this.m_next = null;\n      this.m_shape = null;\n      this.m_density = 0.0;\n      this.m_friction = 0.0;\n      this.m_restitution = 0.0;\n   }\n   b2Fixture.prototype.Create = function (body, xf, def) {\n      this.m_userData = def.userData;\n      this.m_friction = def.friction;\n      this.m_restitution = def.restitution;\n      this.m_body = body;\n      this.m_next = null;\n      this.m_filter = def.filter.Copy();\n      this.m_isSensor = def.isSensor;\n      this.m_shape = def.shape.Copy();\n      this.m_density = def.density;\n   }\n   b2Fixture.prototype.Destroy = function () {\n      this.m_shape = null;\n   }\n   b2Fixture.prototype.CreateProxy = function (broadPhase, xf) {\n      this.m_shape.ComputeAABB(this.m_aabb, xf);\n      this.m_proxy = broadPhase.CreateProxy(this.m_aabb, this);\n   }\n   b2Fixture.prototype.DestroyProxy = function (broadPhase) {\n      if (this.m_proxy == null) {\n         return;\n      }\n      broadPhase.DestroyProxy(this.m_proxy);\n      this.m_proxy = null;\n   }\n   b2Fixture.prototype.Synchronize = function (broadPhase, transform1, transform2) {\n      if (!this.m_proxy) return;\n      var aabb1 = new b2AABB();\n      var aabb2 = new b2AABB();\n      this.m_shape.ComputeAABB(aabb1, transform1);\n      this.m_shape.ComputeAABB(aabb2, transform2);\n      this.m_aabb.Combine(aabb1, aabb2);\n      var displacement = b2Math.SubtractVV(transform2.position, transform1.position);\n      broadPhase.MoveProxy(this.m_proxy, this.m_aabb, displacement);\n   }\n   b2FixtureDef.b2FixtureDef = function () {\n      this.filter = new b2FilterData();\n   };\n   b2FixtureDef.prototype.b2FixtureDef = function () {\n      this.shape = null;\n      this.userData = null;\n      this.friction = 0.2;\n      this.restitution = 0.0;\n      this.density = 0.0;\n      this.filter.categoryBits = 0x0001;\n      this.filter.maskBits = 0xFFFF;\n      this.filter.groupIndex = 0;\n      this.isSensor = false;\n   }\n   b2Island.b2Island = function () {};\n   b2Island.prototype.b2Island = function () {\n      this.m_bodies = new Vector();\n      this.m_contacts = new Vector();\n      this.m_joints = new Vector();\n   }\n   b2Island.prototype.Initialize = function (bodyCapacity, contactCapacity, jointCapacity, allocator, listener, contactSolver) {\n      if (bodyCapacity === undefined) bodyCapacity = 0;\n      if (contactCapacity === undefined) contactCapacity = 0;\n      if (jointCapacity === undefined) jointCapacity = 0;\n      var i = 0;\n      this.m_bodyCapacity = bodyCapacity;\n      this.m_contactCapacity = contactCapacity;\n      this.m_jointCapacity = jointCapacity;\n      this.m_bodyCount = 0;\n      this.m_contactCount = 0;\n      this.m_jointCount = 0;\n      this.m_allocator = allocator;\n      this.m_listener = listener;\n      this.m_contactSolver = contactSolver;\n      for (i = this.m_bodies.length;\n      i < bodyCapacity; i++)\n      this.m_bodies[i] = null;\n      for (i = this.m_contacts.length;\n      i < contactCapacity; i++)\n      this.m_contacts[i] = null;\n      for (i = this.m_joints.length;\n      i < jointCapacity; i++)\n      this.m_joints[i] = null;\n   }\n   b2Island.prototype.Clear = function () {\n      this.m_bodyCount = 0;\n      this.m_contactCount = 0;\n      this.m_jointCount = 0;\n   }\n   b2Island.prototype.Solve = function (step, gravity, allowSleep) {\n      var i = 0;\n      var j = 0;\n      var b;\n      var joint;\n      for (i = 0;\n      i < this.m_bodyCount; ++i) {\n         b = this.m_bodies[i];\n         if (b.GetType() != b2Body.b2_dynamicBody) continue;\n         b.m_linearVelocity.x += step.dt * (gravity.x + b.m_invMass * b.m_force.x);\n         b.m_linearVelocity.y += step.dt * (gravity.y + b.m_invMass * b.m_force.y);\n         b.m_angularVelocity += step.dt * b.m_invI * b.m_torque;\n         b.m_linearVelocity.Multiply(b2Math.Clamp(1.0 - step.dt * b.m_linearDamping, 0.0, 1.0));\n         b.m_angularVelocity *= b2Math.Clamp(1.0 - step.dt * b.m_angularDamping, 0.0, 1.0);\n      }\n      this.m_contactSolver.Initialize(step, this.m_contacts, this.m_contactCount, this.m_allocator);\n      var contactSolver = this.m_contactSolver;\n      contactSolver.InitVelocityConstraints(step);\n      for (i = 0;\n      i < this.m_jointCount; ++i) {\n         joint = this.m_joints[i];\n         joint.InitVelocityConstraints(step);\n      }\n      for (i = 0;\n      i < step.velocityIterations; ++i) {\n         for (j = 0;\n         j < this.m_jointCount; ++j) {\n            joint = this.m_joints[j];\n            joint.SolveVelocityConstraints(step);\n         }\n         contactSolver.SolveVelocityConstraints();\n      }\n      for (i = 0;\n      i < this.m_jointCount; ++i) {\n         joint = this.m_joints[i];\n         joint.FinalizeVelocityConstraints();\n      }\n      contactSolver.FinalizeVelocityConstraints();\n      for (i = 0;\n      i < this.m_bodyCount; ++i) {\n         b = this.m_bodies[i];\n         if (b.GetType() == b2Body.b2_staticBody) continue;\n         var translationX = step.dt * b.m_linearVelocity.x;\n         var translationY = step.dt * b.m_linearVelocity.y;\n         if ((translationX * translationX + translationY * translationY) > b2Settings.b2_maxTranslationSquared) {\n            b.m_linearVelocity.Normalize();\n            b.m_linearVelocity.x *= b2Settings.b2_maxTranslation * step.inv_dt;\n            b.m_linearVelocity.y *= b2Settings.b2_maxTranslation * step.inv_dt;\n         }\n         var rotation = step.dt * b.m_angularVelocity;\n         if (rotation * rotation > b2Settings.b2_maxRotationSquared) {\n            if (b.m_angularVelocity < 0.0) {\n               b.m_angularVelocity = (-b2Settings.b2_maxRotation * step.inv_dt);\n            }\n            else {\n               b.m_angularVelocity = b2Settings.b2_maxRotation * step.inv_dt;\n            }\n         }\n         b.m_sweep.c0.SetV(b.m_sweep.c);\n         b.m_sweep.a0 = b.m_sweep.a;\n         b.m_sweep.c.x += step.dt * b.m_linearVelocity.x;\n         b.m_sweep.c.y += step.dt * b.m_linearVelocity.y;\n         b.m_sweep.a += step.dt * b.m_angularVelocity;\n         b.SynchronizeTransform();\n      }\n      for (i = 0;\n      i < step.positionIterations; ++i) {\n         var contactsOkay = contactSolver.SolvePositionConstraints(b2Settings.b2_contactBaumgarte);\n         var jointsOkay = true;\n         for (j = 0;\n         j < this.m_jointCount; ++j) {\n            joint = this.m_joints[j];\n            var jointOkay = joint.SolvePositionConstraints(b2Settings.b2_contactBaumgarte);\n            jointsOkay = jointsOkay && jointOkay;\n         }\n         if (contactsOkay && jointsOkay) {\n            break;\n         }\n      }\n      this.Report(contactSolver.m_constraints);\n      if (allowSleep) {\n         var minSleepTime = Number.MAX_VALUE;\n         var linTolSqr = b2Settings.b2_linearSleepTolerance * b2Settings.b2_linearSleepTolerance;\n         var angTolSqr = b2Settings.b2_angularSleepTolerance * b2Settings.b2_angularSleepTolerance;\n         for (i = 0;\n         i < this.m_bodyCount; ++i) {\n            b = this.m_bodies[i];\n            if (b.GetType() == b2Body.b2_staticBody) {\n               continue;\n            }\n            if ((b.m_flags & b2Body.e_allowSleepFlag) == 0) {\n               b.m_sleepTime = 0.0;\n               minSleepTime = 0.0;\n            }\n            if ((b.m_flags & b2Body.e_allowSleepFlag) == 0 || b.m_angularVelocity * b.m_angularVelocity > angTolSqr || b2Math.Dot(b.m_linearVelocity, b.m_linearVelocity) > linTolSqr) {\n               b.m_sleepTime = 0.0;\n               minSleepTime = 0.0;\n            }\n            else {\n               b.m_sleepTime += step.dt;\n               minSleepTime = b2Math.Min(minSleepTime, b.m_sleepTime);\n            }\n         }\n         if (minSleepTime >= b2Settings.b2_timeToSleep) {\n            for (i = 0;\n            i < this.m_bodyCount; ++i) {\n               b = this.m_bodies[i];\n               b.SetAwake(false);\n            }\n         }\n      }\n   }\n   b2Island.prototype.SolveTOI = function (subStep) {\n      var i = 0;\n      var j = 0;\n      this.m_contactSolver.Initialize(subStep, this.m_contacts, this.m_contactCount, this.m_allocator);\n      var contactSolver = this.m_contactSolver;\n      for (i = 0;\n      i < this.m_jointCount; ++i) {\n         this.m_joints[i].InitVelocityConstraints(subStep);\n      }\n      for (i = 0;\n      i < subStep.velocityIterations; ++i) {\n         contactSolver.SolveVelocityConstraints();\n         for (j = 0;\n         j < this.m_jointCount; ++j) {\n            this.m_joints[j].SolveVelocityConstraints(subStep);\n         }\n      }\n      for (i = 0;\n      i < this.m_bodyCount; ++i) {\n         var b = this.m_bodies[i];\n         if (b.GetType() == b2Body.b2_staticBody) continue;\n         var translationX = subStep.dt * b.m_linearVelocity.x;\n         var translationY = subStep.dt * b.m_linearVelocity.y;\n         if ((translationX * translationX + translationY * translationY) > b2Settings.b2_maxTranslationSquared) {\n            b.m_linearVelocity.Normalize();\n            b.m_linearVelocity.x *= b2Settings.b2_maxTranslation * subStep.inv_dt;\n            b.m_linearVelocity.y *= b2Settings.b2_maxTranslation * subStep.inv_dt;\n         }\n         var rotation = subStep.dt * b.m_angularVelocity;\n         if (rotation * rotation > b2Settings.b2_maxRotationSquared) {\n            if (b.m_angularVelocity < 0.0) {\n               b.m_angularVelocity = (-b2Settings.b2_maxRotation * subStep.inv_dt);\n            }\n            else {\n               b.m_angularVelocity = b2Settings.b2_maxRotation * subStep.inv_dt;\n            }\n         }\n         b.m_sweep.c0.SetV(b.m_sweep.c);\n         b.m_sweep.a0 = b.m_sweep.a;\n         b.m_sweep.c.x += subStep.dt * b.m_linearVelocity.x;\n         b.m_sweep.c.y += subStep.dt * b.m_linearVelocity.y;\n         b.m_sweep.a += subStep.dt * b.m_angularVelocity;\n         b.SynchronizeTransform();\n      }\n      var k_toiBaumgarte = 0.75;\n      for (i = 0;\n      i < subStep.positionIterations; ++i) {\n         var contactsOkay = contactSolver.SolvePositionConstraints(k_toiBaumgarte);\n         var jointsOkay = true;\n         for (j = 0;\n         j < this.m_jointCount; ++j) {\n            var jointOkay = this.m_joints[j].SolvePositionConstraints(b2Settings.b2_contactBaumgarte);\n            jointsOkay = jointsOkay && jointOkay;\n         }\n         if (contactsOkay && jointsOkay) {\n            break;\n         }\n      }\n      this.Report(contactSolver.m_constraints);\n   }\n   b2Island.prototype.Report = function (constraints) {\n      if (this.m_listener == null) {\n         return;\n      }\n      for (var i = 0; i < this.m_contactCount; ++i) {\n         var c = this.m_contacts[i];\n         var cc = constraints[i];\n         for (var j = 0; j < cc.pointCount; ++j) {\n            b2Island.s_impulse.normalImpulses[j] = cc.points[j].normalImpulse;\n            b2Island.s_impulse.tangentImpulses[j] = cc.points[j].tangentImpulse;\n         }\n         this.m_listener.PostSolve(c, b2Island.s_impulse);\n      }\n   }\n   b2Island.prototype.AddBody = function (body) {\n      body.m_islandIndex = this.m_bodyCount;\n      this.m_bodies[this.m_bodyCount++] = body;\n   }\n   b2Island.prototype.AddContact = function (contact) {\n      this.m_contacts[this.m_contactCount++] = contact;\n   }\n   b2Island.prototype.AddJoint = function (joint) {\n      this.m_joints[this.m_jointCount++] = joint;\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Dynamics.b2Island.s_impulse = new b2ContactImpulse();\n   });\n   b2TimeStep.b2TimeStep = function () {};\n   b2TimeStep.prototype.Set = function (step) {\n      this.dt = step.dt;\n      this.inv_dt = step.inv_dt;\n      this.positionIterations = step.positionIterations;\n      this.velocityIterations = step.velocityIterations;\n      this.warmStarting = step.warmStarting;\n   }\n   b2World.b2World = function () {\n      this.s_stack = new Vector();\n      this.m_contactManager = new b2ContactManager();\n      this.m_contactSolver = new b2ContactSolver();\n      this.m_island = new b2Island();\n   };\n   b2World.prototype.b2World = function (gravity, doSleep) {\n      this.m_destructionListener = null;\n      this.m_debugDraw = null;\n      this.m_bodyList = null;\n      this.m_contactList = null;\n      this.m_jointList = null;\n      this.m_controllerList = null;\n      this.m_bodyCount = 0;\n      this.m_contactCount = 0;\n      this.m_jointCount = 0;\n      this.m_controllerCount = 0;\n      b2World.m_warmStarting = true;\n      b2World.m_continuousPhysics = true;\n      this.m_allowSleep = doSleep;\n      this.m_gravity = gravity;\n      this.m_inv_dt0 = 0.0;\n      this.m_contactManager.m_world = this;\n      var bd = new b2BodyDef();\n      this.m_groundBody = this.CreateBody(bd);\n   }\n   b2World.prototype.SetDestructionListener = function (listener) {\n      this.m_destructionListener = listener;\n   }\n   b2World.prototype.SetContactFilter = function (filter) {\n      this.m_contactManager.m_contactFilter = filter;\n   }\n   b2World.prototype.SetContactListener = function (listener) {\n      this.m_contactManager.m_contactListener = listener;\n   }\n   b2World.prototype.SetDebugDraw = function (debugDraw) {\n      this.m_debugDraw = debugDraw;\n   }\n   b2World.prototype.SetBroadPhase = function (broadPhase) {\n      var oldBroadPhase = this.m_contactManager.m_broadPhase;\n      this.m_contactManager.m_broadPhase = broadPhase;\n      for (var b = this.m_bodyList; b; b = b.m_next) {\n         for (var f = b.m_fixtureList; f; f = f.m_next) {\n            f.m_proxy = broadPhase.CreateProxy(oldBroadPhase.GetFatAABB(f.m_proxy), f);\n         }\n      }\n   }\n   b2World.prototype.Validate = function () {\n      this.m_contactManager.m_broadPhase.Validate();\n   }\n   b2World.prototype.GetProxyCount = function () {\n      return this.m_contactManager.m_broadPhase.GetProxyCount();\n   }\n   b2World.prototype.CreateBody = function (def) {\n      if (this.IsLocked() == true) {\n         return null;\n      }\n      var b = new b2Body(def, this);\n      b.m_prev = null;\n      b.m_next = this.m_bodyList;\n      if (this.m_bodyList) {\n         this.m_bodyList.m_prev = b;\n      }\n      this.m_bodyList = b;\n      ++this.m_bodyCount;\n      return b;\n   }\n   b2World.prototype.DestroyBody = function (b) {\n      if (this.IsLocked() == true) {\n         return;\n      }\n      var jn = b.m_jointList;\n      while (jn) {\n         var jn0 = jn;\n         jn = jn.next;\n         if (this.m_destructionListener) {\n            this.m_destructionListener.SayGoodbyeJoint(jn0.joint);\n         }\n         this.DestroyJoint(jn0.joint);\n      }\n      var coe = b.m_controllerList;\n      while (coe) {\n         var coe0 = coe;\n         coe = coe.nextController;\n         coe0.controller.RemoveBody(b);\n      }\n      var ce = b.m_contactList;\n      while (ce) {\n         var ce0 = ce;\n         ce = ce.next;\n         this.m_contactManager.Destroy(ce0.contact);\n      }\n      b.m_contactList = null;\n      var f = b.m_fixtureList;\n      while (f) {\n         var f0 = f;\n         f = f.m_next;\n         if (this.m_destructionListener) {\n            this.m_destructionListener.SayGoodbyeFixture(f0);\n         }\n         f0.DestroyProxy(this.m_contactManager.m_broadPhase);\n         f0.Destroy();\n      }\n      b.m_fixtureList = null;\n      b.m_fixtureCount = 0;\n      if (b.m_prev) {\n         b.m_prev.m_next = b.m_next;\n      }\n      if (b.m_next) {\n         b.m_next.m_prev = b.m_prev;\n      }\n      if (b == this.m_bodyList) {\n         this.m_bodyList = b.m_next;\n      }--this.m_bodyCount;\n   }\n   b2World.prototype.CreateJoint = function (def) {\n      var j = b2Joint.Create(def, null);\n      j.m_prev = null;\n      j.m_next = this.m_jointList;\n      if (this.m_jointList) {\n         this.m_jointList.m_prev = j;\n      }\n      this.m_jointList = j;\n      ++this.m_jointCount;\n      j.m_edgeA.joint = j;\n      j.m_edgeA.other = j.m_bodyB;\n      j.m_edgeA.prev = null;\n      j.m_edgeA.next = j.m_bodyA.m_jointList;\n      if (j.m_bodyA.m_jointList) j.m_bodyA.m_jointList.prev = j.m_edgeA;\n      j.m_bodyA.m_jointList = j.m_edgeA;\n      j.m_edgeB.joint = j;\n      j.m_edgeB.other = j.m_bodyA;\n      j.m_edgeB.prev = null;\n      j.m_edgeB.next = j.m_bodyB.m_jointList;\n      if (j.m_bodyB.m_jointList) j.m_bodyB.m_jointList.prev = j.m_edgeB;\n      j.m_bodyB.m_jointList = j.m_edgeB;\n      var bodyA = def.bodyA;\n      var bodyB = def.bodyB;\n      if (def.collideConnected == false) {\n         var edge = bodyB.GetContactList();\n         while (edge) {\n            if (edge.other == bodyA) {\n               edge.contact.FlagForFiltering();\n            }\n            edge = edge.next;\n         }\n      }\n      return j;\n   }\n   b2World.prototype.DestroyJoint = function (j) {\n      var collideConnected = j.m_collideConnected;\n      if (j.m_prev) {\n         j.m_prev.m_next = j.m_next;\n      }\n      if (j.m_next) {\n         j.m_next.m_prev = j.m_prev;\n      }\n      if (j == this.m_jointList) {\n         this.m_jointList = j.m_next;\n      }\n      var bodyA = j.m_bodyA;\n      var bodyB = j.m_bodyB;\n      bodyA.SetAwake(true);\n      bodyB.SetAwake(true);\n      if (j.m_edgeA.prev) {\n         j.m_edgeA.prev.next = j.m_edgeA.next;\n      }\n      if (j.m_edgeA.next) {\n         j.m_edgeA.next.prev = j.m_edgeA.prev;\n      }\n      if (j.m_edgeA == bodyA.m_jointList) {\n         bodyA.m_jointList = j.m_edgeA.next;\n      }\n      j.m_edgeA.prev = null;\n      j.m_edgeA.next = null;\n      if (j.m_edgeB.prev) {\n         j.m_edgeB.prev.next = j.m_edgeB.next;\n      }\n      if (j.m_edgeB.next) {\n         j.m_edgeB.next.prev = j.m_edgeB.prev;\n      }\n      if (j.m_edgeB == bodyB.m_jointList) {\n         bodyB.m_jointList = j.m_edgeB.next;\n      }\n      j.m_edgeB.prev = null;\n      j.m_edgeB.next = null;\n      b2Joint.Destroy(j, null);\n      --this.m_jointCount;\n      if (collideConnected == false) {\n         var edge = bodyB.GetContactList();\n         while (edge) {\n            if (edge.other == bodyA) {\n               edge.contact.FlagForFiltering();\n            }\n            edge = edge.next;\n         }\n      }\n   }\n   b2World.prototype.AddController = function (c) {\n      c.m_next = this.m_controllerList;\n      c.m_prev = null;\n      this.m_controllerList = c;\n      c.m_world = this;\n      this.m_controllerCount++;\n      return c;\n   }\n   b2World.prototype.RemoveController = function (c) {\n      if (c.m_prev) c.m_prev.m_next = c.m_next;\n      if (c.m_next) c.m_next.m_prev = c.m_prev;\n      if (this.m_controllerList == c) this.m_controllerList = c.m_next;\n      this.m_controllerCount--;\n   }\n   b2World.prototype.CreateController = function (controller) {\n      if (controller.m_world != this) throw new Error(\"Controller can only be a member of one world\");\n      controller.m_next = this.m_controllerList;\n      controller.m_prev = null;\n      if (this.m_controllerList) this.m_controllerList.m_prev = controller;\n      this.m_controllerList = controller;\n      ++this.m_controllerCount;\n      controller.m_world = this;\n      return controller;\n   }\n   b2World.prototype.DestroyController = function (controller) {\n      controller.Clear();\n      if (controller.m_next) controller.m_next.m_prev = controller.m_prev;\n      if (controller.m_prev) controller.m_prev.m_next = controller.m_next;\n      if (controller == this.m_controllerList) this.m_controllerList = controller.m_next;\n      --this.m_controllerCount;\n   }\n   b2World.prototype.SetWarmStarting = function (flag) {\n      b2World.m_warmStarting = flag;\n   }\n   b2World.prototype.SetContinuousPhysics = function (flag) {\n      b2World.m_continuousPhysics = flag;\n   }\n   b2World.prototype.GetBodyCount = function () {\n      return this.m_bodyCount;\n   }\n   b2World.prototype.GetJointCount = function () {\n      return this.m_jointCount;\n   }\n   b2World.prototype.GetContactCount = function () {\n      return this.m_contactCount;\n   }\n   b2World.prototype.SetGravity = function (gravity) {\n      this.m_gravity = gravity;\n   }\n   b2World.prototype.GetGravity = function () {\n      return this.m_gravity;\n   }\n   b2World.prototype.GetGroundBody = function () {\n      return this.m_groundBody;\n   }\n   b2World.prototype.Step = function (dt, velocityIterations, positionIterations) {\n      if (dt === undefined) dt = 0;\n      if (velocityIterations === undefined) velocityIterations = 0;\n      if (positionIterations === undefined) positionIterations = 0;\n      if (this.m_flags & b2World.e_newFixture) {\n         this.m_contactManager.FindNewContacts();\n         this.m_flags &= ~b2World.e_newFixture;\n      }\n      this.m_flags |= b2World.e_locked;\n      var step = b2World.s_timestep2;\n      step.dt = dt;\n      step.velocityIterations = velocityIterations;\n      step.positionIterations = positionIterations;\n      if (dt > 0.0) {\n         step.inv_dt = 1.0 / dt;\n      }\n      else {\n         step.inv_dt = 0.0;\n      }\n      step.dtRatio = this.m_inv_dt0 * dt;\n      step.warmStarting = b2World.m_warmStarting;\n      this.m_contactManager.Collide();\n      if (step.dt > 0.0) {\n         this.Solve(step);\n      }\n      if (b2World.m_continuousPhysics && step.dt > 0.0) {\n         this.SolveTOI(step);\n      }\n      if (step.dt > 0.0) {\n         this.m_inv_dt0 = step.inv_dt;\n      }\n      this.m_flags &= ~b2World.e_locked;\n   }\n   b2World.prototype.ClearForces = function () {\n      for (var body = this.m_bodyList; body; body = body.m_next) {\n         body.m_force.SetZero();\n         body.m_torque = 0.0;\n      }\n   }\n   b2World.prototype.DrawDebugData = function () {\n      if (this.m_debugDraw == null) {\n         return;\n      }\n      this.m_debugDraw.m_sprite.graphics.clear();\n      var flags = this.m_debugDraw.GetFlags();\n      var i = 0;\n      var b;\n      var f;\n      var s;\n      var j;\n      var bp;\n      var invQ = new b2Vec2;\n      var x1 = new b2Vec2;\n      var x2 = new b2Vec2;\n      var xf;\n      var b1 = new b2AABB();\n      var b2 = new b2AABB();\n      var vs = [new b2Vec2(), new b2Vec2(), new b2Vec2(), new b2Vec2()];\n      var color = new b2Color(0, 0, 0);\n      if (flags & b2DebugDraw.e_shapeBit) {\n         for (b = this.m_bodyList;\n         b; b = b.m_next) {\n            xf = b.m_xf;\n            for (f = b.GetFixtureList();\n            f; f = f.m_next) {\n               s = f.GetShape();\n               if (b.IsActive() == false) {\n                  color.Set(0.5, 0.5, 0.3);\n                  this.DrawShape(s, xf, color);\n               }\n               else if (b.GetType() == b2Body.b2_staticBody) {\n                  color.Set(0.5, 0.9, 0.5);\n                  this.DrawShape(s, xf, color);\n               }\n               else if (b.GetType() == b2Body.b2_kinematicBody) {\n                  color.Set(0.5, 0.5, 0.9);\n                  this.DrawShape(s, xf, color);\n               }\n               else if (b.IsAwake() == false) {\n                  color.Set(0.6, 0.6, 0.6);\n                  this.DrawShape(s, xf, color);\n               }\n               else {\n                  color.Set(0.9, 0.7, 0.7);\n                  this.DrawShape(s, xf, color);\n               }\n            }\n         }\n      }\n      if (flags & b2DebugDraw.e_jointBit) {\n         for (j = this.m_jointList;\n         j; j = j.m_next) {\n            this.DrawJoint(j);\n         }\n      }\n      if (flags & b2DebugDraw.e_controllerBit) {\n         for (var c = this.m_controllerList; c; c = c.m_next) {\n            c.Draw(this.m_debugDraw);\n         }\n      }\n      if (flags & b2DebugDraw.e_pairBit) {\n         color.Set(0.3, 0.9, 0.9);\n         for (var contact = this.m_contactManager.m_contactList; contact; contact = contact.GetNext()) {\n            var fixtureA = contact.GetFixtureA();\n            var fixtureB = contact.GetFixtureB();\n            var cA = fixtureA.GetAABB().GetCenter();\n            var cB = fixtureB.GetAABB().GetCenter();\n            this.m_debugDraw.DrawSegment(cA, cB, color);\n         }\n      }\n      if (flags & b2DebugDraw.e_aabbBit) {\n         bp = this.m_contactManager.m_broadPhase;\n         vs = [new b2Vec2(), new b2Vec2(), new b2Vec2(), new b2Vec2()];\n         for (b = this.m_bodyList;\n         b; b = b.GetNext()) {\n            if (b.IsActive() == false) {\n               continue;\n            }\n            for (f = b.GetFixtureList();\n            f; f = f.GetNext()) {\n               var aabb = bp.GetFatAABB(f.m_proxy);\n               vs[0].Set(aabb.lowerBound.x, aabb.lowerBound.y);\n               vs[1].Set(aabb.upperBound.x, aabb.lowerBound.y);\n               vs[2].Set(aabb.upperBound.x, aabb.upperBound.y);\n               vs[3].Set(aabb.lowerBound.x, aabb.upperBound.y);\n               this.m_debugDraw.DrawPolygon(vs, 4, color);\n            }\n         }\n      }\n      if (flags & b2DebugDraw.e_centerOfMassBit) {\n         for (b = this.m_bodyList;\n         b; b = b.m_next) {\n            xf = b2World.s_xf;\n            xf.R = b.m_xf.R;\n            xf.position = b.GetWorldCenter();\n            this.m_debugDraw.DrawTransform(xf);\n         }\n      }\n   }\n   b2World.prototype.QueryAABB = function (callback, aabb) {\n      var __this = this;\n      var broadPhase = __this.m_contactManager.m_broadPhase;\n\n      function WorldQueryWrapper(proxy) {\n         return callback(broadPhase.GetUserData(proxy));\n      };\n      broadPhase.Query(WorldQueryWrapper, aabb);\n   }\n   b2World.prototype.QueryShape = function (callback, shape, transform) {\n      var __this = this;\n      if (transform === undefined) transform = null;\n      if (transform == null) {\n         transform = new b2Transform();\n         transform.SetIdentity();\n      }\n      var broadPhase = __this.m_contactManager.m_broadPhase;\n\n      function WorldQueryWrapper(proxy) {\n         var fixture = (broadPhase.GetUserData(proxy) instanceof b2Fixture ? broadPhase.GetUserData(proxy) : null);\n         if (b2Shape.TestOverlap(shape, transform, fixture.GetShape(), fixture.GetBody().GetTransform())) return callback(fixture);\n         return true;\n      };\n      var aabb = new b2AABB();\n      shape.ComputeAABB(aabb, transform);\n      broadPhase.Query(WorldQueryWrapper, aabb);\n   }\n   b2World.prototype.QueryPoint = function (callback, p) {\n      var __this = this;\n      var broadPhase = __this.m_contactManager.m_broadPhase;\n\n      function WorldQueryWrapper(proxy) {\n         var fixture = (broadPhase.GetUserData(proxy) instanceof b2Fixture ? broadPhase.GetUserData(proxy) : null);\n         if (fixture.TestPoint(p)) return callback(fixture);\n         return true;\n      };\n      var aabb = new b2AABB();\n      aabb.lowerBound.Set(p.x - b2Settings.b2_linearSlop, p.y - b2Settings.b2_linearSlop);\n      aabb.upperBound.Set(p.x + b2Settings.b2_linearSlop, p.y + b2Settings.b2_linearSlop);\n      broadPhase.Query(WorldQueryWrapper, aabb);\n   }\n   b2World.prototype.RayCast = function (callback, point1, point2) {\n      var __this = this;\n      var broadPhase = __this.m_contactManager.m_broadPhase;\n      var output = new b2RayCastOutput;\n\n      function RayCastWrapper(input, proxy) {\n         var userData = broadPhase.GetUserData(proxy);\n         var fixture = (userData instanceof b2Fixture ? userData : null);\n         var hit = fixture.RayCast(output, input);\n         if (hit) {\n            var fraction = output.fraction;\n            var point = new b2Vec2((1.0 - fraction) * point1.x + fraction * point2.x, (1.0 - fraction) * point1.y + fraction * point2.y);\n            return callback(fixture, point, output.normal, fraction);\n         }\n         return input.maxFraction;\n      };\n      var input = new b2RayCastInput(point1, point2);\n      broadPhase.RayCast(RayCastWrapper, input);\n   }\n   b2World.prototype.RayCastOne = function (point1, point2) {\n      var __this = this;\n      var result;\n\n      function RayCastOneWrapper(fixture, point, normal, fraction) {\n         if (fraction === undefined) fraction = 0;\n         result = fixture;\n         return fraction;\n      };\n      __this.RayCast(RayCastOneWrapper, point1, point2);\n      return result;\n   }\n   b2World.prototype.RayCastAll = function (point1, point2) {\n      var __this = this;\n      var result = new Vector();\n\n      function RayCastAllWrapper(fixture, point, normal, fraction) {\n         if (fraction === undefined) fraction = 0;\n         result[result.length] = fixture;\n         return 1;\n      };\n      __this.RayCast(RayCastAllWrapper, point1, point2);\n      return result;\n   }\n   b2World.prototype.GetBodyList = function () {\n      return this.m_bodyList;\n   }\n   b2World.prototype.GetJointList = function () {\n      return this.m_jointList;\n   }\n   b2World.prototype.GetContactList = function () {\n      return this.m_contactList;\n   }\n   b2World.prototype.IsLocked = function () {\n      return (this.m_flags & b2World.e_locked) > 0;\n   }\n   b2World.prototype.Solve = function (step) {\n      var b;\n      for (var controller = this.m_controllerList; controller; controller = controller.m_next) {\n         controller.Step(step);\n      }\n      var island = this.m_island;\n      island.Initialize(this.m_bodyCount, this.m_contactCount, this.m_jointCount, null, this.m_contactManager.m_contactListener, this.m_contactSolver);\n      for (b = this.m_bodyList;\n      b; b = b.m_next) {\n         b.m_flags &= ~b2Body.e_islandFlag;\n      }\n      for (var c = this.m_contactList; c; c = c.m_next) {\n         c.m_flags &= ~b2Contact.e_islandFlag;\n      }\n      for (var j = this.m_jointList; j; j = j.m_next) {\n         j.m_islandFlag = false;\n      }\n      var stackSize = parseInt(this.m_bodyCount);\n      var stack = this.s_stack;\n      for (var seed = this.m_bodyList; seed; seed = seed.m_next) {\n         if (seed.m_flags & b2Body.e_islandFlag) {\n            continue;\n         }\n         if (seed.IsAwake() == false || seed.IsActive() == false) {\n            continue;\n         }\n         if (seed.GetType() == b2Body.b2_staticBody) {\n            continue;\n         }\n         island.Clear();\n         var stackCount = 0;\n         stack[stackCount++] = seed;\n         seed.m_flags |= b2Body.e_islandFlag;\n         while (stackCount > 0) {\n            b = stack[--stackCount];\n            island.AddBody(b);\n            if (b.IsAwake() == false) {\n               b.SetAwake(true);\n            }\n            if (b.GetType() == b2Body.b2_staticBody) {\n               continue;\n            }\n            var other;\n            for (var ce = b.m_contactList; ce; ce = ce.next) {\n               if (ce.contact.m_flags & b2Contact.e_islandFlag) {\n                  continue;\n               }\n               if (ce.contact.IsSensor() == true || ce.contact.IsEnabled() == false || ce.contact.IsTouching() == false) {\n                  continue;\n               }\n               island.AddContact(ce.contact);\n               ce.contact.m_flags |= b2Contact.e_islandFlag;\n               other = ce.other;\n               if (other.m_flags & b2Body.e_islandFlag) {\n                  continue;\n               }\n               stack[stackCount++] = other;\n               other.m_flags |= b2Body.e_islandFlag;\n            }\n            for (var jn = b.m_jointList; jn; jn = jn.next) {\n               if (jn.joint.m_islandFlag == true) {\n                  continue;\n               }\n               other = jn.other;\n               if (other.IsActive() == false) {\n                  continue;\n               }\n               island.AddJoint(jn.joint);\n               jn.joint.m_islandFlag = true;\n               if (other.m_flags & b2Body.e_islandFlag) {\n                  continue;\n               }\n               stack[stackCount++] = other;\n               other.m_flags |= b2Body.e_islandFlag;\n            }\n         }\n         island.Solve(step, this.m_gravity, this.m_allowSleep);\n         for (var i = 0; i < island.m_bodyCount; ++i) {\n            b = island.m_bodies[i];\n            if (b.GetType() == b2Body.b2_staticBody) {\n               b.m_flags &= ~b2Body.e_islandFlag;\n            }\n         }\n      }\n      for (i = 0;\n      i < stack.length; ++i) {\n         if (!stack[i]) break;\n         stack[i] = null;\n      }\n      for (b = this.m_bodyList;\n      b; b = b.m_next) {\n         if (b.IsAwake() == false || b.IsActive() == false) {\n            continue;\n         }\n         if (b.GetType() == b2Body.b2_staticBody) {\n            continue;\n         }\n         b.SynchronizeFixtures();\n      }\n      this.m_contactManager.FindNewContacts();\n   }\n   b2World.prototype.SolveTOI = function (step) {\n      var b;\n      var fA;\n      var fB;\n      var bA;\n      var bB;\n      var cEdge;\n      var j;\n      var island = this.m_island;\n      island.Initialize(this.m_bodyCount, b2Settings.b2_maxTOIContactsPerIsland, b2Settings.b2_maxTOIJointsPerIsland, null, this.m_contactManager.m_contactListener, this.m_contactSolver);\n      var queue = b2World.s_queue;\n      for (b = this.m_bodyList;\n      b; b = b.m_next) {\n         b.m_flags &= ~b2Body.e_islandFlag;\n         b.m_sweep.t0 = 0.0;\n      }\n      var c;\n      for (c = this.m_contactList;\n      c; c = c.m_next) {\n         c.m_flags &= ~ (b2Contact.e_toiFlag | b2Contact.e_islandFlag);\n      }\n      for (j = this.m_jointList;\n      j; j = j.m_next) {\n         j.m_islandFlag = false;\n      }\n      for (;;) {\n         var minContact = null;\n         var minTOI = 1.0;\n         for (c = this.m_contactList;\n         c; c = c.m_next) {\n            if (c.IsSensor() == true || c.IsEnabled() == false || c.IsContinuous() == false) {\n               continue;\n            }\n            var toi = 1.0;\n            if (c.m_flags & b2Contact.e_toiFlag) {\n               toi = c.m_toi;\n            }\n            else {\n               fA = c.m_fixtureA;\n               fB = c.m_fixtureB;\n               bA = fA.m_body;\n               bB = fB.m_body;\n               if ((bA.GetType() != b2Body.b2_dynamicBody || bA.IsAwake() == false) && (bB.GetType() != b2Body.b2_dynamicBody || bB.IsAwake() == false)) {\n                  continue;\n               }\n               var t0 = bA.m_sweep.t0;\n               if (bA.m_sweep.t0 < bB.m_sweep.t0) {\n                  t0 = bB.m_sweep.t0;\n                  bA.m_sweep.Advance(t0);\n               }\n               else if (bB.m_sweep.t0 < bA.m_sweep.t0) {\n                  t0 = bA.m_sweep.t0;\n                  bB.m_sweep.Advance(t0);\n               }\n               toi = c.ComputeTOI(bA.m_sweep, bB.m_sweep);\n               b2Settings.b2Assert(0.0 <= toi && toi <= 1.0);\n               if (toi > 0.0 && toi < 1.0) {\n                  toi = (1.0 - toi) * t0 + toi;\n                  if (toi > 1) toi = 1;\n               }\n               c.m_toi = toi;\n               c.m_flags |= b2Contact.e_toiFlag;\n            }\n            if (Number.MIN_VALUE < toi && toi < minTOI) {\n               minContact = c;\n               minTOI = toi;\n            }\n         }\n         if (minContact == null || 1.0 - 100.0 * Number.MIN_VALUE < minTOI) {\n            break;\n         }\n         fA = minContact.m_fixtureA;\n         fB = minContact.m_fixtureB;\n         bA = fA.m_body;\n         bB = fB.m_body;\n         b2World.s_backupA.Set(bA.m_sweep);\n         b2World.s_backupB.Set(bB.m_sweep);\n         bA.Advance(minTOI);\n         bB.Advance(minTOI);\n         minContact.Update(this.m_contactManager.m_contactListener);\n         minContact.m_flags &= ~b2Contact.e_toiFlag;\n         if (minContact.IsSensor() == true || minContact.IsEnabled() == false) {\n            bA.m_sweep.Set(b2World.s_backupA);\n            bB.m_sweep.Set(b2World.s_backupB);\n            bA.SynchronizeTransform();\n            bB.SynchronizeTransform();\n            continue;\n         }\n         if (minContact.IsTouching() == false) {\n            continue;\n         }\n         var seed = bA;\n         if (seed.GetType() != b2Body.b2_dynamicBody) {\n            seed = bB;\n         }\n         island.Clear();\n         var queueStart = 0;\n         var queueSize = 0;\n         queue[queueStart + queueSize++] = seed;\n         seed.m_flags |= b2Body.e_islandFlag;\n         while (queueSize > 0) {\n            b = queue[queueStart++];\n            --queueSize;\n            island.AddBody(b);\n            if (b.IsAwake() == false) {\n               b.SetAwake(true);\n            }\n            if (b.GetType() != b2Body.b2_dynamicBody) {\n               continue;\n            }\n            for (cEdge = b.m_contactList;\n            cEdge; cEdge = cEdge.next) {\n               if (island.m_contactCount == island.m_contactCapacity) {\n                  break;\n               }\n               if (cEdge.contact.m_flags & b2Contact.e_islandFlag) {\n                  continue;\n               }\n               if (cEdge.contact.IsSensor() == true || cEdge.contact.IsEnabled() == false || cEdge.contact.IsTouching() == false) {\n                  continue;\n               }\n               island.AddContact(cEdge.contact);\n               cEdge.contact.m_flags |= b2Contact.e_islandFlag;\n               var other = cEdge.other;\n               if (other.m_flags & b2Body.e_islandFlag) {\n                  continue;\n               }\n               if (other.GetType() != b2Body.b2_staticBody) {\n                  other.Advance(minTOI);\n                  other.SetAwake(true);\n               }\n               queue[queueStart + queueSize] = other;\n               ++queueSize;\n               other.m_flags |= b2Body.e_islandFlag;\n            }\n            for (var jEdge = b.m_jointList; jEdge; jEdge = jEdge.next) {\n               if (island.m_jointCount == island.m_jointCapacity) continue;\n               if (jEdge.joint.m_islandFlag == true) continue;\n               other = jEdge.other;\n               if (other.IsActive() == false) {\n                  continue;\n               }\n               island.AddJoint(jEdge.joint);\n               jEdge.joint.m_islandFlag = true;\n               if (other.m_flags & b2Body.e_islandFlag) continue;\n               if (other.GetType() != b2Body.b2_staticBody) {\n                  other.Advance(minTOI);\n                  other.SetAwake(true);\n               }\n               queue[queueStart + queueSize] = other;\n               ++queueSize;\n               other.m_flags |= b2Body.e_islandFlag;\n            }\n         }\n         var subStep = b2World.s_timestep;\n         subStep.warmStarting = false;\n         subStep.dt = (1.0 - minTOI) * step.dt;\n         subStep.inv_dt = 1.0 / subStep.dt;\n         subStep.dtRatio = 0.0;\n         subStep.velocityIterations = step.velocityIterations;\n         subStep.positionIterations = step.positionIterations;\n         island.SolveTOI(subStep);\n         var i = 0;\n         for (i = 0;\n         i < island.m_bodyCount; ++i) {\n            b = island.m_bodies[i];\n            b.m_flags &= ~b2Body.e_islandFlag;\n            if (b.IsAwake() == false) {\n               continue;\n            }\n            if (b.GetType() != b2Body.b2_dynamicBody) {\n               continue;\n            }\n            b.SynchronizeFixtures();\n            for (cEdge = b.m_contactList;\n            cEdge; cEdge = cEdge.next) {\n               cEdge.contact.m_flags &= ~b2Contact.e_toiFlag;\n            }\n         }\n         for (i = 0;\n         i < island.m_contactCount; ++i) {\n            c = island.m_contacts[i];\n            c.m_flags &= ~ (b2Contact.e_toiFlag | b2Contact.e_islandFlag);\n         }\n         for (i = 0;\n         i < island.m_jointCount; ++i) {\n            j = island.m_joints[i];\n            j.m_islandFlag = false;\n         }\n         this.m_contactManager.FindNewContacts();\n      }\n   }\n   b2World.prototype.DrawJoint = function (joint) {\n      var b1 = joint.GetBodyA();\n      var b2 = joint.GetBodyB();\n      var xf1 = b1.m_xf;\n      var xf2 = b2.m_xf;\n      var x1 = xf1.position;\n      var x2 = xf2.position;\n      var p1 = joint.GetAnchorA();\n      var p2 = joint.GetAnchorB();\n      var color = b2World.s_jointColor;\n      switch (joint.m_type) {\n      case b2Joint.e_distanceJoint:\n         this.m_debugDraw.DrawSegment(p1, p2, color);\n         break;\n      case b2Joint.e_pulleyJoint:\n         {\n            var pulley = ((joint instanceof b2PulleyJoint ? joint : null));\n            var s1 = pulley.GetGroundAnchorA();\n            var s2 = pulley.GetGroundAnchorB();\n            this.m_debugDraw.DrawSegment(s1, p1, color);\n            this.m_debugDraw.DrawSegment(s2, p2, color);\n            this.m_debugDraw.DrawSegment(s1, s2, color);\n         }\n         break;\n      case b2Joint.e_mouseJoint:\n         this.m_debugDraw.DrawSegment(p1, p2, color);\n         break;\n      default:\n         if (b1 != this.m_groundBody) this.m_debugDraw.DrawSegment(x1, p1, color);\n         this.m_debugDraw.DrawSegment(p1, p2, color);\n         if (b2 != this.m_groundBody) this.m_debugDraw.DrawSegment(x2, p2, color);\n      }\n   }\n   b2World.prototype.DrawShape = function (shape, xf, color) {\n      switch (shape.m_type) {\n      case b2Shape.e_circleShape:\n         {\n            var circle = ((shape instanceof b2CircleShape ? shape : null));\n            var center = b2Math.MulX(xf, circle.m_p);\n            var radius = circle.m_radius;\n            var axis = xf.R.col1;\n            this.m_debugDraw.DrawSolidCircle(center, radius, axis, color);\n         }\n         break;\n      case b2Shape.e_polygonShape:\n         {\n            var i = 0;\n            var poly = ((shape instanceof b2PolygonShape ? shape : null));\n            var vertexCount = parseInt(poly.GetVertexCount());\n            var localVertices = poly.GetVertices();\n            var vertices = new Vector(vertexCount);\n            for (i = 0;\n            i < vertexCount; ++i) {\n               vertices[i] = b2Math.MulX(xf, localVertices[i]);\n            }\n            this.m_debugDraw.DrawSolidPolygon(vertices, vertexCount, color);\n         }\n         break;\n      case b2Shape.e_edgeShape:\n         {\n            var edge = (shape instanceof b2EdgeShape ? shape : null);\n            this.m_debugDraw.DrawSegment(b2Math.MulX(xf, edge.GetVertex1()), b2Math.MulX(xf, edge.GetVertex2()), color);\n         }\n         break;\n      }\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Dynamics.b2World.s_timestep2 = new b2TimeStep();\n      Box2D.Dynamics.b2World.s_xf = new b2Transform();\n      Box2D.Dynamics.b2World.s_backupA = new b2Sweep();\n      Box2D.Dynamics.b2World.s_backupB = new b2Sweep();\n      Box2D.Dynamics.b2World.s_timestep = new b2TimeStep();\n      Box2D.Dynamics.b2World.s_queue = new Vector();\n      Box2D.Dynamics.b2World.s_jointColor = new b2Color(0.5, 0.8, 0.8);\n      Box2D.Dynamics.b2World.e_newFixture = 0x0001;\n      Box2D.Dynamics.b2World.e_locked = 0x0002;\n   });\n})();\n(function () {\n   var b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,\n      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,\n      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,\n      b2MassData = Box2D.Collision.Shapes.b2MassData,\n      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,\n      b2Shape = Box2D.Collision.Shapes.b2Shape,\n      b2CircleContact = Box2D.Dynamics.Contacts.b2CircleContact,\n      b2Contact = Box2D.Dynamics.Contacts.b2Contact,\n      b2ContactConstraint = Box2D.Dynamics.Contacts.b2ContactConstraint,\n      b2ContactConstraintPoint = Box2D.Dynamics.Contacts.b2ContactConstraintPoint,\n      b2ContactEdge = Box2D.Dynamics.Contacts.b2ContactEdge,\n      b2ContactFactory = Box2D.Dynamics.Contacts.b2ContactFactory,\n      b2ContactRegister = Box2D.Dynamics.Contacts.b2ContactRegister,\n      b2ContactResult = Box2D.Dynamics.Contacts.b2ContactResult,\n      b2ContactSolver = Box2D.Dynamics.Contacts.b2ContactSolver,\n      b2EdgeAndCircleContact = Box2D.Dynamics.Contacts.b2EdgeAndCircleContact,\n      b2NullContact = Box2D.Dynamics.Contacts.b2NullContact,\n      b2PolyAndCircleContact = Box2D.Dynamics.Contacts.b2PolyAndCircleContact,\n      b2PolyAndEdgeContact = Box2D.Dynamics.Contacts.b2PolyAndEdgeContact,\n      b2PolygonContact = Box2D.Dynamics.Contacts.b2PolygonContact,\n      b2PositionSolverManifold = Box2D.Dynamics.Contacts.b2PositionSolverManifold,\n      b2Body = Box2D.Dynamics.b2Body,\n      b2BodyDef = Box2D.Dynamics.b2BodyDef,\n      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,\n      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,\n      b2ContactListener = Box2D.Dynamics.b2ContactListener,\n      b2ContactManager = Box2D.Dynamics.b2ContactManager,\n      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,\n      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,\n      b2FilterData = Box2D.Dynamics.b2FilterData,\n      b2Fixture = Box2D.Dynamics.b2Fixture,\n      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,\n      b2Island = Box2D.Dynamics.b2Island,\n      b2TimeStep = Box2D.Dynamics.b2TimeStep,\n      b2World = Box2D.Dynamics.b2World,\n      b2Color = Box2D.Common.b2Color,\n      b2internal = Box2D.Common.b2internal,\n      b2Settings = Box2D.Common.b2Settings,\n      b2Mat22 = Box2D.Common.Math.b2Mat22,\n      b2Mat33 = Box2D.Common.Math.b2Mat33,\n      b2Math = Box2D.Common.Math.b2Math,\n      b2Sweep = Box2D.Common.Math.b2Sweep,\n      b2Transform = Box2D.Common.Math.b2Transform,\n      b2Vec2 = Box2D.Common.Math.b2Vec2,\n      b2Vec3 = Box2D.Common.Math.b2Vec3,\n      b2AABB = Box2D.Collision.b2AABB,\n      b2Bound = Box2D.Collision.b2Bound,\n      b2BoundValues = Box2D.Collision.b2BoundValues,\n      b2Collision = Box2D.Collision.b2Collision,\n      b2ContactID = Box2D.Collision.b2ContactID,\n      b2ContactPoint = Box2D.Collision.b2ContactPoint,\n      b2Distance = Box2D.Collision.b2Distance,\n      b2DistanceInput = Box2D.Collision.b2DistanceInput,\n      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,\n      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,\n      b2DynamicTree = Box2D.Collision.b2DynamicTree,\n      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,\n      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,\n      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,\n      b2Manifold = Box2D.Collision.b2Manifold,\n      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,\n      b2Point = Box2D.Collision.b2Point,\n      b2RayCastInput = Box2D.Collision.b2RayCastInput,\n      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,\n      b2Segment = Box2D.Collision.b2Segment,\n      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,\n      b2Simplex = Box2D.Collision.b2Simplex,\n      b2SimplexCache = Box2D.Collision.b2SimplexCache,\n      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,\n      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,\n      b2TOIInput = Box2D.Collision.b2TOIInput,\n      b2WorldManifold = Box2D.Collision.b2WorldManifold,\n      ClipVertex = Box2D.Collision.ClipVertex,\n      Features = Box2D.Collision.Features,\n      IBroadPhase = Box2D.Collision.IBroadPhase;\n\n   Box2D.inherit(b2CircleContact, Box2D.Dynamics.Contacts.b2Contact);\n   b2CircleContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;\n   b2CircleContact.b2CircleContact = function () {\n      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);\n   };\n   b2CircleContact.Create = function (allocator) {\n      return new b2CircleContact();\n   }\n   b2CircleContact.Destroy = function (contact, allocator) {}\n   b2CircleContact.prototype.Reset = function (fixtureA, fixtureB) {\n      this.__super.Reset.call(this, fixtureA, fixtureB);\n   }\n   b2CircleContact.prototype.Evaluate = function () {\n      var bA = this.m_fixtureA.GetBody();\n      var bB = this.m_fixtureB.GetBody();\n      b2Collision.CollideCircles(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2CircleShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2CircleShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);\n   }\n   b2Contact.b2Contact = function () {\n      this.m_nodeA = new b2ContactEdge();\n      this.m_nodeB = new b2ContactEdge();\n      this.m_manifold = new b2Manifold();\n      this.m_oldManifold = new b2Manifold();\n   };\n   b2Contact.prototype.GetManifold = function () {\n      return this.m_manifold;\n   }\n   b2Contact.prototype.GetWorldManifold = function (worldManifold) {\n      var bodyA = this.m_fixtureA.GetBody();\n      var bodyB = this.m_fixtureB.GetBody();\n      var shapeA = this.m_fixtureA.GetShape();\n      var shapeB = this.m_fixtureB.GetShape();\n      worldManifold.Initialize(this.m_manifold, bodyA.GetTransform(), shapeA.m_radius, bodyB.GetTransform(), shapeB.m_radius);\n   }\n   b2Contact.prototype.IsTouching = function () {\n      return (this.m_flags & b2Contact.e_touchingFlag) == b2Contact.e_touchingFlag;\n   }\n   b2Contact.prototype.IsContinuous = function () {\n      return (this.m_flags & b2Contact.e_continuousFlag) == b2Contact.e_continuousFlag;\n   }\n   b2Contact.prototype.SetSensor = function (sensor) {\n      if (sensor) {\n         this.m_flags |= b2Contact.e_sensorFlag;\n      }\n      else {\n         this.m_flags &= ~b2Contact.e_sensorFlag;\n      }\n   }\n   b2Contact.prototype.IsSensor = function () {\n      return (this.m_flags & b2Contact.e_sensorFlag) == b2Contact.e_sensorFlag;\n   }\n   b2Contact.prototype.SetEnabled = function (flag) {\n      if (flag) {\n         this.m_flags |= b2Contact.e_enabledFlag;\n      }\n      else {\n         this.m_flags &= ~b2Contact.e_enabledFlag;\n      }\n   }\n   b2Contact.prototype.IsEnabled = function () {\n      return (this.m_flags & b2Contact.e_enabledFlag) == b2Contact.e_enabledFlag;\n   }\n   b2Contact.prototype.GetNext = function () {\n      return this.m_next;\n   }\n   b2Contact.prototype.GetFixtureA = function () {\n      return this.m_fixtureA;\n   }\n   b2Contact.prototype.GetFixtureB = function () {\n      return this.m_fixtureB;\n   }\n   b2Contact.prototype.FlagForFiltering = function () {\n      this.m_flags |= b2Contact.e_filterFlag;\n   }\n   b2Contact.prototype.b2Contact = function () {}\n   b2Contact.prototype.Reset = function (fixtureA, fixtureB) {\n      if (fixtureA === undefined) fixtureA = null;\n      if (fixtureB === undefined) fixtureB = null;\n      this.m_flags = b2Contact.e_enabledFlag;\n      if (!fixtureA || !fixtureB) {\n         this.m_fixtureA = null;\n         this.m_fixtureB = null;\n         return;\n      }\n      if (fixtureA.IsSensor() || fixtureB.IsSensor()) {\n         this.m_flags |= b2Contact.e_sensorFlag;\n      }\n      var bodyA = fixtureA.GetBody();\n      var bodyB = fixtureB.GetBody();\n      if (bodyA.GetType() != b2Body.b2_dynamicBody || bodyA.IsBullet() || bodyB.GetType() != b2Body.b2_dynamicBody || bodyB.IsBullet()) {\n         this.m_flags |= b2Contact.e_continuousFlag;\n      }\n      this.m_fixtureA = fixtureA;\n      this.m_fixtureB = fixtureB;\n      this.m_manifold.m_pointCount = 0;\n      this.m_prev = null;\n      this.m_next = null;\n      this.m_nodeA.contact = null;\n      this.m_nodeA.prev = null;\n      this.m_nodeA.next = null;\n      this.m_nodeA.other = null;\n      this.m_nodeB.contact = null;\n      this.m_nodeB.prev = null;\n      this.m_nodeB.next = null;\n      this.m_nodeB.other = null;\n   }\n   b2Contact.prototype.Update = function (listener) {\n      var tManifold = this.m_oldManifold;\n      this.m_oldManifold = this.m_manifold;\n      this.m_manifold = tManifold;\n      this.m_flags |= b2Contact.e_enabledFlag;\n      var touching = false;\n      var wasTouching = (this.m_flags & b2Contact.e_touchingFlag) == b2Contact.e_touchingFlag;\n      var bodyA = this.m_fixtureA.m_body;\n      var bodyB = this.m_fixtureB.m_body;\n      var aabbOverlap = this.m_fixtureA.m_aabb.TestOverlap(this.m_fixtureB.m_aabb);\n      if (this.m_flags & b2Contact.e_sensorFlag) {\n         if (aabbOverlap) {\n            var shapeA = this.m_fixtureA.GetShape();\n            var shapeB = this.m_fixtureB.GetShape();\n            var xfA = bodyA.GetTransform();\n            var xfB = bodyB.GetTransform();\n            touching = b2Shape.TestOverlap(shapeA, xfA, shapeB, xfB);\n         }\n         this.m_manifold.m_pointCount = 0;\n      }\n      else {\n         if (bodyA.GetType() != b2Body.b2_dynamicBody || bodyA.IsBullet() || bodyB.GetType() != b2Body.b2_dynamicBody || bodyB.IsBullet()) {\n            this.m_flags |= b2Contact.e_continuousFlag;\n         }\n         else {\n            this.m_flags &= ~b2Contact.e_continuousFlag;\n         }\n         if (aabbOverlap) {\n            this.Evaluate();\n            touching = this.m_manifold.m_pointCount > 0;\n            for (var i = 0; i < this.m_manifold.m_pointCount; ++i) {\n               var mp2 = this.m_manifold.m_points[i];\n               mp2.m_normalImpulse = 0.0;\n               mp2.m_tangentImpulse = 0.0;\n               var id2 = mp2.m_id;\n               for (var j = 0; j < this.m_oldManifold.m_pointCount; ++j) {\n                  var mp1 = this.m_oldManifold.m_points[j];\n                  if (mp1.m_id.key == id2.key) {\n                     mp2.m_normalImpulse = mp1.m_normalImpulse;\n                     mp2.m_tangentImpulse = mp1.m_tangentImpulse;\n                     break;\n                  }\n               }\n            }\n         }\n         else {\n            this.m_manifold.m_pointCount = 0;\n         }\n         if (touching != wasTouching) {\n            bodyA.SetAwake(true);\n            bodyB.SetAwake(true);\n         }\n      }\n      if (touching) {\n         this.m_flags |= b2Contact.e_touchingFlag;\n      }\n      else {\n         this.m_flags &= ~b2Contact.e_touchingFlag;\n      }\n      if (wasTouching == false && touching == true) {\n         listener.BeginContact(this);\n      }\n      if (wasTouching == true && touching == false) {\n         listener.EndContact(this);\n      }\n      if ((this.m_flags & b2Contact.e_sensorFlag) == 0) {\n         listener.PreSolve(this, this.m_oldManifold);\n      }\n   }\n   b2Contact.prototype.Evaluate = function () {}\n   b2Contact.prototype.ComputeTOI = function (sweepA, sweepB) {\n      b2Contact.s_input.proxyA.Set(this.m_fixtureA.GetShape());\n      b2Contact.s_input.proxyB.Set(this.m_fixtureB.GetShape());\n      b2Contact.s_input.sweepA = sweepA;\n      b2Contact.s_input.sweepB = sweepB;\n      b2Contact.s_input.tolerance = b2Settings.b2_linearSlop;\n      return b2TimeOfImpact.TimeOfImpact(b2Contact.s_input);\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag = 0x0001;\n      Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag = 0x0002;\n      Box2D.Dynamics.Contacts.b2Contact.e_islandFlag = 0x0004;\n      Box2D.Dynamics.Contacts.b2Contact.e_toiFlag = 0x0008;\n      Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag = 0x0010;\n      Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag = 0x0020;\n      Box2D.Dynamics.Contacts.b2Contact.e_filterFlag = 0x0040;\n      Box2D.Dynamics.Contacts.b2Contact.s_input = new b2TOIInput();\n   });\n   b2ContactConstraint.b2ContactConstraint = function () {\n      this.localPlaneNormal = new b2Vec2();\n      this.localPoint = new b2Vec2();\n      this.normal = new b2Vec2();\n      this.normalMass = new b2Mat22();\n      this.K = new b2Mat22();\n   };\n   b2ContactConstraint.prototype.b2ContactConstraint = function () {\n      this.points = new Vector(b2Settings.b2_maxManifoldPoints);\n      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {\n         this.points[i] = new b2ContactConstraintPoint();\n      }\n   }\n   b2ContactConstraintPoint.b2ContactConstraintPoint = function () {\n      this.localPoint = new b2Vec2();\n      this.rA = new b2Vec2();\n      this.rB = new b2Vec2();\n   };\n   b2ContactEdge.b2ContactEdge = function () {};\n   b2ContactFactory.b2ContactFactory = function () {};\n   b2ContactFactory.prototype.b2ContactFactory = function (allocator) {\n      this.m_allocator = allocator;\n      this.InitializeRegisters();\n   }\n   b2ContactFactory.prototype.AddType = function (createFcn, destroyFcn, type1, type2) {\n      if (type1 === undefined) type1 = 0;\n      if (type2 === undefined) type2 = 0;\n      this.m_registers[type1][type2].createFcn = createFcn;\n      this.m_registers[type1][type2].destroyFcn = destroyFcn;\n      this.m_registers[type1][type2].primary = true;\n      if (type1 != type2) {\n         this.m_registers[type2][type1].createFcn = createFcn;\n         this.m_registers[type2][type1].destroyFcn = destroyFcn;\n         this.m_registers[type2][type1].primary = false;\n      }\n   }\n   b2ContactFactory.prototype.InitializeRegisters = function () {\n      this.m_registers = new Vector(b2Shape.e_shapeTypeCount);\n      for (var i = 0; i < b2Shape.e_shapeTypeCount; i++) {\n         this.m_registers[i] = new Vector(b2Shape.e_shapeTypeCount);\n         for (var j = 0; j < b2Shape.e_shapeTypeCount; j++) {\n            this.m_registers[i][j] = new b2ContactRegister();\n         }\n      }\n      this.AddType(b2CircleContact.Create, b2CircleContact.Destroy, b2Shape.e_circleShape, b2Shape.e_circleShape);\n      this.AddType(b2PolyAndCircleContact.Create, b2PolyAndCircleContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_circleShape);\n      this.AddType(b2PolygonContact.Create, b2PolygonContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_polygonShape);\n      this.AddType(b2EdgeAndCircleContact.Create, b2EdgeAndCircleContact.Destroy, b2Shape.e_edgeShape, b2Shape.e_circleShape);\n      this.AddType(b2PolyAndEdgeContact.Create, b2PolyAndEdgeContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_edgeShape);\n   }\n   b2ContactFactory.prototype.Create = function (fixtureA, fixtureB) {\n      var type1 = parseInt(fixtureA.GetType());\n      var type2 = parseInt(fixtureB.GetType());\n      var reg = this.m_registers[type1][type2];\n      var c;\n      if (reg.pool) {\n         c = reg.pool;\n         reg.pool = c.m_next;\n         reg.poolCount--;\n         c.Reset(fixtureA, fixtureB);\n         return c;\n      }\n      var createFcn = reg.createFcn;\n      if (createFcn != null) {\n         if (reg.primary) {\n            c = createFcn(this.m_allocator);\n            c.Reset(fixtureA, fixtureB);\n            return c;\n         }\n         else {\n            c = createFcn(this.m_allocator);\n            c.Reset(fixtureB, fixtureA);\n            return c;\n         }\n      }\n      else {\n         return null;\n      }\n   }\n   b2ContactFactory.prototype.Destroy = function (contact) {\n      if (contact.m_manifold.m_pointCount > 0) {\n         contact.m_fixtureA.m_body.SetAwake(true);\n         contact.m_fixtureB.m_body.SetAwake(true);\n      }\n      var type1 = parseInt(contact.m_fixtureA.GetType());\n      var type2 = parseInt(contact.m_fixtureB.GetType());\n      var reg = this.m_registers[type1][type2];\n      if (true) {\n         reg.poolCount++;\n         contact.m_next = reg.pool;\n         reg.pool = contact;\n      }\n      var destroyFcn = reg.destroyFcn;\n      destroyFcn(contact, this.m_allocator);\n   }\n   b2ContactRegister.b2ContactRegister = function () {};\n   b2ContactResult.b2ContactResult = function () {\n      this.position = new b2Vec2();\n      this.normal = new b2Vec2();\n      this.id = new b2ContactID();\n   };\n   b2ContactSolver.b2ContactSolver = function () {\n      this.m_step = new b2TimeStep();\n      this.m_constraints = new Vector();\n   };\n   b2ContactSolver.prototype.b2ContactSolver = function () {}\n   b2ContactSolver.prototype.Initialize = function (step, contacts, contactCount, allocator) {\n      if (contactCount === undefined) contactCount = 0;\n      var contact;\n      this.m_step.Set(step);\n      this.m_allocator = allocator;\n      var i = 0;\n      var tVec;\n      var tMat;\n      this.m_constraintCount = contactCount;\n      while (this.m_constraints.length < this.m_constraintCount) {\n         this.m_constraints[this.m_constraints.length] = new b2ContactConstraint();\n      }\n      for (i = 0;\n      i < contactCount; ++i) {\n         contact = contacts[i];\n         var fixtureA = contact.m_fixtureA;\n         var fixtureB = contact.m_fixtureB;\n         var shapeA = fixtureA.m_shape;\n         var shapeB = fixtureB.m_shape;\n         var radiusA = shapeA.m_radius;\n         var radiusB = shapeB.m_radius;\n         var bodyA = fixtureA.m_body;\n         var bodyB = fixtureB.m_body;\n         var manifold = contact.GetManifold();\n         var friction = b2Settings.b2MixFriction(fixtureA.GetFriction(), fixtureB.GetFriction());\n         var restitution = b2Settings.b2MixRestitution(fixtureA.GetRestitution(), fixtureB.GetRestitution());\n         var vAX = bodyA.m_linearVelocity.x;\n         var vAY = bodyA.m_linearVelocity.y;\n         var vBX = bodyB.m_linearVelocity.x;\n         var vBY = bodyB.m_linearVelocity.y;\n         var wA = bodyA.m_angularVelocity;\n         var wB = bodyB.m_angularVelocity;\n         b2Settings.b2Assert(manifold.m_pointCount > 0);\n         b2ContactSolver.s_worldManifold.Initialize(manifold, bodyA.m_xf, radiusA, bodyB.m_xf, radiusB);\n         var normalX = b2ContactSolver.s_worldManifold.m_normal.x;\n         var normalY = b2ContactSolver.s_worldManifold.m_normal.y;\n         var cc = this.m_constraints[i];\n         cc.bodyA = bodyA;\n         cc.bodyB = bodyB;\n         cc.manifold = manifold;\n         cc.normal.x = normalX;\n         cc.normal.y = normalY;\n         cc.pointCount = manifold.m_pointCount;\n         cc.friction = friction;\n         cc.restitution = restitution;\n         cc.localPlaneNormal.x = manifold.m_localPlaneNormal.x;\n         cc.localPlaneNormal.y = manifold.m_localPlaneNormal.y;\n         cc.localPoint.x = manifold.m_localPoint.x;\n         cc.localPoint.y = manifold.m_localPoint.y;\n         cc.radius = radiusA + radiusB;\n         cc.type = manifold.m_type;\n         for (var k = 0; k < cc.pointCount; ++k) {\n            var cp = manifold.m_points[k];\n            var ccp = cc.points[k];\n            ccp.normalImpulse = cp.m_normalImpulse;\n            ccp.tangentImpulse = cp.m_tangentImpulse;\n            ccp.localPoint.SetV(cp.m_localPoint);\n            var rAX = ccp.rA.x = b2ContactSolver.s_worldManifold.m_points[k].x - bodyA.m_sweep.c.x;\n            var rAY = ccp.rA.y = b2ContactSolver.s_worldManifold.m_points[k].y - bodyA.m_sweep.c.y;\n            var rBX = ccp.rB.x = b2ContactSolver.s_worldManifold.m_points[k].x - bodyB.m_sweep.c.x;\n            var rBY = ccp.rB.y = b2ContactSolver.s_worldManifold.m_points[k].y - bodyB.m_sweep.c.y;\n            var rnA = rAX * normalY - rAY * normalX;\n            var rnB = rBX * normalY - rBY * normalX;\n            rnA *= rnA;\n            rnB *= rnB;\n            var kNormal = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rnA + bodyB.m_invI * rnB;\n            ccp.normalMass = 1.0 / kNormal;\n            var kEqualized = bodyA.m_mass * bodyA.m_invMass + bodyB.m_mass * bodyB.m_invMass;\n            kEqualized += bodyA.m_mass * bodyA.m_invI * rnA + bodyB.m_mass * bodyB.m_invI * rnB;\n            ccp.equalizedMass = 1.0 / kEqualized;\n            var tangentX = normalY;\n            var tangentY = (-normalX);\n            var rtA = rAX * tangentY - rAY * tangentX;\n            var rtB = rBX * tangentY - rBY * tangentX;\n            rtA *= rtA;\n            rtB *= rtB;\n            var kTangent = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rtA + bodyB.m_invI * rtB;\n            ccp.tangentMass = 1.0 / kTangent;\n            ccp.velocityBias = 0.0;\n            var tX = vBX + ((-wB * rBY)) - vAX - ((-wA * rAY));\n            var tY = vBY + (wB * rBX) - vAY - (wA * rAX);\n            var vRel = cc.normal.x * tX + cc.normal.y * tY;\n            if (vRel < (-b2Settings.b2_velocityThreshold)) {\n               ccp.velocityBias += (-cc.restitution * vRel);\n            }\n         }\n         if (cc.pointCount == 2) {\n            var ccp1 = cc.points[0];\n            var ccp2 = cc.points[1];\n            var invMassA = bodyA.m_invMass;\n            var invIA = bodyA.m_invI;\n            var invMassB = bodyB.m_invMass;\n            var invIB = bodyB.m_invI;\n            var rn1A = ccp1.rA.x * normalY - ccp1.rA.y * normalX;\n            var rn1B = ccp1.rB.x * normalY - ccp1.rB.y * normalX;\n            var rn2A = ccp2.rA.x * normalY - ccp2.rA.y * normalX;\n            var rn2B = ccp2.rB.x * normalY - ccp2.rB.y * normalX;\n            var k11 = invMassA + invMassB + invIA * rn1A * rn1A + invIB * rn1B * rn1B;\n            var k22 = invMassA + invMassB + invIA * rn2A * rn2A + invIB * rn2B * rn2B;\n            var k12 = invMassA + invMassB + invIA * rn1A * rn2A + invIB * rn1B * rn2B;\n            var k_maxConditionNumber = 100.0;\n            if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n               cc.K.col1.Set(k11, k12);\n               cc.K.col2.Set(k12, k22);\n               cc.K.GetInverse(cc.normalMass);\n            }\n            else {\n               cc.pointCount = 1;\n            }\n         }\n      }\n   }\n   b2ContactSolver.prototype.InitVelocityConstraints = function (step) {\n      var tVec;\n      var tVec2;\n      var tMat;\n      for (var i = 0; i < this.m_constraintCount; ++i) {\n         var c = this.m_constraints[i];\n         var bodyA = c.bodyA;\n         var bodyB = c.bodyB;\n         var invMassA = bodyA.m_invMass;\n         var invIA = bodyA.m_invI;\n         var invMassB = bodyB.m_invMass;\n         var invIB = bodyB.m_invI;\n         var normalX = c.normal.x;\n         var normalY = c.normal.y;\n         var tangentX = normalY;\n         var tangentY = (-normalX);\n         var tX = 0;\n         var j = 0;\n         var tCount = 0;\n         if (step.warmStarting) {\n            tCount = c.pointCount;\n            for (j = 0;\n            j < tCount; ++j) {\n               var ccp = c.points[j];\n               ccp.normalImpulse *= step.dtRatio;\n               ccp.tangentImpulse *= step.dtRatio;\n               var PX = ccp.normalImpulse * normalX + ccp.tangentImpulse * tangentX;\n               var PY = ccp.normalImpulse * normalY + ccp.tangentImpulse * tangentY;\n               bodyA.m_angularVelocity -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);\n               bodyA.m_linearVelocity.x -= invMassA * PX;\n               bodyA.m_linearVelocity.y -= invMassA * PY;\n               bodyB.m_angularVelocity += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);\n               bodyB.m_linearVelocity.x += invMassB * PX;\n               bodyB.m_linearVelocity.y += invMassB * PY;\n            }\n         }\n         else {\n            tCount = c.pointCount;\n            for (j = 0;\n            j < tCount; ++j) {\n               var ccp2 = c.points[j];\n               ccp2.normalImpulse = 0.0;\n               ccp2.tangentImpulse = 0.0;\n            }\n         }\n      }\n   }\n   b2ContactSolver.prototype.SolveVelocityConstraints = function () {\n      var j = 0;\n      var ccp;\n      var rAX = 0;\n      var rAY = 0;\n      var rBX = 0;\n      var rBY = 0;\n      var dvX = 0;\n      var dvY = 0;\n      var vn = 0;\n      var vt = 0;\n      var lambda = 0;\n      var maxFriction = 0;\n      var newImpulse = 0;\n      var PX = 0;\n      var PY = 0;\n      var dX = 0;\n      var dY = 0;\n      var P1X = 0;\n      var P1Y = 0;\n      var P2X = 0;\n      var P2Y = 0;\n      var tMat;\n      var tVec;\n      for (var i = 0; i < this.m_constraintCount; ++i) {\n         var c = this.m_constraints[i];\n         var bodyA = c.bodyA;\n         var bodyB = c.bodyB;\n         var wA = bodyA.m_angularVelocity;\n         var wB = bodyB.m_angularVelocity;\n         var vA = bodyA.m_linearVelocity;\n         var vB = bodyB.m_linearVelocity;\n         var invMassA = bodyA.m_invMass;\n         var invIA = bodyA.m_invI;\n         var invMassB = bodyB.m_invMass;\n         var invIB = bodyB.m_invI;\n         var normalX = c.normal.x;\n         var normalY = c.normal.y;\n         var tangentX = normalY;\n         var tangentY = (-normalX);\n         var friction = c.friction;\n         var tX = 0;\n         for (j = 0;\n         j < c.pointCount; j++) {\n            ccp = c.points[j];\n            dvX = vB.x - wB * ccp.rB.y - vA.x + wA * ccp.rA.y;\n            dvY = vB.y + wB * ccp.rB.x - vA.y - wA * ccp.rA.x;\n            vt = dvX * tangentX + dvY * tangentY;\n            lambda = ccp.tangentMass * (-vt);\n            maxFriction = friction * ccp.normalImpulse;\n            newImpulse = b2Math.Clamp(ccp.tangentImpulse + lambda, (-maxFriction), maxFriction);\n            lambda = newImpulse - ccp.tangentImpulse;\n            PX = lambda * tangentX;\n            PY = lambda * tangentY;\n            vA.x -= invMassA * PX;\n            vA.y -= invMassA * PY;\n            wA -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);\n            vB.x += invMassB * PX;\n            vB.y += invMassB * PY;\n            wB += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);\n            ccp.tangentImpulse = newImpulse;\n         }\n         var tCount = parseInt(c.pointCount);\n         if (c.pointCount == 1) {\n            ccp = c.points[0];\n            dvX = vB.x + ((-wB * ccp.rB.y)) - vA.x - ((-wA * ccp.rA.y));\n            dvY = vB.y + (wB * ccp.rB.x) - vA.y - (wA * ccp.rA.x);\n            vn = dvX * normalX + dvY * normalY;\n            lambda = (-ccp.normalMass * (vn - ccp.velocityBias));\n            newImpulse = ccp.normalImpulse + lambda;\n            newImpulse = newImpulse > 0 ? newImpulse : 0.0;\n            lambda = newImpulse - ccp.normalImpulse;\n            PX = lambda * normalX;\n            PY = lambda * normalY;\n            vA.x -= invMassA * PX;\n            vA.y -= invMassA * PY;\n            wA -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);\n            vB.x += invMassB * PX;\n            vB.y += invMassB * PY;\n            wB += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);\n            ccp.normalImpulse = newImpulse;\n         }\n         else {\n            var cp1 = c.points[0];\n            var cp2 = c.points[1];\n            var aX = cp1.normalImpulse;\n            var aY = cp2.normalImpulse;\n            var dv1X = vB.x - wB * cp1.rB.y - vA.x + wA * cp1.rA.y;\n            var dv1Y = vB.y + wB * cp1.rB.x - vA.y - wA * cp1.rA.x;\n            var dv2X = vB.x - wB * cp2.rB.y - vA.x + wA * cp2.rA.y;\n            var dv2Y = vB.y + wB * cp2.rB.x - vA.y - wA * cp2.rA.x;\n            var vn1 = dv1X * normalX + dv1Y * normalY;\n            var vn2 = dv2X * normalX + dv2Y * normalY;\n            var bX = vn1 - cp1.velocityBias;\n            var bY = vn2 - cp2.velocityBias;\n            tMat = c.K;\n            bX -= tMat.col1.x * aX + tMat.col2.x * aY;\n            bY -= tMat.col1.y * aX + tMat.col2.y * aY;\n            var k_errorTol = 0.001;\n            for (;;) {\n               tMat = c.normalMass;\n               var xX = (-(tMat.col1.x * bX + tMat.col2.x * bY));\n               var xY = (-(tMat.col1.y * bX + tMat.col2.y * bY));\n               if (xX >= 0.0 && xY >= 0.0) {\n                  dX = xX - aX;\n                  dY = xY - aY;\n                  P1X = dX * normalX;\n                  P1Y = dX * normalY;\n                  P2X = dY * normalX;\n                  P2Y = dY * normalY;\n                  vA.x -= invMassA * (P1X + P2X);\n                  vA.y -= invMassA * (P1Y + P2Y);\n                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);\n                  vB.x += invMassB * (P1X + P2X);\n                  vB.y += invMassB * (P1Y + P2Y);\n                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);\n                  cp1.normalImpulse = xX;\n                  cp2.normalImpulse = xY;\n                  break;\n               }\n               xX = (-cp1.normalMass * bX);\n               xY = 0.0;\n               vn1 = 0.0;\n               vn2 = c.K.col1.y * xX + bY;\n               if (xX >= 0.0 && vn2 >= 0.0) {\n                  dX = xX - aX;\n                  dY = xY - aY;\n                  P1X = dX * normalX;\n                  P1Y = dX * normalY;\n                  P2X = dY * normalX;\n                  P2Y = dY * normalY;\n                  vA.x -= invMassA * (P1X + P2X);\n                  vA.y -= invMassA * (P1Y + P2Y);\n                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);\n                  vB.x += invMassB * (P1X + P2X);\n                  vB.y += invMassB * (P1Y + P2Y);\n                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);\n                  cp1.normalImpulse = xX;\n                  cp2.normalImpulse = xY;\n                  break;\n               }\n               xX = 0.0;\n               xY = (-cp2.normalMass * bY);\n               vn1 = c.K.col2.x * xY + bX;\n               vn2 = 0.0;\n               if (xY >= 0.0 && vn1 >= 0.0) {\n                  dX = xX - aX;\n                  dY = xY - aY;\n                  P1X = dX * normalX;\n                  P1Y = dX * normalY;\n                  P2X = dY * normalX;\n                  P2Y = dY * normalY;\n                  vA.x -= invMassA * (P1X + P2X);\n                  vA.y -= invMassA * (P1Y + P2Y);\n                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);\n                  vB.x += invMassB * (P1X + P2X);\n                  vB.y += invMassB * (P1Y + P2Y);\n                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);\n                  cp1.normalImpulse = xX;\n                  cp2.normalImpulse = xY;\n                  break;\n               }\n               xX = 0.0;\n               xY = 0.0;\n               vn1 = bX;\n               vn2 = bY;\n               if (vn1 >= 0.0 && vn2 >= 0.0) {\n                  dX = xX - aX;\n                  dY = xY - aY;\n                  P1X = dX * normalX;\n                  P1Y = dX * normalY;\n                  P2X = dY * normalX;\n                  P2Y = dY * normalY;\n                  vA.x -= invMassA * (P1X + P2X);\n                  vA.y -= invMassA * (P1Y + P2Y);\n                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);\n                  vB.x += invMassB * (P1X + P2X);\n                  vB.y += invMassB * (P1Y + P2Y);\n                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);\n                  cp1.normalImpulse = xX;\n                  cp2.normalImpulse = xY;\n                  break;\n               }\n               break;\n            }\n         }\n         bodyA.m_angularVelocity = wA;\n         bodyB.m_angularVelocity = wB;\n      }\n   }\n   b2ContactSolver.prototype.FinalizeVelocityConstraints = function () {\n      for (var i = 0; i < this.m_constraintCount; ++i) {\n         var c = this.m_constraints[i];\n         var m = c.manifold;\n         for (var j = 0; j < c.pointCount; ++j) {\n            var point1 = m.m_points[j];\n            var point2 = c.points[j];\n            point1.m_normalImpulse = point2.normalImpulse;\n            point1.m_tangentImpulse = point2.tangentImpulse;\n         }\n      }\n   }\n   b2ContactSolver.prototype.SolvePositionConstraints = function (baumgarte) {\n      if (baumgarte === undefined) baumgarte = 0;\n      var minSeparation = 0.0;\n      for (var i = 0; i < this.m_constraintCount; i++) {\n         var c = this.m_constraints[i];\n         var bodyA = c.bodyA;\n         var bodyB = c.bodyB;\n         var invMassA = bodyA.m_mass * bodyA.m_invMass;\n         var invIA = bodyA.m_mass * bodyA.m_invI;\n         var invMassB = bodyB.m_mass * bodyB.m_invMass;\n         var invIB = bodyB.m_mass * bodyB.m_invI;\n         b2ContactSolver.s_psm.Initialize(c);\n         var normal = b2ContactSolver.s_psm.m_normal;\n         for (var j = 0; j < c.pointCount; j++) {\n            var ccp = c.points[j];\n            var point = b2ContactSolver.s_psm.m_points[j];\n            var separation = b2ContactSolver.s_psm.m_separations[j];\n            var rAX = point.x - bodyA.m_sweep.c.x;\n            var rAY = point.y - bodyA.m_sweep.c.y;\n            var rBX = point.x - bodyB.m_sweep.c.x;\n            var rBY = point.y - bodyB.m_sweep.c.y;\n            minSeparation = minSeparation < separation ? minSeparation : separation;\n            var C = b2Math.Clamp(baumgarte * (separation + b2Settings.b2_linearSlop), (-b2Settings.b2_maxLinearCorrection), 0.0);\n            var impulse = (-ccp.equalizedMass * C);\n            var PX = impulse * normal.x;\n            var PY = impulse * normal.y;bodyA.m_sweep.c.x -= invMassA * PX;\n            bodyA.m_sweep.c.y -= invMassA * PY;\n            bodyA.m_sweep.a -= invIA * (rAX * PY - rAY * PX);\n            bodyA.SynchronizeTransform();\n            bodyB.m_sweep.c.x += invMassB * PX;\n            bodyB.m_sweep.c.y += invMassB * PY;\n            bodyB.m_sweep.a += invIB * (rBX * PY - rBY * PX);\n            bodyB.SynchronizeTransform();\n         }\n      }\n      return minSeparation > (-1.5 * b2Settings.b2_linearSlop);\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold = new b2WorldManifold();\n      Box2D.Dynamics.Contacts.b2ContactSolver.s_psm = new b2PositionSolverManifold();\n   });\n   Box2D.inherit(b2EdgeAndCircleContact, Box2D.Dynamics.Contacts.b2Contact);\n   b2EdgeAndCircleContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;\n   b2EdgeAndCircleContact.b2EdgeAndCircleContact = function () {\n      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);\n   };\n   b2EdgeAndCircleContact.Create = function (allocator) {\n      return new b2EdgeAndCircleContact();\n   }\n   b2EdgeAndCircleContact.Destroy = function (contact, allocator) {}\n   b2EdgeAndCircleContact.prototype.Reset = function (fixtureA, fixtureB) {\n      this.__super.Reset.call(this, fixtureA, fixtureB);\n   }\n   b2EdgeAndCircleContact.prototype.Evaluate = function () {\n      var bA = this.m_fixtureA.GetBody();\n      var bB = this.m_fixtureB.GetBody();\n      this.b2CollideEdgeAndCircle(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2EdgeShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2CircleShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);\n   }\n   b2EdgeAndCircleContact.prototype.b2CollideEdgeAndCircle = function (manifold, edge, xf1, circle, xf2) {}\n   Box2D.inherit(b2NullContact, Box2D.Dynamics.Contacts.b2Contact);\n   b2NullContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;\n   b2NullContact.b2NullContact = function () {\n      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);\n   };\n   b2NullContact.prototype.b2NullContact = function () {\n      this.__super.b2Contact.call(this);\n   }\n   b2NullContact.prototype.Evaluate = function () {}\n   Box2D.inherit(b2PolyAndCircleContact, Box2D.Dynamics.Contacts.b2Contact);\n   b2PolyAndCircleContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;\n   b2PolyAndCircleContact.b2PolyAndCircleContact = function () {\n      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);\n   };\n   b2PolyAndCircleContact.Create = function (allocator) {\n      return new b2PolyAndCircleContact();\n   }\n   b2PolyAndCircleContact.Destroy = function (contact, allocator) {}\n   b2PolyAndCircleContact.prototype.Reset = function (fixtureA, fixtureB) {\n      this.__super.Reset.call(this, fixtureA, fixtureB);\n      b2Settings.b2Assert(fixtureA.GetType() == b2Shape.e_polygonShape);\n      b2Settings.b2Assert(fixtureB.GetType() == b2Shape.e_circleShape);\n   }\n   b2PolyAndCircleContact.prototype.Evaluate = function () {\n      var bA = this.m_fixtureA.m_body;\n      var bB = this.m_fixtureB.m_body;\n      b2Collision.CollidePolygonAndCircle(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2PolygonShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2CircleShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);\n   }\n   Box2D.inherit(b2PolyAndEdgeContact, Box2D.Dynamics.Contacts.b2Contact);\n   b2PolyAndEdgeContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;\n   b2PolyAndEdgeContact.b2PolyAndEdgeContact = function () {\n      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);\n   };\n   b2PolyAndEdgeContact.Create = function (allocator) {\n      return new b2PolyAndEdgeContact();\n   }\n   b2PolyAndEdgeContact.Destroy = function (contact, allocator) {}\n   b2PolyAndEdgeContact.prototype.Reset = function (fixtureA, fixtureB) {\n      this.__super.Reset.call(this, fixtureA, fixtureB);\n      b2Settings.b2Assert(fixtureA.GetType() == b2Shape.e_polygonShape);\n      b2Settings.b2Assert(fixtureB.GetType() == b2Shape.e_edgeShape);\n   }\n   b2PolyAndEdgeContact.prototype.Evaluate = function () {\n      var bA = this.m_fixtureA.GetBody();\n      var bB = this.m_fixtureB.GetBody();\n      this.b2CollidePolyAndEdge(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2PolygonShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2EdgeShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);\n   }\n   b2PolyAndEdgeContact.prototype.b2CollidePolyAndEdge = function (manifold, polygon, xf1, edge, xf2) {}\n   Box2D.inherit(b2PolygonContact, Box2D.Dynamics.Contacts.b2Contact);\n   b2PolygonContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;\n   b2PolygonContact.b2PolygonContact = function () {\n      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);\n   };\n   b2PolygonContact.Create = function (allocator) {\n      return new b2PolygonContact();\n   }\n   b2PolygonContact.Destroy = function (contact, allocator) {}\n   b2PolygonContact.prototype.Reset = function (fixtureA, fixtureB) {\n      this.__super.Reset.call(this, fixtureA, fixtureB);\n   }\n   b2PolygonContact.prototype.Evaluate = function () {\n      var bA = this.m_fixtureA.GetBody();\n      var bB = this.m_fixtureB.GetBody();\n      b2Collision.CollidePolygons(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2PolygonShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2PolygonShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);\n   }\n   b2PositionSolverManifold.b2PositionSolverManifold = function () {};\n   b2PositionSolverManifold.prototype.b2PositionSolverManifold = function () {\n      this.m_normal = new b2Vec2();\n      this.m_separations = new Vector_a2j_Number(b2Settings.b2_maxManifoldPoints);\n      this.m_points = new Vector(b2Settings.b2_maxManifoldPoints);\n      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {\n         this.m_points[i] = new b2Vec2();\n      }\n   }\n   b2PositionSolverManifold.prototype.Initialize = function (cc) {\n      b2Settings.b2Assert(cc.pointCount > 0);\n      var i = 0;\n      var clipPointX = 0;\n      var clipPointY = 0;\n      var tMat;\n      var tVec;\n      var planePointX = 0;\n      var planePointY = 0;\n      switch (cc.type) {\n      case b2Manifold.e_circles:\n         {\n            tMat = cc.bodyA.m_xf.R;\n            tVec = cc.localPoint;\n            var pointAX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n            var pointAY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n            tMat = cc.bodyB.m_xf.R;\n            tVec = cc.points[0].localPoint;\n            var pointBX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n            var pointBY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n            var dX = pointBX - pointAX;\n            var dY = pointBY - pointAY;\n            var d2 = dX * dX + dY * dY;\n            if (d2 > Number.MIN_VALUE * Number.MIN_VALUE) {\n               var d = Math.sqrt(d2);\n               this.m_normal.x = dX / d;\n               this.m_normal.y = dY / d;\n            }\n            else {\n               this.m_normal.x = 1.0;\n               this.m_normal.y = 0.0;\n            }\n            this.m_points[0].x = 0.5 * (pointAX + pointBX);\n            this.m_points[0].y = 0.5 * (pointAY + pointBY);\n            this.m_separations[0] = dX * this.m_normal.x + dY * this.m_normal.y - cc.radius;\n         }\n         break;\n      case b2Manifold.e_faceA:\n         {\n            tMat = cc.bodyA.m_xf.R;\n            tVec = cc.localPlaneNormal;\n            this.m_normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n            this.m_normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n            tMat = cc.bodyA.m_xf.R;\n            tVec = cc.localPoint;\n            planePointX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n            planePointY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n            tMat = cc.bodyB.m_xf.R;\n            for (i = 0;\n            i < cc.pointCount; ++i) {\n               tVec = cc.points[i].localPoint;\n               clipPointX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n               clipPointY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n               this.m_separations[i] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;\n               this.m_points[i].x = clipPointX;\n               this.m_points[i].y = clipPointY;\n            }\n         }\n         break;\n      case b2Manifold.e_faceB:\n         {\n            tMat = cc.bodyB.m_xf.R;\n            tVec = cc.localPlaneNormal;\n            this.m_normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n            this.m_normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n            tMat = cc.bodyB.m_xf.R;\n            tVec = cc.localPoint;\n            planePointX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n            planePointY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n            tMat = cc.bodyA.m_xf.R;\n            for (i = 0;\n            i < cc.pointCount; ++i) {\n               tVec = cc.points[i].localPoint;\n               clipPointX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);\n               clipPointY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);\n               this.m_separations[i] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;\n               this.m_points[i].Set(clipPointX, clipPointY);\n            }\n            this.m_normal.x *= (-1);\n            this.m_normal.y *= (-1);\n         }\n         break;\n      }\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointA = new b2Vec2();\n      Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointB = new b2Vec2();\n   });\n})();\n(function () {\n   var b2Body = Box2D.Dynamics.b2Body,\n      b2BodyDef = Box2D.Dynamics.b2BodyDef,\n      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,\n      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,\n      b2ContactListener = Box2D.Dynamics.b2ContactListener,\n      b2ContactManager = Box2D.Dynamics.b2ContactManager,\n      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,\n      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,\n      b2FilterData = Box2D.Dynamics.b2FilterData,\n      b2Fixture = Box2D.Dynamics.b2Fixture,\n      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,\n      b2Island = Box2D.Dynamics.b2Island,\n      b2TimeStep = Box2D.Dynamics.b2TimeStep,\n      b2World = Box2D.Dynamics.b2World,\n      b2Mat22 = Box2D.Common.Math.b2Mat22,\n      b2Mat33 = Box2D.Common.Math.b2Mat33,\n      b2Math = Box2D.Common.Math.b2Math,\n      b2Sweep = Box2D.Common.Math.b2Sweep,\n      b2Transform = Box2D.Common.Math.b2Transform,\n      b2Vec2 = Box2D.Common.Math.b2Vec2,\n      b2Vec3 = Box2D.Common.Math.b2Vec3,\n      b2Color = Box2D.Common.b2Color,\n      b2internal = Box2D.Common.b2internal,\n      b2Settings = Box2D.Common.b2Settings,\n      b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,\n      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,\n      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,\n      b2MassData = Box2D.Collision.Shapes.b2MassData,\n      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,\n      b2Shape = Box2D.Collision.Shapes.b2Shape,\n      b2BuoyancyController = Box2D.Dynamics.Controllers.b2BuoyancyController,\n      b2ConstantAccelController = Box2D.Dynamics.Controllers.b2ConstantAccelController,\n      b2ConstantForceController = Box2D.Dynamics.Controllers.b2ConstantForceController,\n      b2Controller = Box2D.Dynamics.Controllers.b2Controller,\n      b2ControllerEdge = Box2D.Dynamics.Controllers.b2ControllerEdge,\n      b2GravityController = Box2D.Dynamics.Controllers.b2GravityController,\n      b2TensorDampingController = Box2D.Dynamics.Controllers.b2TensorDampingController;\n\n   Box2D.inherit(b2BuoyancyController, Box2D.Dynamics.Controllers.b2Controller);\n   b2BuoyancyController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;\n   b2BuoyancyController.b2BuoyancyController = function () {\n      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);\n      this.normal = new b2Vec2(0, (-1));\n      this.offset = 0;\n      this.density = 0;\n      this.velocity = new b2Vec2(0, 0);\n      this.linearDrag = 2;\n      this.angularDrag = 1;\n      this.useDensity = false;\n      this.useWorldGravity = true;\n      this.gravity = null;\n   };\n   b2BuoyancyController.prototype.Step = function (step) {\n      if (!this.m_bodyList) return;\n      if (this.useWorldGravity) {\n         this.gravity = this.GetWorld().GetGravity().Copy();\n      }\n      for (var i = this.m_bodyList; i; i = i.nextBody) {\n         var body = i.body;\n         if (body.IsAwake() == false) {\n            continue;\n         }\n         var areac = new b2Vec2();\n         var massc = new b2Vec2();\n         var area = 0.0;\n         var mass = 0.0;\n         for (var fixture = body.GetFixtureList(); fixture; fixture = fixture.GetNext()) {\n            var sc = new b2Vec2();\n            var sarea = fixture.GetShape().ComputeSubmergedArea(this.normal, this.offset, body.GetTransform(), sc);\n            area += sarea;\n            areac.x += sarea * sc.x;\n            areac.y += sarea * sc.y;\n            var shapeDensity = 0;\n            if (this.useDensity) {\n               shapeDensity = 1;\n            }\n            else {\n               shapeDensity = 1;\n            }\n            mass += sarea * shapeDensity;\n            massc.x += sarea * sc.x * shapeDensity;\n            massc.y += sarea * sc.y * shapeDensity;\n         }\n         areac.x /= area;\n         areac.y /= area;\n         massc.x /= mass;\n         massc.y /= mass;\n         if (area < Number.MIN_VALUE) continue;\n         var buoyancyForce = this.gravity.GetNegative();\n         buoyancyForce.Multiply(this.density * area);\n         body.ApplyForce(buoyancyForce, massc);\n         var dragForce = body.GetLinearVelocityFromWorldPoint(areac);\n         dragForce.Subtract(this.velocity);\n         dragForce.Multiply((-this.linearDrag * area));\n         body.ApplyForce(dragForce, areac);\n         body.ApplyTorque((-body.GetInertia() / body.GetMass() * area * body.GetAngularVelocity() * this.angularDrag));\n      }\n   }\n   b2BuoyancyController.prototype.Draw = function (debugDraw) {\n      var r = 1000;\n      var p1 = new b2Vec2();\n      var p2 = new b2Vec2();\n      p1.x = this.normal.x * this.offset + this.normal.y * r;\n      p1.y = this.normal.y * this.offset - this.normal.x * r;\n      p2.x = this.normal.x * this.offset - this.normal.y * r;\n      p2.y = this.normal.y * this.offset + this.normal.x * r;\n      var color = new b2Color(0, 0, 1);\n      debugDraw.DrawSegment(p1, p2, color);\n   }\n   Box2D.inherit(b2ConstantAccelController, Box2D.Dynamics.Controllers.b2Controller);\n   b2ConstantAccelController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;\n   b2ConstantAccelController.b2ConstantAccelController = function () {\n      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);\n      this.A = new b2Vec2(0, 0);\n   };\n   b2ConstantAccelController.prototype.Step = function (step) {\n      var smallA = new b2Vec2(this.A.x * step.dt, this.A.y * step.dt);\n      for (var i = this.m_bodyList; i; i = i.nextBody) {\n         var body = i.body;\n         if (!body.IsAwake()) continue;\n         body.SetLinearVelocity(new b2Vec2(body.GetLinearVelocity().x + smallA.x, body.GetLinearVelocity().y + smallA.y));\n      }\n   }\n   Box2D.inherit(b2ConstantForceController, Box2D.Dynamics.Controllers.b2Controller);\n   b2ConstantForceController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;\n   b2ConstantForceController.b2ConstantForceController = function () {\n      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);\n      this.F = new b2Vec2(0, 0);\n   };\n   b2ConstantForceController.prototype.Step = function (step) {\n      for (var i = this.m_bodyList; i; i = i.nextBody) {\n         var body = i.body;\n         if (!body.IsAwake()) continue;\n         body.ApplyForce(this.F, body.GetWorldCenter());\n      }\n   }\n   b2Controller.b2Controller = function () {};\n   b2Controller.prototype.Step = function (step) {}\n   b2Controller.prototype.Draw = function (debugDraw) {}\n   b2Controller.prototype.AddBody = function (body) {\n      var edge = new b2ControllerEdge();\n      edge.controller = this;\n      edge.body = body;\n      edge.nextBody = this.m_bodyList;\n      edge.prevBody = null;\n      this.m_bodyList = edge;\n      if (edge.nextBody) edge.nextBody.prevBody = edge;\n      this.m_bodyCount++;\n      edge.nextController = body.m_controllerList;\n      edge.prevController = null;\n      body.m_controllerList = edge;\n      if (edge.nextController) edge.nextController.prevController = edge;\n      body.m_controllerCount++;\n   }\n   b2Controller.prototype.RemoveBody = function (body) {\n      var edge = body.m_controllerList;\n      while (edge && edge.controller != this)\n      edge = edge.nextController;\n      if (edge.prevBody) edge.prevBody.nextBody = edge.nextBody;\n      if (edge.nextBody) edge.nextBody.prevBody = edge.prevBody;\n      if (edge.nextController) edge.nextController.prevController = edge.prevController;\n      if (edge.prevController) edge.prevController.nextController = edge.nextController;\n      if (this.m_bodyList == edge) this.m_bodyList = edge.nextBody;\n      if (body.m_controllerList == edge) body.m_controllerList = edge.nextController;\n      body.m_controllerCount--;\n      this.m_bodyCount--;\n   }\n   b2Controller.prototype.Clear = function () {\n      while (this.m_bodyList)\n      this.RemoveBody(this.m_bodyList.body);\n   }\n   b2Controller.prototype.GetNext = function () {\n      return this.m_next;\n   }\n   b2Controller.prototype.GetWorld = function () {\n      return this.m_world;\n   }\n   b2Controller.prototype.GetBodyList = function () {\n      return this.m_bodyList;\n   }\n   b2ControllerEdge.b2ControllerEdge = function () {};\n   Box2D.inherit(b2GravityController, Box2D.Dynamics.Controllers.b2Controller);\n   b2GravityController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;\n   b2GravityController.b2GravityController = function () {\n      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);\n      this.G = 1;\n      this.invSqr = true;\n   };\n   b2GravityController.prototype.Step = function (step) {\n      var i = null;\n      var body1 = null;\n      var p1 = null;\n      var mass1 = 0;\n      var j = null;\n      var body2 = null;\n      var p2 = null;\n      var dx = 0;\n      var dy = 0;\n      var r2 = 0;\n      var f = null;\n      if (this.invSqr) {\n         for (i = this.m_bodyList;\n         i; i = i.nextBody) {\n            body1 = i.body;\n            p1 = body1.GetWorldCenter();\n            mass1 = body1.GetMass();\n            for (j = this.m_bodyList;\n            j != i; j = j.nextBody) {\n               body2 = j.body;\n               p2 = body2.GetWorldCenter();\n               dx = p2.x - p1.x;\n               dy = p2.y - p1.y;\n               r2 = dx * dx + dy * dy;\n               if (r2 < Number.MIN_VALUE) continue;\n               f = new b2Vec2(dx, dy);\n               f.Multiply(this.G / r2 / Math.sqrt(r2) * mass1 * body2.GetMass());\n               if (body1.IsAwake()) body1.ApplyForce(f, p1);\n               f.Multiply((-1));\n               if (body2.IsAwake()) body2.ApplyForce(f, p2);\n            }\n         }\n      }\n      else {\n         for (i = this.m_bodyList;\n         i; i = i.nextBody) {\n            body1 = i.body;\n            p1 = body1.GetWorldCenter();\n            mass1 = body1.GetMass();\n            for (j = this.m_bodyList;\n            j != i; j = j.nextBody) {\n               body2 = j.body;\n               p2 = body2.GetWorldCenter();\n               dx = p2.x - p1.x;\n               dy = p2.y - p1.y;\n               r2 = dx * dx + dy * dy;\n               if (r2 < Number.MIN_VALUE) continue;\n               f = new b2Vec2(dx, dy);\n               f.Multiply(this.G / r2 * mass1 * body2.GetMass());\n               if (body1.IsAwake()) body1.ApplyForce(f, p1);\n               f.Multiply((-1));\n               if (body2.IsAwake()) body2.ApplyForce(f, p2);\n            }\n         }\n      }\n   }\n   Box2D.inherit(b2TensorDampingController, Box2D.Dynamics.Controllers.b2Controller);\n   b2TensorDampingController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;\n   b2TensorDampingController.b2TensorDampingController = function () {\n      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);\n      this.T = new b2Mat22();\n      this.maxTimestep = 0;\n   };\n   b2TensorDampingController.prototype.SetAxisAligned = function (xDamping, yDamping) {\n      if (xDamping === undefined) xDamping = 0;\n      if (yDamping === undefined) yDamping = 0;\n      this.T.col1.x = (-xDamping);\n      this.T.col1.y = 0;\n      this.T.col2.x = 0;\n      this.T.col2.y = (-yDamping);\n      if (xDamping > 0 || yDamping > 0) {\n         this.maxTimestep = 1 / Math.max(xDamping, yDamping);\n      }\n      else {\n         this.maxTimestep = 0;\n      }\n   }\n   b2TensorDampingController.prototype.Step = function (step) {\n      var timestep = step.dt;\n      if (timestep <= Number.MIN_VALUE) return;\n      if (timestep > this.maxTimestep && this.maxTimestep > 0) timestep = this.maxTimestep;\n      for (var i = this.m_bodyList; i; i = i.nextBody) {\n         var body = i.body;\n         if (!body.IsAwake()) {\n            continue;\n         }\n         var damping = body.GetWorldVector(b2Math.MulMV(this.T, body.GetLocalVector(body.GetLinearVelocity())));\n         body.SetLinearVelocity(new b2Vec2(body.GetLinearVelocity().x + damping.x * timestep, body.GetLinearVelocity().y + damping.y * timestep));\n      }\n   }\n})();\n(function () {\n   var b2Color = Box2D.Common.b2Color,\n      b2internal = Box2D.Common.b2internal,\n      b2Settings = Box2D.Common.b2Settings,\n      b2Mat22 = Box2D.Common.Math.b2Mat22,\n      b2Mat33 = Box2D.Common.Math.b2Mat33,\n      b2Math = Box2D.Common.Math.b2Math,\n      b2Sweep = Box2D.Common.Math.b2Sweep,\n      b2Transform = Box2D.Common.Math.b2Transform,\n      b2Vec2 = Box2D.Common.Math.b2Vec2,\n      b2Vec3 = Box2D.Common.Math.b2Vec3,\n      b2DistanceJoint = Box2D.Dynamics.Joints.b2DistanceJoint,\n      b2DistanceJointDef = Box2D.Dynamics.Joints.b2DistanceJointDef,\n      b2FrictionJoint = Box2D.Dynamics.Joints.b2FrictionJoint,\n      b2FrictionJointDef = Box2D.Dynamics.Joints.b2FrictionJointDef,\n      b2GearJoint = Box2D.Dynamics.Joints.b2GearJoint,\n      b2GearJointDef = Box2D.Dynamics.Joints.b2GearJointDef,\n      b2Jacobian = Box2D.Dynamics.Joints.b2Jacobian,\n      b2Joint = Box2D.Dynamics.Joints.b2Joint,\n      b2JointDef = Box2D.Dynamics.Joints.b2JointDef,\n      b2JointEdge = Box2D.Dynamics.Joints.b2JointEdge,\n      b2LineJoint = Box2D.Dynamics.Joints.b2LineJoint,\n      b2LineJointDef = Box2D.Dynamics.Joints.b2LineJointDef,\n      b2MouseJoint = Box2D.Dynamics.Joints.b2MouseJoint,\n      b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef,\n      b2PrismaticJoint = Box2D.Dynamics.Joints.b2PrismaticJoint,\n      b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef,\n      b2PulleyJoint = Box2D.Dynamics.Joints.b2PulleyJoint,\n      b2PulleyJointDef = Box2D.Dynamics.Joints.b2PulleyJointDef,\n      b2RevoluteJoint = Box2D.Dynamics.Joints.b2RevoluteJoint,\n      b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef,\n      b2WeldJoint = Box2D.Dynamics.Joints.b2WeldJoint,\n      b2WeldJointDef = Box2D.Dynamics.Joints.b2WeldJointDef,\n      b2Body = Box2D.Dynamics.b2Body,\n      b2BodyDef = Box2D.Dynamics.b2BodyDef,\n      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,\n      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,\n      b2ContactListener = Box2D.Dynamics.b2ContactListener,\n      b2ContactManager = Box2D.Dynamics.b2ContactManager,\n      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,\n      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,\n      b2FilterData = Box2D.Dynamics.b2FilterData,\n      b2Fixture = Box2D.Dynamics.b2Fixture,\n      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,\n      b2Island = Box2D.Dynamics.b2Island,\n      b2TimeStep = Box2D.Dynamics.b2TimeStep,\n      b2World = Box2D.Dynamics.b2World;\n\n   Box2D.inherit(b2DistanceJoint, Box2D.Dynamics.Joints.b2Joint);\n   b2DistanceJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;\n   b2DistanceJoint.b2DistanceJoint = function () {\n      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);\n      this.m_localAnchor1 = new b2Vec2();\n      this.m_localAnchor2 = new b2Vec2();\n      this.m_u = new b2Vec2();\n   };\n   b2DistanceJoint.prototype.GetAnchorA = function () {\n      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);\n   }\n   b2DistanceJoint.prototype.GetAnchorB = function () {\n      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);\n   }\n   b2DistanceJoint.prototype.GetReactionForce = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return new b2Vec2(inv_dt * this.m_impulse * this.m_u.x, inv_dt * this.m_impulse * this.m_u.y);\n   }\n   b2DistanceJoint.prototype.GetReactionTorque = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return 0.0;\n   }\n   b2DistanceJoint.prototype.GetLength = function () {\n      return this.m_length;\n   }\n   b2DistanceJoint.prototype.SetLength = function (length) {\n      if (length === undefined) length = 0;\n      this.m_length = length;\n   }\n   b2DistanceJoint.prototype.GetFrequency = function () {\n      return this.m_frequencyHz;\n   }\n   b2DistanceJoint.prototype.SetFrequency = function (hz) {\n      if (hz === undefined) hz = 0;\n      this.m_frequencyHz = hz;\n   }\n   b2DistanceJoint.prototype.GetDampingRatio = function () {\n      return this.m_dampingRatio;\n   }\n   b2DistanceJoint.prototype.SetDampingRatio = function (ratio) {\n      if (ratio === undefined) ratio = 0;\n      this.m_dampingRatio = ratio;\n   }\n   b2DistanceJoint.prototype.b2DistanceJoint = function (def) {\n      this.__super.b2Joint.call(this, def);\n      var tMat;\n      var tX = 0;\n      var tY = 0;\n      this.m_localAnchor1.SetV(def.localAnchorA);\n      this.m_localAnchor2.SetV(def.localAnchorB);\n      this.m_length = def.length;\n      this.m_frequencyHz = def.frequencyHz;\n      this.m_dampingRatio = def.dampingRatio;\n      this.m_impulse = 0.0;\n      this.m_gamma = 0.0;\n      this.m_bias = 0.0;\n   }\n   b2DistanceJoint.prototype.InitVelocityConstraints = function (step) {\n      var tMat;\n      var tX = 0;\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      tMat = bA.m_xf.R;\n      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n      r1X = tX;\n      tMat = bB.m_xf.R;\n      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n      r2X = tX;\n      this.m_u.x = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;\n      this.m_u.y = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;\n      var length = Math.sqrt(this.m_u.x * this.m_u.x + this.m_u.y * this.m_u.y);\n      if (length > b2Settings.b2_linearSlop) {\n         this.m_u.Multiply(1.0 / length);\n      }\n      else {\n         this.m_u.SetZero();\n      }\n      var cr1u = (r1X * this.m_u.y - r1Y * this.m_u.x);\n      var cr2u = (r2X * this.m_u.y - r2Y * this.m_u.x);\n      var invMass = bA.m_invMass + bA.m_invI * cr1u * cr1u + bB.m_invMass + bB.m_invI * cr2u * cr2u;\n      this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n      if (this.m_frequencyHz > 0.0) {\n         var C = length - this.m_length;\n         var omega = 2.0 * Math.PI * this.m_frequencyHz;\n         var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n         var k = this.m_mass * omega * omega;\n         this.m_gamma = step.dt * (d + step.dt * k);\n         this.m_gamma = this.m_gamma != 0.0 ? 1 / this.m_gamma : 0.0;\n         this.m_bias = C * step.dt * k * this.m_gamma;\n         this.m_mass = invMass + this.m_gamma;\n         this.m_mass = this.m_mass != 0.0 ? 1.0 / this.m_mass : 0.0;\n      }\n      if (step.warmStarting) {\n         this.m_impulse *= step.dtRatio;\n         var PX = this.m_impulse * this.m_u.x;\n         var PY = this.m_impulse * this.m_u.y;\n         bA.m_linearVelocity.x -= bA.m_invMass * PX;\n         bA.m_linearVelocity.y -= bA.m_invMass * PY;\n         bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);\n         bB.m_linearVelocity.x += bB.m_invMass * PX;\n         bB.m_linearVelocity.y += bB.m_invMass * PY;\n         bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);\n      }\n      else {\n         this.m_impulse = 0.0;\n      }\n   }\n   b2DistanceJoint.prototype.SolveVelocityConstraints = function (step) {\n      var tMat;\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      tMat = bA.m_xf.R;\n      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n      r1X = tX;\n      tMat = bB.m_xf.R;\n      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n      r2X = tX;\n      var v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));\n      var v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);\n      var v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));\n      var v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);\n      var Cdot = (this.m_u.x * (v2X - v1X) + this.m_u.y * (v2Y - v1Y));\n      var impulse = (-this.m_mass * (Cdot + this.m_bias + this.m_gamma * this.m_impulse));\n      this.m_impulse += impulse;\n      var PX = impulse * this.m_u.x;\n      var PY = impulse * this.m_u.y;\n      bA.m_linearVelocity.x -= bA.m_invMass * PX;\n      bA.m_linearVelocity.y -= bA.m_invMass * PY;\n      bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);\n      bB.m_linearVelocity.x += bB.m_invMass * PX;\n      bB.m_linearVelocity.y += bB.m_invMass * PY;\n      bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);\n   }\n   b2DistanceJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n      if (baumgarte === undefined) baumgarte = 0;\n      var tMat;\n      if (this.m_frequencyHz > 0.0) {\n         return true;\n      }\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      tMat = bA.m_xf.R;\n      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n      r1X = tX;\n      tMat = bB.m_xf.R;\n      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n      r2X = tX;\n      var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;\n      var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;\n      var length = Math.sqrt(dX * dX + dY * dY);\n      dX /= length;\n      dY /= length;\n      var C = length - this.m_length;\n      C = b2Math.Clamp(C, (-b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);\n      var impulse = (-this.m_mass * C);\n      this.m_u.Set(dX, dY);\n      var PX = impulse * this.m_u.x;\n      var PY = impulse * this.m_u.y;\n      bA.m_sweep.c.x -= bA.m_invMass * PX;\n      bA.m_sweep.c.y -= bA.m_invMass * PY;\n      bA.m_sweep.a -= bA.m_invI * (r1X * PY - r1Y * PX);\n      bB.m_sweep.c.x += bB.m_invMass * PX;\n      bB.m_sweep.c.y += bB.m_invMass * PY;\n      bB.m_sweep.a += bB.m_invI * (r2X * PY - r2Y * PX);\n      bA.SynchronizeTransform();\n      bB.SynchronizeTransform();\n      return b2Math.Abs(C) < b2Settings.b2_linearSlop;\n   }\n   Box2D.inherit(b2DistanceJointDef, Box2D.Dynamics.Joints.b2JointDef);\n   b2DistanceJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;\n   b2DistanceJointDef.b2DistanceJointDef = function () {\n      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);\n      this.localAnchorA = new b2Vec2();\n      this.localAnchorB = new b2Vec2();\n   };\n   b2DistanceJointDef.prototype.b2DistanceJointDef = function () {\n      this.__super.b2JointDef.call(this);\n      this.type = b2Joint.e_distanceJoint;\n      this.length = 1.0;\n      this.frequencyHz = 0.0;\n      this.dampingRatio = 0.0;\n   }\n   b2DistanceJointDef.prototype.Initialize = function (bA, bB, anchorA, anchorB) {\n      this.bodyA = bA;\n      this.bodyB = bB;\n      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchorA));\n      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchorB));\n      var dX = anchorB.x - anchorA.x;\n      var dY = anchorB.y - anchorA.y;\n      this.length = Math.sqrt(dX * dX + dY * dY);\n      this.frequencyHz = 0.0;\n      this.dampingRatio = 0.0;\n   }\n   Box2D.inherit(b2FrictionJoint, Box2D.Dynamics.Joints.b2Joint);\n   b2FrictionJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;\n   b2FrictionJoint.b2FrictionJoint = function () {\n      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);\n      this.m_localAnchorA = new b2Vec2();\n      this.m_localAnchorB = new b2Vec2();\n      this.m_linearMass = new b2Mat22();\n      this.m_linearImpulse = new b2Vec2();\n   };\n   b2FrictionJoint.prototype.GetAnchorA = function () {\n      return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);\n   }\n   b2FrictionJoint.prototype.GetAnchorB = function () {\n      return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);\n   }\n   b2FrictionJoint.prototype.GetReactionForce = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return new b2Vec2(inv_dt * this.m_linearImpulse.x, inv_dt * this.m_linearImpulse.y);\n   }\n   b2FrictionJoint.prototype.GetReactionTorque = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return inv_dt * this.m_angularImpulse;\n   }\n   b2FrictionJoint.prototype.SetMaxForce = function (force) {\n      if (force === undefined) force = 0;\n      this.m_maxForce = force;\n   }\n   b2FrictionJoint.prototype.GetMaxForce = function () {\n      return this.m_maxForce;\n   }\n   b2FrictionJoint.prototype.SetMaxTorque = function (torque) {\n      if (torque === undefined) torque = 0;\n      this.m_maxTorque = torque;\n   }\n   b2FrictionJoint.prototype.GetMaxTorque = function () {\n      return this.m_maxTorque;\n   }\n   b2FrictionJoint.prototype.b2FrictionJoint = function (def) {\n      this.__super.b2Joint.call(this, def);\n      this.m_localAnchorA.SetV(def.localAnchorA);\n      this.m_localAnchorB.SetV(def.localAnchorB);\n      this.m_linearMass.SetZero();\n      this.m_angularMass = 0.0;\n      this.m_linearImpulse.SetZero();\n      this.m_angularImpulse = 0.0;\n      this.m_maxForce = def.maxForce;\n      this.m_maxTorque = def.maxTorque;\n   }\n   b2FrictionJoint.prototype.InitVelocityConstraints = function (step) {\n      var tMat;\n      var tX = 0;\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      tMat = bA.m_xf.R;\n      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;\n      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);\n      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);\n      rAX = tX;\n      tMat = bB.m_xf.R;\n      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;\n      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);\n      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);\n      rBX = tX;\n      var mA = bA.m_invMass;\n      var mB = bB.m_invMass;\n      var iA = bA.m_invI;\n      var iB = bB.m_invI;\n      var K = new b2Mat22();\n      K.col1.x = mA + mB;\n      K.col2.x = 0.0;\n      K.col1.y = 0.0;\n      K.col2.y = mA + mB;\n      K.col1.x += iA * rAY * rAY;\n      K.col2.x += (-iA * rAX * rAY);\n      K.col1.y += (-iA * rAX * rAY);\n      K.col2.y += iA * rAX * rAX;\n      K.col1.x += iB * rBY * rBY;\n      K.col2.x += (-iB * rBX * rBY);\n      K.col1.y += (-iB * rBX * rBY);\n      K.col2.y += iB * rBX * rBX;\n      K.GetInverse(this.m_linearMass);\n      this.m_angularMass = iA + iB;\n      if (this.m_angularMass > 0.0) {\n         this.m_angularMass = 1.0 / this.m_angularMass;\n      }\n      if (step.warmStarting) {\n         this.m_linearImpulse.x *= step.dtRatio;\n         this.m_linearImpulse.y *= step.dtRatio;\n         this.m_angularImpulse *= step.dtRatio;\n         var P = this.m_linearImpulse;\n         bA.m_linearVelocity.x -= mA * P.x;\n         bA.m_linearVelocity.y -= mA * P.y;\n         bA.m_angularVelocity -= iA * (rAX * P.y - rAY * P.x + this.m_angularImpulse);\n         bB.m_linearVelocity.x += mB * P.x;\n         bB.m_linearVelocity.y += mB * P.y;\n         bB.m_angularVelocity += iB * (rBX * P.y - rBY * P.x + this.m_angularImpulse);\n      }\n      else {\n         this.m_linearImpulse.SetZero();\n         this.m_angularImpulse = 0.0;\n      }\n   }\n   b2FrictionJoint.prototype.SolveVelocityConstraints = function (step) {\n      var tMat;\n      var tX = 0;\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var vA = bA.m_linearVelocity;\n      var wA = bA.m_angularVelocity;\n      var vB = bB.m_linearVelocity;\n      var wB = bB.m_angularVelocity;\n      var mA = bA.m_invMass;\n      var mB = bB.m_invMass;\n      var iA = bA.m_invI;\n      var iB = bB.m_invI;\n      tMat = bA.m_xf.R;\n      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;\n      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);\n      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);\n      rAX = tX;\n      tMat = bB.m_xf.R;\n      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;\n      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);\n      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);\n      rBX = tX;\n      var maxImpulse = 0; {\n         var Cdot = wB - wA;\n         var impulse = (-this.m_angularMass * Cdot);\n         var oldImpulse = this.m_angularImpulse;\n         maxImpulse = step.dt * this.m_maxTorque;\n         this.m_angularImpulse = b2Math.Clamp(this.m_angularImpulse + impulse, (-maxImpulse), maxImpulse);\n         impulse = this.m_angularImpulse - oldImpulse;\n         wA -= iA * impulse;\n         wB += iB * impulse;\n      } {\n         var CdotX = vB.x - wB * rBY - vA.x + wA * rAY;\n         var CdotY = vB.y + wB * rBX - vA.y - wA * rAX;\n         var impulseV = b2Math.MulMV(this.m_linearMass, new b2Vec2((-CdotX), (-CdotY)));\n         var oldImpulseV = this.m_linearImpulse.Copy();\n         this.m_linearImpulse.Add(impulseV);\n         maxImpulse = step.dt * this.m_maxForce;\n         if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {\n            this.m_linearImpulse.Normalize();\n            this.m_linearImpulse.Multiply(maxImpulse);\n         }\n         impulseV = b2Math.SubtractVV(this.m_linearImpulse, oldImpulseV);\n         vA.x -= mA * impulseV.x;\n         vA.y -= mA * impulseV.y;\n         wA -= iA * (rAX * impulseV.y - rAY * impulseV.x);\n         vB.x += mB * impulseV.x;\n         vB.y += mB * impulseV.y;\n         wB += iB * (rBX * impulseV.y - rBY * impulseV.x);\n      }\n      bA.m_angularVelocity = wA;\n      bB.m_angularVelocity = wB;\n   }\n   b2FrictionJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n      if (baumgarte === undefined) baumgarte = 0;\n      return true;\n   }\n   Box2D.inherit(b2FrictionJointDef, Box2D.Dynamics.Joints.b2JointDef);\n   b2FrictionJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;\n   b2FrictionJointDef.b2FrictionJointDef = function () {\n      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);\n      this.localAnchorA = new b2Vec2();\n      this.localAnchorB = new b2Vec2();\n   };\n   b2FrictionJointDef.prototype.b2FrictionJointDef = function () {\n      this.__super.b2JointDef.call(this);\n      this.type = b2Joint.e_frictionJoint;\n      this.maxForce = 0.0;\n      this.maxTorque = 0.0;\n   }\n   b2FrictionJointDef.prototype.Initialize = function (bA, bB, anchor) {\n      this.bodyA = bA;\n      this.bodyB = bB;\n      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchor));\n      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchor));\n   }\n   Box2D.inherit(b2GearJoint, Box2D.Dynamics.Joints.b2Joint);\n   b2GearJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;\n   b2GearJoint.b2GearJoint = function () {\n      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);\n      this.m_groundAnchor1 = new b2Vec2();\n      this.m_groundAnchor2 = new b2Vec2();\n      this.m_localAnchor1 = new b2Vec2();\n      this.m_localAnchor2 = new b2Vec2();\n      this.m_J = new b2Jacobian();\n   };\n   b2GearJoint.prototype.GetAnchorA = function () {\n      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);\n   }\n   b2GearJoint.prototype.GetAnchorB = function () {\n      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);\n   }\n   b2GearJoint.prototype.GetReactionForce = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return new b2Vec2(inv_dt * this.m_impulse * this.m_J.linearB.x, inv_dt * this.m_impulse * this.m_J.linearB.y);\n   }\n   b2GearJoint.prototype.GetReactionTorque = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      var tMat = this.m_bodyB.m_xf.R;\n      var rX = this.m_localAnchor1.x - this.m_bodyB.m_sweep.localCenter.x;\n      var rY = this.m_localAnchor1.y - this.m_bodyB.m_sweep.localCenter.y;\n      var tX = tMat.col1.x * rX + tMat.col2.x * rY;\n      rY = tMat.col1.y * rX + tMat.col2.y * rY;\n      rX = tX;\n      var PX = this.m_impulse * this.m_J.linearB.x;\n      var PY = this.m_impulse * this.m_J.linearB.y;\n      return inv_dt * (this.m_impulse * this.m_J.angularB - rX * PY + rY * PX);\n   }\n   b2GearJoint.prototype.GetRatio = function () {\n      return this.m_ratio;\n   }\n   b2GearJoint.prototype.SetRatio = function (ratio) {\n      if (ratio === undefined) ratio = 0;\n      this.m_ratio = ratio;\n   }\n   b2GearJoint.prototype.b2GearJoint = function (def) {\n      this.__super.b2Joint.call(this, def);\n      var type1 = parseInt(def.joint1.m_type);\n      var type2 = parseInt(def.joint2.m_type);\n      this.m_revolute1 = null;\n      this.m_prismatic1 = null;\n      this.m_revolute2 = null;\n      this.m_prismatic2 = null;\n      var coordinate1 = 0;\n      var coordinate2 = 0;\n      this.m_ground1 = def.joint1.GetBodyA();\n      this.m_bodyA = def.joint1.GetBodyB();\n      if (type1 == b2Joint.e_revoluteJoint) {\n         this.m_revolute1 = (def.joint1 instanceof b2RevoluteJoint ? def.joint1 : null);\n         this.m_groundAnchor1.SetV(this.m_revolute1.m_localAnchor1);\n         this.m_localAnchor1.SetV(this.m_revolute1.m_localAnchor2);\n         coordinate1 = this.m_revolute1.GetJointAngle();\n      }\n      else {\n         this.m_prismatic1 = (def.joint1 instanceof b2PrismaticJoint ? def.joint1 : null);\n         this.m_groundAnchor1.SetV(this.m_prismatic1.m_localAnchor1);\n         this.m_localAnchor1.SetV(this.m_prismatic1.m_localAnchor2);\n         coordinate1 = this.m_prismatic1.GetJointTranslation();\n      }\n      this.m_ground2 = def.joint2.GetBodyA();\n      this.m_bodyB = def.joint2.GetBodyB();\n      if (type2 == b2Joint.e_revoluteJoint) {\n         this.m_revolute2 = (def.joint2 instanceof b2RevoluteJoint ? def.joint2 : null);\n         this.m_groundAnchor2.SetV(this.m_revolute2.m_localAnchor1);\n         this.m_localAnchor2.SetV(this.m_revolute2.m_localAnchor2);\n         coordinate2 = this.m_revolute2.GetJointAngle();\n      }\n      else {\n         this.m_prismatic2 = (def.joint2 instanceof b2PrismaticJoint ? def.joint2 : null);\n         this.m_groundAnchor2.SetV(this.m_prismatic2.m_localAnchor1);\n         this.m_localAnchor2.SetV(this.m_prismatic2.m_localAnchor2);\n         coordinate2 = this.m_prismatic2.GetJointTranslation();\n      }\n      this.m_ratio = def.ratio;\n      this.m_constant = coordinate1 + this.m_ratio * coordinate2;\n      this.m_impulse = 0.0;\n   }\n   b2GearJoint.prototype.InitVelocityConstraints = function (step) {\n      var g1 = this.m_ground1;\n      var g2 = this.m_ground2;\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var ugX = 0;\n      var ugY = 0;\n      var rX = 0;\n      var rY = 0;\n      var tMat;\n      var tVec;\n      var crug = 0;\n      var tX = 0;\n      var K = 0.0;\n      this.m_J.SetZero();\n      if (this.m_revolute1) {\n         this.m_J.angularA = (-1.0);\n         K += bA.m_invI;\n      }\n      else {\n         tMat = g1.m_xf.R;\n         tVec = this.m_prismatic1.m_localXAxis1;\n         ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n         ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n         tMat = bA.m_xf.R;\n         rX = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n         rY = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n         tX = tMat.col1.x * rX + tMat.col2.x * rY;\n         rY = tMat.col1.y * rX + tMat.col2.y * rY;\n         rX = tX;\n         crug = rX * ugY - rY * ugX;\n         this.m_J.linearA.Set((-ugX), (-ugY));\n         this.m_J.angularA = (-crug);\n         K += bA.m_invMass + bA.m_invI * crug * crug;\n      }\n      if (this.m_revolute2) {\n         this.m_J.angularB = (-this.m_ratio);\n         K += this.m_ratio * this.m_ratio * bB.m_invI;\n      }\n      else {\n         tMat = g2.m_xf.R;\n         tVec = this.m_prismatic2.m_localXAxis1;\n         ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;\n         ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;\n         tMat = bB.m_xf.R;\n         rX = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n         rY = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n         tX = tMat.col1.x * rX + tMat.col2.x * rY;\n         rY = tMat.col1.y * rX + tMat.col2.y * rY;\n         rX = tX;\n         crug = rX * ugY - rY * ugX;\n         this.m_J.linearB.Set((-this.m_ratio * ugX), (-this.m_ratio * ugY));\n         this.m_J.angularB = (-this.m_ratio * crug);\n         K += this.m_ratio * this.m_ratio * (bB.m_invMass + bB.m_invI * crug * crug);\n      }\n      this.m_mass = K > 0.0 ? 1.0 / K : 0.0;\n      if (step.warmStarting) {\n         bA.m_linearVelocity.x += bA.m_invMass * this.m_impulse * this.m_J.linearA.x;\n         bA.m_linearVelocity.y += bA.m_invMass * this.m_impulse * this.m_J.linearA.y;\n         bA.m_angularVelocity += bA.m_invI * this.m_impulse * this.m_J.angularA;\n         bB.m_linearVelocity.x += bB.m_invMass * this.m_impulse * this.m_J.linearB.x;\n         bB.m_linearVelocity.y += bB.m_invMass * this.m_impulse * this.m_J.linearB.y;\n         bB.m_angularVelocity += bB.m_invI * this.m_impulse * this.m_J.angularB;\n      }\n      else {\n         this.m_impulse = 0.0;\n      }\n   }\n   b2GearJoint.prototype.SolveVelocityConstraints = function (step) {\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var Cdot = this.m_J.Compute(bA.m_linearVelocity, bA.m_angularVelocity, bB.m_linearVelocity, bB.m_angularVelocity);\n      var impulse = (-this.m_mass * Cdot);\n      this.m_impulse += impulse;\n      bA.m_linearVelocity.x += bA.m_invMass * impulse * this.m_J.linearA.x;\n      bA.m_linearVelocity.y += bA.m_invMass * impulse * this.m_J.linearA.y;\n      bA.m_angularVelocity += bA.m_invI * impulse * this.m_J.angularA;\n      bB.m_linearVelocity.x += bB.m_invMass * impulse * this.m_J.linearB.x;\n      bB.m_linearVelocity.y += bB.m_invMass * impulse * this.m_J.linearB.y;\n      bB.m_angularVelocity += bB.m_invI * impulse * this.m_J.angularB;\n   }\n   b2GearJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n      if (baumgarte === undefined) baumgarte = 0;\n      var linearError = 0.0;\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var coordinate1 = 0;\n      var coordinate2 = 0;\n      if (this.m_revolute1) {\n         coordinate1 = this.m_revolute1.GetJointAngle();\n      }\n      else {\n         coordinate1 = this.m_prismatic1.GetJointTranslation();\n      }\n      if (this.m_revolute2) {\n         coordinate2 = this.m_revolute2.GetJointAngle();\n      }\n      else {\n         coordinate2 = this.m_prismatic2.GetJointTranslation();\n      }\n      var C = this.m_constant - (coordinate1 + this.m_ratio * coordinate2);\n      var impulse = (-this.m_mass * C);\n      bA.m_sweep.c.x += bA.m_invMass * impulse * this.m_J.linearA.x;\n      bA.m_sweep.c.y += bA.m_invMass * impulse * this.m_J.linearA.y;\n      bA.m_sweep.a += bA.m_invI * impulse * this.m_J.angularA;\n      bB.m_sweep.c.x += bB.m_invMass * impulse * this.m_J.linearB.x;\n      bB.m_sweep.c.y += bB.m_invMass * impulse * this.m_J.linearB.y;\n      bB.m_sweep.a += bB.m_invI * impulse * this.m_J.angularB;\n      bA.SynchronizeTransform();\n      bB.SynchronizeTransform();\n      return linearError < b2Settings.b2_linearSlop;\n   }\n   Box2D.inherit(b2GearJointDef, Box2D.Dynamics.Joints.b2JointDef);\n   b2GearJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;\n   b2GearJointDef.b2GearJointDef = function () {\n      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);\n   };\n   b2GearJointDef.prototype.b2GearJointDef = function () {\n      this.__super.b2JointDef.call(this);\n      this.type = b2Joint.e_gearJoint;\n      this.joint1 = null;\n      this.joint2 = null;\n      this.ratio = 1.0;\n   }\n   b2Jacobian.b2Jacobian = function () {\n      this.linearA = new b2Vec2();\n      this.linearB = new b2Vec2();\n   };\n   b2Jacobian.prototype.SetZero = function () {\n      this.linearA.SetZero();\n      this.angularA = 0.0;\n      this.linearB.SetZero();\n      this.angularB = 0.0;\n   }\n   b2Jacobian.prototype.Set = function (x1, a1, x2, a2) {\n      if (a1 === undefined) a1 = 0;\n      if (a2 === undefined) a2 = 0;\n      this.linearA.SetV(x1);\n      this.angularA = a1;\n      this.linearB.SetV(x2);\n      this.angularB = a2;\n   }\n   b2Jacobian.prototype.Compute = function (x1, a1, x2, a2) {\n      if (a1 === undefined) a1 = 0;\n      if (a2 === undefined) a2 = 0;\n      return (this.linearA.x * x1.x + this.linearA.y * x1.y) + this.angularA * a1 + (this.linearB.x * x2.x + this.linearB.y * x2.y) + this.angularB * a2;\n   }\n   b2Joint.b2Joint = function () {\n      this.m_edgeA = new b2JointEdge();\n      this.m_edgeB = new b2JointEdge();\n      this.m_localCenterA = new b2Vec2();\n      this.m_localCenterB = new b2Vec2();\n   };\n   b2Joint.prototype.GetType = function () {\n      return this.m_type;\n   }\n   b2Joint.prototype.GetAnchorA = function () {\n      return null;\n   }\n   b2Joint.prototype.GetAnchorB = function () {\n      return null;\n   }\n   b2Joint.prototype.GetReactionForce = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return null;\n   }\n   b2Joint.prototype.GetReactionTorque = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return 0.0;\n   }\n   b2Joint.prototype.GetBodyA = function () {\n      return this.m_bodyA;\n   }\n   b2Joint.prototype.GetBodyB = function () {\n      return this.m_bodyB;\n   }\n   b2Joint.prototype.GetNext = function () {\n      return this.m_next;\n   }\n   b2Joint.prototype.GetUserData = function () {\n      return this.m_userData;\n   }\n   b2Joint.prototype.SetUserData = function (data) {\n      this.m_userData = data;\n   }\n   b2Joint.prototype.IsActive = function () {\n      return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();\n   }\n   b2Joint.Create = function (def, allocator) {\n      var joint = null;\n      switch (def.type) {\n      case b2Joint.e_distanceJoint:\n         {\n            joint = new b2DistanceJoint((def instanceof b2DistanceJointDef ? def : null));\n         }\n         break;\n      case b2Joint.e_mouseJoint:\n         {\n            joint = new b2MouseJoint((def instanceof b2MouseJointDef ? def : null));\n         }\n         break;\n      case b2Joint.e_prismaticJoint:\n         {\n            joint = new b2PrismaticJoint((def instanceof b2PrismaticJointDef ? def : null));\n         }\n         break;\n      case b2Joint.e_revoluteJoint:\n         {\n            joint = new b2RevoluteJoint((def instanceof b2RevoluteJointDef ? def : null));\n         }\n         break;\n      case b2Joint.e_pulleyJoint:\n         {\n            joint = new b2PulleyJoint((def instanceof b2PulleyJointDef ? def : null));\n         }\n         break;\n      case b2Joint.e_gearJoint:\n         {\n            joint = new b2GearJoint((def instanceof b2GearJointDef ? def : null));\n         }\n         break;\n      case b2Joint.e_lineJoint:\n         {\n            joint = new b2LineJoint((def instanceof b2LineJointDef ? def : null));\n         }\n         break;\n      case b2Joint.e_weldJoint:\n         {\n            joint = new b2WeldJoint((def instanceof b2WeldJointDef ? def : null));\n         }\n         break;\n      case b2Joint.e_frictionJoint:\n         {\n            joint = new b2FrictionJoint((def instanceof b2FrictionJointDef ? def : null));\n         }\n         break;\n      default:\n         break;\n      }\n      return joint;\n   }\n   b2Joint.Destroy = function (joint, allocator) {}\n   b2Joint.prototype.b2Joint = function (def) {\n      b2Settings.b2Assert(def.bodyA != def.bodyB);\n      this.m_type = def.type;\n      this.m_prev = null;\n      this.m_next = null;\n      this.m_bodyA = def.bodyA;\n      this.m_bodyB = def.bodyB;\n      this.m_collideConnected = def.collideConnected;\n      this.m_islandFlag = false;\n      this.m_userData = def.userData;\n   }\n   b2Joint.prototype.InitVelocityConstraints = function (step) {}\n   b2Joint.prototype.SolveVelocityConstraints = function (step) {}\n   b2Joint.prototype.FinalizeVelocityConstraints = function () {}\n   b2Joint.prototype.SolvePositionConstraints = function (baumgarte) {\n      if (baumgarte === undefined) baumgarte = 0;\n      return false;\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Dynamics.Joints.b2Joint.e_unknownJoint = 0;\n      Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint = 1;\n      Box2D.Dynamics.Joints.b2Joint.e_prismaticJoint = 2;\n      Box2D.Dynamics.Joints.b2Joint.e_distanceJoint = 3;\n      Box2D.Dynamics.Joints.b2Joint.e_pulleyJoint = 4;\n      Box2D.Dynamics.Joints.b2Joint.e_mouseJoint = 5;\n      Box2D.Dynamics.Joints.b2Joint.e_gearJoint = 6;\n      Box2D.Dynamics.Joints.b2Joint.e_lineJoint = 7;\n      Box2D.Dynamics.Joints.b2Joint.e_weldJoint = 8;\n      Box2D.Dynamics.Joints.b2Joint.e_frictionJoint = 9;\n      Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit = 0;\n      Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit = 1;\n      Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit = 2;\n      Box2D.Dynamics.Joints.b2Joint.e_equalLimits = 3;\n   });\n   b2JointDef.b2JointDef = function () {};\n   b2JointDef.prototype.b2JointDef = function () {\n      this.type = b2Joint.e_unknownJoint;\n      this.userData = null;\n      this.bodyA = null;\n      this.bodyB = null;\n      this.collideConnected = false;\n   }\n   b2JointEdge.b2JointEdge = function () {};\n   Box2D.inherit(b2LineJoint, Box2D.Dynamics.Joints.b2Joint);\n   b2LineJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;\n   b2LineJoint.b2LineJoint = function () {\n      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);\n      this.m_localAnchor1 = new b2Vec2();\n      this.m_localAnchor2 = new b2Vec2();\n      this.m_localXAxis1 = new b2Vec2();\n      this.m_localYAxis1 = new b2Vec2();\n      this.m_axis = new b2Vec2();\n      this.m_perp = new b2Vec2();\n      this.m_K = new b2Mat22();\n      this.m_impulse = new b2Vec2();\n   };\n   b2LineJoint.prototype.GetAnchorA = function () {\n      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);\n   }\n   b2LineJoint.prototype.GetAnchorB = function () {\n      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);\n   }\n   b2LineJoint.prototype.GetReactionForce = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return new b2Vec2(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y));\n   }\n   b2LineJoint.prototype.GetReactionTorque = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return inv_dt * this.m_impulse.y;\n   }\n   b2LineJoint.prototype.GetJointTranslation = function () {\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var tMat;\n      var p1 = bA.GetWorldPoint(this.m_localAnchor1);\n      var p2 = bB.GetWorldPoint(this.m_localAnchor2);\n      var dX = p2.x - p1.x;\n      var dY = p2.y - p1.y;\n      var axis = bA.GetWorldVector(this.m_localXAxis1);\n      var translation = axis.x * dX + axis.y * dY;\n      return translation;\n   }\n   b2LineJoint.prototype.GetJointSpeed = function () {\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var tMat;\n      tMat = bA.m_xf.R;\n      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n      r1X = tX;\n      tMat = bB.m_xf.R;\n      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n      r2X = tX;\n      var p1X = bA.m_sweep.c.x + r1X;\n      var p1Y = bA.m_sweep.c.y + r1Y;\n      var p2X = bB.m_sweep.c.x + r2X;\n      var p2Y = bB.m_sweep.c.y + r2Y;\n      var dX = p2X - p1X;\n      var dY = p2Y - p1Y;\n      var axis = bA.GetWorldVector(this.m_localXAxis1);\n      var v1 = bA.m_linearVelocity;\n      var v2 = bB.m_linearVelocity;\n      var w1 = bA.m_angularVelocity;\n      var w2 = bB.m_angularVelocity;\n      var speed = (dX * ((-w1 * axis.y)) + dY * (w1 * axis.x)) + (axis.x * (((v2.x + ((-w2 * r2Y))) - v1.x) - ((-w1 * r1Y))) + axis.y * (((v2.y + (w2 * r2X)) - v1.y) - (w1 * r1X)));\n      return speed;\n   }\n   b2LineJoint.prototype.IsLimitEnabled = function () {\n      return this.m_enableLimit;\n   }\n   b2LineJoint.prototype.EnableLimit = function (flag) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_enableLimit = flag;\n   }\n   b2LineJoint.prototype.GetLowerLimit = function () {\n      return this.m_lowerTranslation;\n   }\n   b2LineJoint.prototype.GetUpperLimit = function () {\n      return this.m_upperTranslation;\n   }\n   b2LineJoint.prototype.SetLimits = function (lower, upper) {\n      if (lower === undefined) lower = 0;\n      if (upper === undefined) upper = 0;\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_lowerTranslation = lower;\n      this.m_upperTranslation = upper;\n   }\n   b2LineJoint.prototype.IsMotorEnabled = function () {\n      return this.m_enableMotor;\n   }\n   b2LineJoint.prototype.EnableMotor = function (flag) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_enableMotor = flag;\n   }\n   b2LineJoint.prototype.SetMotorSpeed = function (speed) {\n      if (speed === undefined) speed = 0;\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_motorSpeed = speed;\n   }\n   b2LineJoint.prototype.GetMotorSpeed = function () {\n      return this.m_motorSpeed;\n   }\n   b2LineJoint.prototype.SetMaxMotorForce = function (force) {\n      if (force === undefined) force = 0;\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_maxMotorForce = force;\n   }\n   b2LineJoint.prototype.GetMaxMotorForce = function () {\n      return this.m_maxMotorForce;\n   }\n   b2LineJoint.prototype.GetMotorForce = function () {\n      return this.m_motorImpulse;\n   }\n   b2LineJoint.prototype.b2LineJoint = function (def) {\n      this.__super.b2Joint.call(this, def);\n      var tMat;\n      var tX = 0;\n      var tY = 0;\n      this.m_localAnchor1.SetV(def.localAnchorA);\n      this.m_localAnchor2.SetV(def.localAnchorB);\n      this.m_localXAxis1.SetV(def.localAxisA);\n      this.m_localYAxis1.x = (-this.m_localXAxis1.y);\n      this.m_localYAxis1.y = this.m_localXAxis1.x;\n      this.m_impulse.SetZero();\n      this.m_motorMass = 0.0;\n      this.m_motorImpulse = 0.0;\n      this.m_lowerTranslation = def.lowerTranslation;\n      this.m_upperTranslation = def.upperTranslation;\n      this.m_maxMotorForce = def.maxMotorForce;\n      this.m_motorSpeed = def.motorSpeed;\n      this.m_enableLimit = def.enableLimit;\n      this.m_enableMotor = def.enableMotor;\n      this.m_limitState = b2Joint.e_inactiveLimit;\n      this.m_axis.SetZero();\n      this.m_perp.SetZero();\n   }\n   b2LineJoint.prototype.InitVelocityConstraints = function (step) {\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var tMat;\n      var tX = 0;\n      this.m_localCenterA.SetV(bA.GetLocalCenter());\n      this.m_localCenterB.SetV(bB.GetLocalCenter());\n      var xf1 = bA.GetTransform();\n      var xf2 = bB.GetTransform();\n      tMat = bA.m_xf.R;\n      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;\n      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;\n      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n      r1X = tX;\n      tMat = bB.m_xf.R;\n      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;\n      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;\n      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n      r2X = tX;\n      var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;\n      var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;\n      this.m_invMassA = bA.m_invMass;\n      this.m_invMassB = bB.m_invMass;\n      this.m_invIA = bA.m_invI;\n      this.m_invIB = bB.m_invI; {\n         this.m_axis.SetV(b2Math.MulMV(xf1.R, this.m_localXAxis1));\n         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;\n         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;\n         this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;\n         this.m_motorMass = this.m_motorMass > Number.MIN_VALUE ? 1.0 / this.m_motorMass : 0.0;\n      } {\n         this.m_perp.SetV(b2Math.MulMV(xf1.R, this.m_localYAxis1));\n         this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;\n         this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;\n         var m1 = this.m_invMassA;\n         var m2 = this.m_invMassB;\n         var i1 = this.m_invIA;\n         var i2 = this.m_invIB;\n         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;\n         this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;\n         this.m_K.col2.x = this.m_K.col1.y;\n         this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;\n      }\n      if (this.m_enableLimit) {\n         var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;\n         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {\n            this.m_limitState = b2Joint.e_equalLimits;\n         }\n         else if (jointTransition <= this.m_lowerTranslation) {\n            if (this.m_limitState != b2Joint.e_atLowerLimit) {\n               this.m_limitState = b2Joint.e_atLowerLimit;\n               this.m_impulse.y = 0.0;\n            }\n         }\n         else if (jointTransition >= this.m_upperTranslation) {\n            if (this.m_limitState != b2Joint.e_atUpperLimit) {\n               this.m_limitState = b2Joint.e_atUpperLimit;\n               this.m_impulse.y = 0.0;\n            }\n         }\n         else {\n            this.m_limitState = b2Joint.e_inactiveLimit;\n            this.m_impulse.y = 0.0;\n         }\n      }\n      else {\n         this.m_limitState = b2Joint.e_inactiveLimit;\n      }\n      if (this.m_enableMotor == false) {\n         this.m_motorImpulse = 0.0;\n      }\n      if (step.warmStarting) {\n         this.m_impulse.x *= step.dtRatio;\n         this.m_impulse.y *= step.dtRatio;\n         this.m_motorImpulse *= step.dtRatio;\n         var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x;\n         var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y;\n         var L1 = this.m_impulse.x * this.m_s1 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a1;\n         var L2 = this.m_impulse.x * this.m_s2 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a2;\n         bA.m_linearVelocity.x -= this.m_invMassA * PX;\n         bA.m_linearVelocity.y -= this.m_invMassA * PY;\n         bA.m_angularVelocity -= this.m_invIA * L1;\n         bB.m_linearVelocity.x += this.m_invMassB * PX;\n         bB.m_linearVelocity.y += this.m_invMassB * PY;\n         bB.m_angularVelocity += this.m_invIB * L2;\n      }\n      else {\n         this.m_impulse.SetZero();\n         this.m_motorImpulse = 0.0;\n      }\n   }\n   b2LineJoint.prototype.SolveVelocityConstraints = function (step) {\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var v1 = bA.m_linearVelocity;\n      var w1 = bA.m_angularVelocity;\n      var v2 = bB.m_linearVelocity;\n      var w2 = bB.m_angularVelocity;\n      var PX = 0;\n      var PY = 0;\n      var L1 = 0;\n      var L2 = 0;\n      if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {\n         var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;\n         var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n         var oldImpulse = this.m_motorImpulse;\n         var maxImpulse = step.dt * this.m_maxMotorForce;\n         this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);\n         impulse = this.m_motorImpulse - oldImpulse;\n         PX = impulse * this.m_axis.x;\n         PY = impulse * this.m_axis.y;\n         L1 = impulse * this.m_a1;\n         L2 = impulse * this.m_a2;\n         v1.x -= this.m_invMassA * PX;\n         v1.y -= this.m_invMassA * PY;\n         w1 -= this.m_invIA * L1;\n         v2.x += this.m_invMassB * PX;\n         v2.y += this.m_invMassB * PY;\n         w2 += this.m_invIB * L2;\n      }\n      var Cdot1 = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;\n      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {\n         var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;\n         var f1 = this.m_impulse.Copy();\n         var df = this.m_K.Solve(new b2Vec2(), (-Cdot1), (-Cdot2));\n         this.m_impulse.Add(df);\n         if (this.m_limitState == b2Joint.e_atLowerLimit) {\n            this.m_impulse.y = b2Math.Max(this.m_impulse.y, 0.0);\n         }\n         else if (this.m_limitState == b2Joint.e_atUpperLimit) {\n            this.m_impulse.y = b2Math.Min(this.m_impulse.y, 0.0);\n         }\n         var b = (-Cdot1) - (this.m_impulse.y - f1.y) * this.m_K.col2.x;\n         var f2r = 0;\n         if (this.m_K.col1.x != 0.0) {\n            f2r = b / this.m_K.col1.x + f1.x;\n         }\n         else {\n            f2r = f1.x;\n         }\n         this.m_impulse.x = f2r;\n         df.x = this.m_impulse.x - f1.x;\n         df.y = this.m_impulse.y - f1.y;\n         PX = df.x * this.m_perp.x + df.y * this.m_axis.x;\n         PY = df.x * this.m_perp.y + df.y * this.m_axis.y;\n         L1 = df.x * this.m_s1 + df.y * this.m_a1;\n         L2 = df.x * this.m_s2 + df.y * this.m_a2;\n         v1.x -= this.m_invMassA * PX;\n         v1.y -= this.m_invMassA * PY;\n         w1 -= this.m_invIA * L1;\n         v2.x += this.m_invMassB * PX;\n         v2.y += this.m_invMassB * PY;\n         w2 += this.m_invIB * L2;\n      }\n      else {\n         var df2 = 0;\n         if (this.m_K.col1.x != 0.0) {\n            df2 = ((-Cdot1)) / this.m_K.col1.x;\n         }\n         else {\n            df2 = 0.0;\n         }\n         this.m_impulse.x += df2;\n         PX = df2 * this.m_perp.x;\n         PY = df2 * this.m_perp.y;\n         L1 = df2 * this.m_s1;\n         L2 = df2 * this.m_s2;\n         v1.x -= this.m_invMassA * PX;\n         v1.y -= this.m_invMassA * PY;\n         w1 -= this.m_invIA * L1;\n         v2.x += this.m_invMassB * PX;\n         v2.y += this.m_invMassB * PY;\n         w2 += this.m_invIB * L2;\n      }\n      bA.m_linearVelocity.SetV(v1);\n      bA.m_angularVelocity = w1;\n      bB.m_linearVelocity.SetV(v2);\n      bB.m_angularVelocity = w2;\n   }\n   b2LineJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n      if (baumgarte === undefined) baumgarte = 0;\n      var limitC = 0;\n      var oldLimitImpulse = 0;\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var c1 = bA.m_sweep.c;\n      var a1 = bA.m_sweep.a;\n      var c2 = bB.m_sweep.c;\n      var a2 = bB.m_sweep.a;\n      var tMat;\n      var tX = 0;\n      var m1 = 0;\n      var m2 = 0;\n      var i1 = 0;\n      var i2 = 0;\n      var linearError = 0.0;\n      var angularError = 0.0;\n      var active = false;\n      var C2 = 0.0;\n      var R1 = b2Mat22.FromAngle(a1);\n      var R2 = b2Mat22.FromAngle(a2);\n      tMat = R1;\n      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;\n      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;\n      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n      r1X = tX;\n      tMat = R2;\n      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;\n      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;\n      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n      r2X = tX;\n      var dX = c2.x + r2X - c1.x - r1X;\n      var dY = c2.y + r2Y - c1.y - r1Y;\n      if (this.m_enableLimit) {\n         this.m_axis = b2Math.MulMV(R1, this.m_localXAxis1);\n         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;\n         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;\n         var translation = this.m_axis.x * dX + this.m_axis.y * dY;\n         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {\n            C2 = b2Math.Clamp(translation, (-b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);\n            linearError = b2Math.Abs(translation);\n            active = true;\n         }\n         else if (translation <= this.m_lowerTranslation) {\n            C2 = b2Math.Clamp(translation - this.m_lowerTranslation + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);\n            linearError = this.m_lowerTranslation - translation;\n            active = true;\n         }\n         else if (translation >= this.m_upperTranslation) {\n            C2 = b2Math.Clamp(translation - this.m_upperTranslation + b2Settings.b2_linearSlop, 0.0, b2Settings.b2_maxLinearCorrection);\n            linearError = translation - this.m_upperTranslation;\n            active = true;\n         }\n      }\n      this.m_perp = b2Math.MulMV(R1, this.m_localYAxis1);\n      this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;\n      this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;\n      var impulse = new b2Vec2();\n      var C1 = this.m_perp.x * dX + this.m_perp.y * dY;\n      linearError = b2Math.Max(linearError, b2Math.Abs(C1));\n      angularError = 0.0;\n      if (active) {\n         m1 = this.m_invMassA;\n         m2 = this.m_invMassB;\n         i1 = this.m_invIA;\n         i2 = this.m_invIB;\n         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;\n         this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;\n         this.m_K.col2.x = this.m_K.col1.y;\n         this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;\n         this.m_K.Solve(impulse, (-C1), (-C2));\n      }\n      else {\n         m1 = this.m_invMassA;\n         m2 = this.m_invMassB;\n         i1 = this.m_invIA;\n         i2 = this.m_invIB;\n         var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;\n         var impulse1 = 0;\n         if (k11 != 0.0) {\n            impulse1 = ((-C1)) / k11;\n         }\n         else {\n            impulse1 = 0.0;\n         }\n         impulse.x = impulse1;\n         impulse.y = 0.0;\n      }\n      var PX = impulse.x * this.m_perp.x + impulse.y * this.m_axis.x;\n      var PY = impulse.x * this.m_perp.y + impulse.y * this.m_axis.y;\n      var L1 = impulse.x * this.m_s1 + impulse.y * this.m_a1;\n      var L2 = impulse.x * this.m_s2 + impulse.y * this.m_a2;\n      c1.x -= this.m_invMassA * PX;\n      c1.y -= this.m_invMassA * PY;\n      a1 -= this.m_invIA * L1;\n      c2.x += this.m_invMassB * PX;\n      c2.y += this.m_invMassB * PY;\n      a2 += this.m_invIB * L2;\n      bA.m_sweep.a = a1;\n      bB.m_sweep.a = a2;\n      bA.SynchronizeTransform();\n      bB.SynchronizeTransform();\n      return linearError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;\n   }\n   Box2D.inherit(b2LineJointDef, Box2D.Dynamics.Joints.b2JointDef);\n   b2LineJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;\n   b2LineJointDef.b2LineJointDef = function () {\n      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);\n      this.localAnchorA = new b2Vec2();\n      this.localAnchorB = new b2Vec2();\n      this.localAxisA = new b2Vec2();\n   };\n   b2LineJointDef.prototype.b2LineJointDef = function () {\n      this.__super.b2JointDef.call(this);\n      this.type = b2Joint.e_lineJoint;\n      this.localAxisA.Set(1.0, 0.0);\n      this.enableLimit = false;\n      this.lowerTranslation = 0.0;\n      this.upperTranslation = 0.0;\n      this.enableMotor = false;\n      this.maxMotorForce = 0.0;\n      this.motorSpeed = 0.0;\n   }\n   b2LineJointDef.prototype.Initialize = function (bA, bB, anchor, axis) {\n      this.bodyA = bA;\n      this.bodyB = bB;\n      this.localAnchorA = this.bodyA.GetLocalPoint(anchor);\n      this.localAnchorB = this.bodyB.GetLocalPoint(anchor);\n      this.localAxisA = this.bodyA.GetLocalVector(axis);\n   }\n   Box2D.inherit(b2MouseJoint, Box2D.Dynamics.Joints.b2Joint);\n   b2MouseJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;\n   b2MouseJoint.b2MouseJoint = function () {\n      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);\n      this.K = new b2Mat22();\n      this.K1 = new b2Mat22();\n      this.K2 = new b2Mat22();\n      this.m_localAnchor = new b2Vec2();\n      this.m_target = new b2Vec2();\n      this.m_impulse = new b2Vec2();\n      this.m_mass = new b2Mat22();\n      this.m_C = new b2Vec2();\n   };\n   b2MouseJoint.prototype.GetAnchorA = function () {\n      return this.m_target;\n   }\n   b2MouseJoint.prototype.GetAnchorB = function () {\n      return this.m_bodyB.GetWorldPoint(this.m_localAnchor);\n   }\n   b2MouseJoint.prototype.GetReactionForce = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);\n   }\n   b2MouseJoint.prototype.GetReactionTorque = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return 0.0;\n   }\n   b2MouseJoint.prototype.GetTarget = function () {\n      return this.m_target;\n   }\n   b2MouseJoint.prototype.SetTarget = function (target) {\n      if (this.m_bodyB.IsAwake() == false) {\n         this.m_bodyB.SetAwake(true);\n      }\n      this.m_target = target;\n   }\n   b2MouseJoint.prototype.GetMaxForce = function () {\n      return this.m_maxForce;\n   }\n   b2MouseJoint.prototype.SetMaxForce = function (maxForce) {\n      if (maxForce === undefined) maxForce = 0;\n      this.m_maxForce = maxForce;\n   }\n   b2MouseJoint.prototype.GetFrequency = function () {\n      return this.m_frequencyHz;\n   }\n   b2MouseJoint.prototype.SetFrequency = function (hz) {\n      if (hz === undefined) hz = 0;\n      this.m_frequencyHz = hz;\n   }\n   b2MouseJoint.prototype.GetDampingRatio = function () {\n      return this.m_dampingRatio;\n   }\n   b2MouseJoint.prototype.SetDampingRatio = function (ratio) {\n      if (ratio === undefined) ratio = 0;\n      this.m_dampingRatio = ratio;\n   }\n   b2MouseJoint.prototype.b2MouseJoint = function (def) {\n      this.__super.b2Joint.call(this, def);\n      this.m_target.SetV(def.target);\n      var tX = this.m_target.x - this.m_bodyB.m_xf.position.x;\n      var tY = this.m_target.y - this.m_bodyB.m_xf.position.y;\n      var tMat = this.m_bodyB.m_xf.R;\n      this.m_localAnchor.x = (tX * tMat.col1.x + tY * tMat.col1.y);\n      this.m_localAnchor.y = (tX * tMat.col2.x + tY * tMat.col2.y);\n      this.m_maxForce = def.maxForce;\n      this.m_impulse.SetZero();\n      this.m_frequencyHz = def.frequencyHz;\n      this.m_dampingRatio = def.dampingRatio;\n      this.m_beta = 0.0;\n      this.m_gamma = 0.0;\n   }\n   b2MouseJoint.prototype.InitVelocityConstraints = function (step) {\n      var b = this.m_bodyB;\n      var mass = b.GetMass();\n      var omega = 2.0 * Math.PI * this.m_frequencyHz;\n      var d = 2.0 * mass * this.m_dampingRatio * omega;\n      var k = mass * omega * omega;\n      this.m_gamma = step.dt * (d + step.dt * k);\n      this.m_gamma = this.m_gamma != 0 ? 1 / this.m_gamma : 0.0;\n      this.m_beta = step.dt * k * this.m_gamma;\n      var tMat;tMat = b.m_xf.R;\n      var rX = this.m_localAnchor.x - b.m_sweep.localCenter.x;\n      var rY = this.m_localAnchor.y - b.m_sweep.localCenter.y;\n      var tX = (tMat.col1.x * rX + tMat.col2.x * rY);rY = (tMat.col1.y * rX + tMat.col2.y * rY);\n      rX = tX;\n      var invMass = b.m_invMass;\n      var invI = b.m_invI;this.K1.col1.x = invMass;\n      this.K1.col2.x = 0.0;\n      this.K1.col1.y = 0.0;\n      this.K1.col2.y = invMass;\n      this.K2.col1.x = invI * rY * rY;\n      this.K2.col2.x = (-invI * rX * rY);\n      this.K2.col1.y = (-invI * rX * rY);\n      this.K2.col2.y = invI * rX * rX;\n      this.K.SetM(this.K1);\n      this.K.AddM(this.K2);\n      this.K.col1.x += this.m_gamma;\n      this.K.col2.y += this.m_gamma;\n      this.K.GetInverse(this.m_mass);\n      this.m_C.x = b.m_sweep.c.x + rX - this.m_target.x;\n      this.m_C.y = b.m_sweep.c.y + rY - this.m_target.y;\n      b.m_angularVelocity *= 0.98;\n      this.m_impulse.x *= step.dtRatio;\n      this.m_impulse.y *= step.dtRatio;\n      b.m_linearVelocity.x += invMass * this.m_impulse.x;\n      b.m_linearVelocity.y += invMass * this.m_impulse.y;\n      b.m_angularVelocity += invI * (rX * this.m_impulse.y - rY * this.m_impulse.x);\n   }\n   b2MouseJoint.prototype.SolveVelocityConstraints = function (step) {\n      var b = this.m_bodyB;\n      var tMat;\n      var tX = 0;\n      var tY = 0;\n      tMat = b.m_xf.R;\n      var rX = this.m_localAnchor.x - b.m_sweep.localCenter.x;\n      var rY = this.m_localAnchor.y - b.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * rX + tMat.col2.x * rY);\n      rY = (tMat.col1.y * rX + tMat.col2.y * rY);\n      rX = tX;\n      var CdotX = b.m_linearVelocity.x + ((-b.m_angularVelocity * rY));\n      var CdotY = b.m_linearVelocity.y + (b.m_angularVelocity * rX);\n      tMat = this.m_mass;\n      tX = CdotX + this.m_beta * this.m_C.x + this.m_gamma * this.m_impulse.x;\n      tY = CdotY + this.m_beta * this.m_C.y + this.m_gamma * this.m_impulse.y;\n      var impulseX = (-(tMat.col1.x * tX + tMat.col2.x * tY));\n      var impulseY = (-(tMat.col1.y * tX + tMat.col2.y * tY));\n      var oldImpulseX = this.m_impulse.x;\n      var oldImpulseY = this.m_impulse.y;\n      this.m_impulse.x += impulseX;\n      this.m_impulse.y += impulseY;\n      var maxImpulse = step.dt * this.m_maxForce;\n      if (this.m_impulse.LengthSquared() > maxImpulse * maxImpulse) {\n         this.m_impulse.Multiply(maxImpulse / this.m_impulse.Length());\n      }\n      impulseX = this.m_impulse.x - oldImpulseX;\n      impulseY = this.m_impulse.y - oldImpulseY;\n      b.m_linearVelocity.x += b.m_invMass * impulseX;\n      b.m_linearVelocity.y += b.m_invMass * impulseY;\n      b.m_angularVelocity += b.m_invI * (rX * impulseY - rY * impulseX);\n   }\n   b2MouseJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n      if (baumgarte === undefined) baumgarte = 0;\n      return true;\n   }\n   Box2D.inherit(b2MouseJointDef, Box2D.Dynamics.Joints.b2JointDef);\n   b2MouseJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;\n   b2MouseJointDef.b2MouseJointDef = function () {\n      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);\n      this.target = new b2Vec2();\n   };\n   b2MouseJointDef.prototype.b2MouseJointDef = function () {\n      this.__super.b2JointDef.call(this);\n      this.type = b2Joint.e_mouseJoint;\n      this.maxForce = 0.0;\n      this.frequencyHz = 5.0;\n      this.dampingRatio = 0.7;\n   }\n   Box2D.inherit(b2PrismaticJoint, Box2D.Dynamics.Joints.b2Joint);\n   b2PrismaticJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;\n   b2PrismaticJoint.b2PrismaticJoint = function () {\n      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);\n      this.m_localAnchor1 = new b2Vec2();\n      this.m_localAnchor2 = new b2Vec2();\n      this.m_localXAxis1 = new b2Vec2();\n      this.m_localYAxis1 = new b2Vec2();\n      this.m_axis = new b2Vec2();\n      this.m_perp = new b2Vec2();\n      this.m_K = new b2Mat33();\n      this.m_impulse = new b2Vec3();\n   };\n   b2PrismaticJoint.prototype.GetAnchorA = function () {\n      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);\n   }\n   b2PrismaticJoint.prototype.GetAnchorB = function () {\n      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);\n   }\n   b2PrismaticJoint.prototype.GetReactionForce = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return new b2Vec2(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y));\n   }\n   b2PrismaticJoint.prototype.GetReactionTorque = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return inv_dt * this.m_impulse.y;\n   }\n   b2PrismaticJoint.prototype.GetJointTranslation = function () {\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var tMat;\n      var p1 = bA.GetWorldPoint(this.m_localAnchor1);\n      var p2 = bB.GetWorldPoint(this.m_localAnchor2);\n      var dX = p2.x - p1.x;\n      var dY = p2.y - p1.y;\n      var axis = bA.GetWorldVector(this.m_localXAxis1);\n      var translation = axis.x * dX + axis.y * dY;\n      return translation;\n   }\n   b2PrismaticJoint.prototype.GetJointSpeed = function () {\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var tMat;\n      tMat = bA.m_xf.R;\n      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n      r1X = tX;\n      tMat = bB.m_xf.R;\n      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n      r2X = tX;\n      var p1X = bA.m_sweep.c.x + r1X;\n      var p1Y = bA.m_sweep.c.y + r1Y;\n      var p2X = bB.m_sweep.c.x + r2X;\n      var p2Y = bB.m_sweep.c.y + r2Y;\n      var dX = p2X - p1X;\n      var dY = p2Y - p1Y;\n      var axis = bA.GetWorldVector(this.m_localXAxis1);\n      var v1 = bA.m_linearVelocity;\n      var v2 = bB.m_linearVelocity;\n      var w1 = bA.m_angularVelocity;\n      var w2 = bB.m_angularVelocity;\n      var speed = (dX * ((-w1 * axis.y)) + dY * (w1 * axis.x)) + (axis.x * (((v2.x + ((-w2 * r2Y))) - v1.x) - ((-w1 * r1Y))) + axis.y * (((v2.y + (w2 * r2X)) - v1.y) - (w1 * r1X)));\n      return speed;\n   }\n   b2PrismaticJoint.prototype.IsLimitEnabled = function () {\n      return this.m_enableLimit;\n   }\n   b2PrismaticJoint.prototype.EnableLimit = function (flag) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_enableLimit = flag;\n   }\n   b2PrismaticJoint.prototype.GetLowerLimit = function () {\n      return this.m_lowerTranslation;\n   }\n   b2PrismaticJoint.prototype.GetUpperLimit = function () {\n      return this.m_upperTranslation;\n   }\n   b2PrismaticJoint.prototype.SetLimits = function (lower, upper) {\n      if (lower === undefined) lower = 0;\n      if (upper === undefined) upper = 0;\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_lowerTranslation = lower;\n      this.m_upperTranslation = upper;\n   }\n   b2PrismaticJoint.prototype.IsMotorEnabled = function () {\n      return this.m_enableMotor;\n   }\n   b2PrismaticJoint.prototype.EnableMotor = function (flag) {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_enableMotor = flag;\n   }\n   b2PrismaticJoint.prototype.SetMotorSpeed = function (speed) {\n      if (speed === undefined) speed = 0;\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_motorSpeed = speed;\n   }\n   b2PrismaticJoint.prototype.GetMotorSpeed = function () {\n      return this.m_motorSpeed;\n   }\n   b2PrismaticJoint.prototype.SetMaxMotorForce = function (force) {\n      if (force === undefined) force = 0;\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_maxMotorForce = force;\n   }\n   b2PrismaticJoint.prototype.GetMotorForce = function () {\n      return this.m_motorImpulse;\n   }\n   b2PrismaticJoint.prototype.b2PrismaticJoint = function (def) {\n      this.__super.b2Joint.call(this, def);\n      var tMat;\n      var tX = 0;\n      var tY = 0;\n      this.m_localAnchor1.SetV(def.localAnchorA);\n      this.m_localAnchor2.SetV(def.localAnchorB);\n      this.m_localXAxis1.SetV(def.localAxisA);\n      this.m_localYAxis1.x = (-this.m_localXAxis1.y);\n      this.m_localYAxis1.y = this.m_localXAxis1.x;\n      this.m_refAngle = def.referenceAngle;\n      this.m_impulse.SetZero();\n      this.m_motorMass = 0.0;\n      this.m_motorImpulse = 0.0;\n      this.m_lowerTranslation = def.lowerTranslation;\n      this.m_upperTranslation = def.upperTranslation;\n      this.m_maxMotorForce = def.maxMotorForce;\n      this.m_motorSpeed = def.motorSpeed;\n      this.m_enableLimit = def.enableLimit;\n      this.m_enableMotor = def.enableMotor;\n      this.m_limitState = b2Joint.e_inactiveLimit;\n      this.m_axis.SetZero();\n      this.m_perp.SetZero();\n   }\n   b2PrismaticJoint.prototype.InitVelocityConstraints = function (step) {\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var tMat;\n      var tX = 0;\n      this.m_localCenterA.SetV(bA.GetLocalCenter());\n      this.m_localCenterB.SetV(bB.GetLocalCenter());\n      var xf1 = bA.GetTransform();\n      var xf2 = bB.GetTransform();\n      tMat = bA.m_xf.R;\n      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;\n      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;\n      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n      r1X = tX;\n      tMat = bB.m_xf.R;\n      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;\n      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;\n      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n      r2X = tX;\n      var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;\n      var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;\n      this.m_invMassA = bA.m_invMass;\n      this.m_invMassB = bB.m_invMass;\n      this.m_invIA = bA.m_invI;\n      this.m_invIB = bB.m_invI; {\n         this.m_axis.SetV(b2Math.MulMV(xf1.R, this.m_localXAxis1));\n         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;\n         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;\n         this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;\n         if (this.m_motorMass > Number.MIN_VALUE) this.m_motorMass = 1.0 / this.m_motorMass;\n      } {\n         this.m_perp.SetV(b2Math.MulMV(xf1.R, this.m_localYAxis1));\n         this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;\n         this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;\n         var m1 = this.m_invMassA;\n         var m2 = this.m_invMassB;\n         var i1 = this.m_invIA;\n         var i2 = this.m_invIB;\n         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;\n         this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;\n         this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;\n         this.m_K.col2.x = this.m_K.col1.y;\n         this.m_K.col2.y = i1 + i2;\n         this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;\n         this.m_K.col3.x = this.m_K.col1.z;\n         this.m_K.col3.y = this.m_K.col2.z;\n         this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;\n      }\n      if (this.m_enableLimit) {\n         var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;\n         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {\n            this.m_limitState = b2Joint.e_equalLimits;\n         }\n         else if (jointTransition <= this.m_lowerTranslation) {\n            if (this.m_limitState != b2Joint.e_atLowerLimit) {\n               this.m_limitState = b2Joint.e_atLowerLimit;\n               this.m_impulse.z = 0.0;\n            }\n         }\n         else if (jointTransition >= this.m_upperTranslation) {\n            if (this.m_limitState != b2Joint.e_atUpperLimit) {\n               this.m_limitState = b2Joint.e_atUpperLimit;\n               this.m_impulse.z = 0.0;\n            }\n         }\n         else {\n            this.m_limitState = b2Joint.e_inactiveLimit;\n            this.m_impulse.z = 0.0;\n         }\n      }\n      else {\n         this.m_limitState = b2Joint.e_inactiveLimit;\n      }\n      if (this.m_enableMotor == false) {\n         this.m_motorImpulse = 0.0;\n      }\n      if (step.warmStarting) {\n         this.m_impulse.x *= step.dtRatio;\n         this.m_impulse.y *= step.dtRatio;\n         this.m_motorImpulse *= step.dtRatio;\n         var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x;\n         var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y;\n         var L1 = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n         var L2 = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n         bA.m_linearVelocity.x -= this.m_invMassA * PX;\n         bA.m_linearVelocity.y -= this.m_invMassA * PY;\n         bA.m_angularVelocity -= this.m_invIA * L1;\n         bB.m_linearVelocity.x += this.m_invMassB * PX;\n         bB.m_linearVelocity.y += this.m_invMassB * PY;\n         bB.m_angularVelocity += this.m_invIB * L2;\n      }\n      else {\n         this.m_impulse.SetZero();\n         this.m_motorImpulse = 0.0;\n      }\n   }\n   b2PrismaticJoint.prototype.SolveVelocityConstraints = function (step) {\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var v1 = bA.m_linearVelocity;\n      var w1 = bA.m_angularVelocity;\n      var v2 = bB.m_linearVelocity;\n      var w2 = bB.m_angularVelocity;\n      var PX = 0;\n      var PY = 0;\n      var L1 = 0;\n      var L2 = 0;\n      if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {\n         var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;\n         var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n         var oldImpulse = this.m_motorImpulse;\n         var maxImpulse = step.dt * this.m_maxMotorForce;\n         this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);\n         impulse = this.m_motorImpulse - oldImpulse;\n         PX = impulse * this.m_axis.x;\n         PY = impulse * this.m_axis.y;\n         L1 = impulse * this.m_a1;\n         L2 = impulse * this.m_a2;\n         v1.x -= this.m_invMassA * PX;\n         v1.y -= this.m_invMassA * PY;\n         w1 -= this.m_invIA * L1;\n         v2.x += this.m_invMassB * PX;\n         v2.y += this.m_invMassB * PY;\n         w2 += this.m_invIB * L2;\n      }\n      var Cdot1X = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;\n      var Cdot1Y = w2 - w1;\n      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {\n         var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;\n         var f1 = this.m_impulse.Copy();\n         var df = this.m_K.Solve33(new b2Vec3(), (-Cdot1X), (-Cdot1Y), (-Cdot2));\n         this.m_impulse.Add(df);\n         if (this.m_limitState == b2Joint.e_atLowerLimit) {\n            this.m_impulse.z = b2Math.Max(this.m_impulse.z, 0.0);\n         }\n         else if (this.m_limitState == b2Joint.e_atUpperLimit) {\n            this.m_impulse.z = b2Math.Min(this.m_impulse.z, 0.0);\n         }\n         var bX = (-Cdot1X) - (this.m_impulse.z - f1.z) * this.m_K.col3.x;\n         var bY = (-Cdot1Y) - (this.m_impulse.z - f1.z) * this.m_K.col3.y;\n         var f2r = this.m_K.Solve22(new b2Vec2(), bX, bY);\n         f2r.x += f1.x;\n         f2r.y += f1.y;\n         this.m_impulse.x = f2r.x;\n         this.m_impulse.y = f2r.y;\n         df.x = this.m_impulse.x - f1.x;\n         df.y = this.m_impulse.y - f1.y;\n         df.z = this.m_impulse.z - f1.z;\n         PX = df.x * this.m_perp.x + df.z * this.m_axis.x;\n         PY = df.x * this.m_perp.y + df.z * this.m_axis.y;\n         L1 = df.x * this.m_s1 + df.y + df.z * this.m_a1;\n         L2 = df.x * this.m_s2 + df.y + df.z * this.m_a2;\n         v1.x -= this.m_invMassA * PX;\n         v1.y -= this.m_invMassA * PY;\n         w1 -= this.m_invIA * L1;\n         v2.x += this.m_invMassB * PX;\n         v2.y += this.m_invMassB * PY;\n         w2 += this.m_invIB * L2;\n      }\n      else {\n         var df2 = this.m_K.Solve22(new b2Vec2(), (-Cdot1X), (-Cdot1Y));\n         this.m_impulse.x += df2.x;\n         this.m_impulse.y += df2.y;\n         PX = df2.x * this.m_perp.x;\n         PY = df2.x * this.m_perp.y;\n         L1 = df2.x * this.m_s1 + df2.y;\n         L2 = df2.x * this.m_s2 + df2.y;\n         v1.x -= this.m_invMassA * PX;\n         v1.y -= this.m_invMassA * PY;\n         w1 -= this.m_invIA * L1;\n         v2.x += this.m_invMassB * PX;\n         v2.y += this.m_invMassB * PY;\n         w2 += this.m_invIB * L2;\n      }\n      bA.m_linearVelocity.SetV(v1);\n      bA.m_angularVelocity = w1;\n      bB.m_linearVelocity.SetV(v2);\n      bB.m_angularVelocity = w2;\n   }\n   b2PrismaticJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n      if (baumgarte === undefined) baumgarte = 0;\n      var limitC = 0;\n      var oldLimitImpulse = 0;\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var c1 = bA.m_sweep.c;\n      var a1 = bA.m_sweep.a;\n      var c2 = bB.m_sweep.c;\n      var a2 = bB.m_sweep.a;\n      var tMat;\n      var tX = 0;\n      var m1 = 0;\n      var m2 = 0;\n      var i1 = 0;\n      var i2 = 0;\n      var linearError = 0.0;\n      var angularError = 0.0;\n      var active = false;\n      var C2 = 0.0;\n      var R1 = b2Mat22.FromAngle(a1);\n      var R2 = b2Mat22.FromAngle(a2);\n      tMat = R1;\n      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;\n      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;\n      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n      r1X = tX;\n      tMat = R2;\n      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;\n      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;\n      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n      r2X = tX;\n      var dX = c2.x + r2X - c1.x - r1X;\n      var dY = c2.y + r2Y - c1.y - r1Y;\n      if (this.m_enableLimit) {\n         this.m_axis = b2Math.MulMV(R1, this.m_localXAxis1);\n         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;\n         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;\n         var translation = this.m_axis.x * dX + this.m_axis.y * dY;\n         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {\n            C2 = b2Math.Clamp(translation, (-b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);\n            linearError = b2Math.Abs(translation);\n            active = true;\n         }\n         else if (translation <= this.m_lowerTranslation) {\n            C2 = b2Math.Clamp(translation - this.m_lowerTranslation + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);\n            linearError = this.m_lowerTranslation - translation;\n            active = true;\n         }\n         else if (translation >= this.m_upperTranslation) {\n            C2 = b2Math.Clamp(translation - this.m_upperTranslation + b2Settings.b2_linearSlop, 0.0, b2Settings.b2_maxLinearCorrection);\n            linearError = translation - this.m_upperTranslation;\n            active = true;\n         }\n      }\n      this.m_perp = b2Math.MulMV(R1, this.m_localYAxis1);\n      this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;\n      this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;\n      var impulse = new b2Vec3();\n      var C1X = this.m_perp.x * dX + this.m_perp.y * dY;\n      var C1Y = a2 - a1 - this.m_refAngle;\n      linearError = b2Math.Max(linearError, b2Math.Abs(C1X));\n      angularError = b2Math.Abs(C1Y);\n      if (active) {\n         m1 = this.m_invMassA;\n         m2 = this.m_invMassB;\n         i1 = this.m_invIA;\n         i2 = this.m_invIB;\n         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;\n         this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;\n         this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;\n         this.m_K.col2.x = this.m_K.col1.y;\n         this.m_K.col2.y = i1 + i2;\n         this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;\n         this.m_K.col3.x = this.m_K.col1.z;\n         this.m_K.col3.y = this.m_K.col2.z;\n         this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;\n         this.m_K.Solve33(impulse, (-C1X), (-C1Y), (-C2));\n      }\n      else {\n         m1 = this.m_invMassA;\n         m2 = this.m_invMassB;\n         i1 = this.m_invIA;\n         i2 = this.m_invIB;\n         var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;\n         var k12 = i1 * this.m_s1 + i2 * this.m_s2;\n         var k22 = i1 + i2;\n         this.m_K.col1.Set(k11, k12, 0.0);\n         this.m_K.col2.Set(k12, k22, 0.0);\n         var impulse1 = this.m_K.Solve22(new b2Vec2(), (-C1X), (-C1Y));\n         impulse.x = impulse1.x;\n         impulse.y = impulse1.y;\n         impulse.z = 0.0;\n      }\n      var PX = impulse.x * this.m_perp.x + impulse.z * this.m_axis.x;\n      var PY = impulse.x * this.m_perp.y + impulse.z * this.m_axis.y;\n      var L1 = impulse.x * this.m_s1 + impulse.y + impulse.z * this.m_a1;\n      var L2 = impulse.x * this.m_s2 + impulse.y + impulse.z * this.m_a2;\n      c1.x -= this.m_invMassA * PX;\n      c1.y -= this.m_invMassA * PY;\n      a1 -= this.m_invIA * L1;\n      c2.x += this.m_invMassB * PX;\n      c2.y += this.m_invMassB * PY;\n      a2 += this.m_invIB * L2;\n      bA.m_sweep.a = a1;\n      bB.m_sweep.a = a2;\n      bA.SynchronizeTransform();\n      bB.SynchronizeTransform();\n      return linearError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;\n   }\n   Box2D.inherit(b2PrismaticJointDef, Box2D.Dynamics.Joints.b2JointDef);\n   b2PrismaticJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;\n   b2PrismaticJointDef.b2PrismaticJointDef = function () {\n      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);\n      this.localAnchorA = new b2Vec2();\n      this.localAnchorB = new b2Vec2();\n      this.localAxisA = new b2Vec2();\n   };\n   b2PrismaticJointDef.prototype.b2PrismaticJointDef = function () {\n      this.__super.b2JointDef.call(this);\n      this.type = b2Joint.e_prismaticJoint;\n      this.localAxisA.Set(1.0, 0.0);\n      this.referenceAngle = 0.0;\n      this.enableLimit = false;\n      this.lowerTranslation = 0.0;\n      this.upperTranslation = 0.0;\n      this.enableMotor = false;\n      this.maxMotorForce = 0.0;\n      this.motorSpeed = 0.0;\n   }\n   b2PrismaticJointDef.prototype.Initialize = function (bA, bB, anchor, axis) {\n      this.bodyA = bA;\n      this.bodyB = bB;\n      this.localAnchorA = this.bodyA.GetLocalPoint(anchor);\n      this.localAnchorB = this.bodyB.GetLocalPoint(anchor);\n      this.localAxisA = this.bodyA.GetLocalVector(axis);\n      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\n   }\n   Box2D.inherit(b2PulleyJoint, Box2D.Dynamics.Joints.b2Joint);\n   b2PulleyJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;\n   b2PulleyJoint.b2PulleyJoint = function () {\n      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);\n      this.m_groundAnchor1 = new b2Vec2();\n      this.m_groundAnchor2 = new b2Vec2();\n      this.m_localAnchor1 = new b2Vec2();\n      this.m_localAnchor2 = new b2Vec2();\n      this.m_u1 = new b2Vec2();\n      this.m_u2 = new b2Vec2();\n   };\n   b2PulleyJoint.prototype.GetAnchorA = function () {\n      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);\n   }\n   b2PulleyJoint.prototype.GetAnchorB = function () {\n      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);\n   }\n   b2PulleyJoint.prototype.GetReactionForce = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return new b2Vec2(inv_dt * this.m_impulse * this.m_u2.x, inv_dt * this.m_impulse * this.m_u2.y);\n   }\n   b2PulleyJoint.prototype.GetReactionTorque = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return 0.0;\n   }\n   b2PulleyJoint.prototype.GetGroundAnchorA = function () {\n      var a = this.m_ground.m_xf.position.Copy();\n      a.Add(this.m_groundAnchor1);\n      return a;\n   }\n   b2PulleyJoint.prototype.GetGroundAnchorB = function () {\n      var a = this.m_ground.m_xf.position.Copy();\n      a.Add(this.m_groundAnchor2);\n      return a;\n   }\n   b2PulleyJoint.prototype.GetLength1 = function () {\n      var p = this.m_bodyA.GetWorldPoint(this.m_localAnchor1);\n      var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;\n      var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;\n      var dX = p.x - sX;\n      var dY = p.y - sY;\n      return Math.sqrt(dX * dX + dY * dY);\n   }\n   b2PulleyJoint.prototype.GetLength2 = function () {\n      var p = this.m_bodyB.GetWorldPoint(this.m_localAnchor2);\n      var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;\n      var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;\n      var dX = p.x - sX;\n      var dY = p.y - sY;\n      return Math.sqrt(dX * dX + dY * dY);\n   }\n   b2PulleyJoint.prototype.GetRatio = function () {\n      return this.m_ratio;\n   }\n   b2PulleyJoint.prototype.b2PulleyJoint = function (def) {\n      this.__super.b2Joint.call(this, def);\n      var tMat;\n      var tX = 0;\n      var tY = 0;\n      this.m_ground = this.m_bodyA.m_world.m_groundBody;\n      this.m_groundAnchor1.x = def.groundAnchorA.x - this.m_ground.m_xf.position.x;\n      this.m_groundAnchor1.y = def.groundAnchorA.y - this.m_ground.m_xf.position.y;\n      this.m_groundAnchor2.x = def.groundAnchorB.x - this.m_ground.m_xf.position.x;\n      this.m_groundAnchor2.y = def.groundAnchorB.y - this.m_ground.m_xf.position.y;\n      this.m_localAnchor1.SetV(def.localAnchorA);\n      this.m_localAnchor2.SetV(def.localAnchorB);\n      this.m_ratio = def.ratio;\n      this.m_constant = def.lengthA + this.m_ratio * def.lengthB;\n      this.m_maxLength1 = b2Math.Min(def.maxLengthA, this.m_constant - this.m_ratio * b2PulleyJoint.b2_minPulleyLength);\n      this.m_maxLength2 = b2Math.Min(def.maxLengthB, (this.m_constant - b2PulleyJoint.b2_minPulleyLength) / this.m_ratio);\n      this.m_impulse = 0.0;\n      this.m_limitImpulse1 = 0.0;\n      this.m_limitImpulse2 = 0.0;\n   }\n   b2PulleyJoint.prototype.InitVelocityConstraints = function (step) {\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var tMat;\n      tMat = bA.m_xf.R;\n      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n      r1X = tX;\n      tMat = bB.m_xf.R;\n      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n      r2X = tX;\n      var p1X = bA.m_sweep.c.x + r1X;\n      var p1Y = bA.m_sweep.c.y + r1Y;\n      var p2X = bB.m_sweep.c.x + r2X;\n      var p2Y = bB.m_sweep.c.y + r2Y;\n      var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;\n      var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;\n      var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;\n      var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;\n      this.m_u1.Set(p1X - s1X, p1Y - s1Y);\n      this.m_u2.Set(p2X - s2X, p2Y - s2Y);\n      var length1 = this.m_u1.Length();\n      var length2 = this.m_u2.Length();\n      if (length1 > b2Settings.b2_linearSlop) {\n         this.m_u1.Multiply(1.0 / length1);\n      }\n      else {\n         this.m_u1.SetZero();\n      }\n      if (length2 > b2Settings.b2_linearSlop) {\n         this.m_u2.Multiply(1.0 / length2);\n      }\n      else {\n         this.m_u2.SetZero();\n      }\n      var C = this.m_constant - length1 - this.m_ratio * length2;\n      if (C > 0.0) {\n         this.m_state = b2Joint.e_inactiveLimit;\n         this.m_impulse = 0.0;\n      }\n      else {\n         this.m_state = b2Joint.e_atUpperLimit;\n      }\n      if (length1 < this.m_maxLength1) {\n         this.m_limitState1 = b2Joint.e_inactiveLimit;\n         this.m_limitImpulse1 = 0.0;\n      }\n      else {\n         this.m_limitState1 = b2Joint.e_atUpperLimit;\n      }\n      if (length2 < this.m_maxLength2) {\n         this.m_limitState2 = b2Joint.e_inactiveLimit;\n         this.m_limitImpulse2 = 0.0;\n      }\n      else {\n         this.m_limitState2 = b2Joint.e_atUpperLimit;\n      }\n      var cr1u1 = r1X * this.m_u1.y - r1Y * this.m_u1.x;\n      var cr2u2 = r2X * this.m_u2.y - r2Y * this.m_u2.x;\n      this.m_limitMass1 = bA.m_invMass + bA.m_invI * cr1u1 * cr1u1;\n      this.m_limitMass2 = bB.m_invMass + bB.m_invI * cr2u2 * cr2u2;\n      this.m_pulleyMass = this.m_limitMass1 + this.m_ratio * this.m_ratio * this.m_limitMass2;\n      this.m_limitMass1 = 1.0 / this.m_limitMass1;\n      this.m_limitMass2 = 1.0 / this.m_limitMass2;\n      this.m_pulleyMass = 1.0 / this.m_pulleyMass;\n      if (step.warmStarting) {\n         this.m_impulse *= step.dtRatio;\n         this.m_limitImpulse1 *= step.dtRatio;\n         this.m_limitImpulse2 *= step.dtRatio;\n         var P1X = ((-this.m_impulse) - this.m_limitImpulse1) * this.m_u1.x;\n         var P1Y = ((-this.m_impulse) - this.m_limitImpulse1) * this.m_u1.y;\n         var P2X = ((-this.m_ratio * this.m_impulse) - this.m_limitImpulse2) * this.m_u2.x;\n         var P2Y = ((-this.m_ratio * this.m_impulse) - this.m_limitImpulse2) * this.m_u2.y;\n         bA.m_linearVelocity.x += bA.m_invMass * P1X;\n         bA.m_linearVelocity.y += bA.m_invMass * P1Y;\n         bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);\n         bB.m_linearVelocity.x += bB.m_invMass * P2X;\n         bB.m_linearVelocity.y += bB.m_invMass * P2Y;\n         bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);\n      }\n      else {\n         this.m_impulse = 0.0;\n         this.m_limitImpulse1 = 0.0;\n         this.m_limitImpulse2 = 0.0;\n      }\n   }\n   b2PulleyJoint.prototype.SolveVelocityConstraints = function (step) {\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var tMat;\n      tMat = bA.m_xf.R;\n      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n      r1X = tX;\n      tMat = bB.m_xf.R;\n      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n      r2X = tX;\n      var v1X = 0;\n      var v1Y = 0;\n      var v2X = 0;\n      var v2Y = 0;\n      var P1X = 0;\n      var P1Y = 0;\n      var P2X = 0;\n      var P2Y = 0;\n      var Cdot = 0;\n      var impulse = 0;\n      var oldImpulse = 0;\n      if (this.m_state == b2Joint.e_atUpperLimit) {\n         v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));\n         v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);\n         v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));\n         v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);\n         Cdot = (-(this.m_u1.x * v1X + this.m_u1.y * v1Y)) - this.m_ratio * (this.m_u2.x * v2X + this.m_u2.y * v2Y);\n         impulse = this.m_pulleyMass * ((-Cdot));\n         oldImpulse = this.m_impulse;\n         this.m_impulse = b2Math.Max(0.0, this.m_impulse + impulse);\n         impulse = this.m_impulse - oldImpulse;\n         P1X = (-impulse * this.m_u1.x);\n         P1Y = (-impulse * this.m_u1.y);\n         P2X = (-this.m_ratio * impulse * this.m_u2.x);\n         P2Y = (-this.m_ratio * impulse * this.m_u2.y);\n         bA.m_linearVelocity.x += bA.m_invMass * P1X;\n         bA.m_linearVelocity.y += bA.m_invMass * P1Y;\n         bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);\n         bB.m_linearVelocity.x += bB.m_invMass * P2X;\n         bB.m_linearVelocity.y += bB.m_invMass * P2Y;\n         bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);\n      }\n      if (this.m_limitState1 == b2Joint.e_atUpperLimit) {\n         v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));\n         v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);\n         Cdot = (-(this.m_u1.x * v1X + this.m_u1.y * v1Y));\n         impulse = (-this.m_limitMass1 * Cdot);\n         oldImpulse = this.m_limitImpulse1;\n         this.m_limitImpulse1 = b2Math.Max(0.0, this.m_limitImpulse1 + impulse);\n         impulse = this.m_limitImpulse1 - oldImpulse;\n         P1X = (-impulse * this.m_u1.x);\n         P1Y = (-impulse * this.m_u1.y);\n         bA.m_linearVelocity.x += bA.m_invMass * P1X;\n         bA.m_linearVelocity.y += bA.m_invMass * P1Y;\n         bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);\n      }\n      if (this.m_limitState2 == b2Joint.e_atUpperLimit) {\n         v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));\n         v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);\n         Cdot = (-(this.m_u2.x * v2X + this.m_u2.y * v2Y));\n         impulse = (-this.m_limitMass2 * Cdot);\n         oldImpulse = this.m_limitImpulse2;\n         this.m_limitImpulse2 = b2Math.Max(0.0, this.m_limitImpulse2 + impulse);\n         impulse = this.m_limitImpulse2 - oldImpulse;\n         P2X = (-impulse * this.m_u2.x);\n         P2Y = (-impulse * this.m_u2.y);\n         bB.m_linearVelocity.x += bB.m_invMass * P2X;\n         bB.m_linearVelocity.y += bB.m_invMass * P2Y;\n         bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);\n      }\n   }\n   b2PulleyJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n      if (baumgarte === undefined) baumgarte = 0;\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var tMat;\n      var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;\n      var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;\n      var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;\n      var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;\n      var r1X = 0;\n      var r1Y = 0;\n      var r2X = 0;\n      var r2Y = 0;\n      var p1X = 0;\n      var p1Y = 0;\n      var p2X = 0;\n      var p2Y = 0;\n      var length1 = 0;\n      var length2 = 0;\n      var C = 0;\n      var impulse = 0;\n      var oldImpulse = 0;\n      var oldLimitPositionImpulse = 0;\n      var tX = 0;\n      var linearError = 0.0;\n      if (this.m_state == b2Joint.e_atUpperLimit) {\n         tMat = bA.m_xf.R;\n         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n         r1X = tX;\n         tMat = bB.m_xf.R;\n         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n         r2X = tX;\n         p1X = bA.m_sweep.c.x + r1X;\n         p1Y = bA.m_sweep.c.y + r1Y;\n         p2X = bB.m_sweep.c.x + r2X;\n         p2Y = bB.m_sweep.c.y + r2Y;\n         this.m_u1.Set(p1X - s1X, p1Y - s1Y);\n         this.m_u2.Set(p2X - s2X, p2Y - s2Y);\n         length1 = this.m_u1.Length();\n         length2 = this.m_u2.Length();\n         if (length1 > b2Settings.b2_linearSlop) {\n            this.m_u1.Multiply(1.0 / length1);\n         }\n         else {\n            this.m_u1.SetZero();\n         }\n         if (length2 > b2Settings.b2_linearSlop) {\n            this.m_u2.Multiply(1.0 / length2);\n         }\n         else {\n            this.m_u2.SetZero();\n         }\n         C = this.m_constant - length1 - this.m_ratio * length2;\n         linearError = b2Math.Max(linearError, (-C));\n         C = b2Math.Clamp(C + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);\n         impulse = (-this.m_pulleyMass * C);\n         p1X = (-impulse * this.m_u1.x);\n         p1Y = (-impulse * this.m_u1.y);\n         p2X = (-this.m_ratio * impulse * this.m_u2.x);\n         p2Y = (-this.m_ratio * impulse * this.m_u2.y);\n         bA.m_sweep.c.x += bA.m_invMass * p1X;\n         bA.m_sweep.c.y += bA.m_invMass * p1Y;\n         bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);\n         bB.m_sweep.c.x += bB.m_invMass * p2X;\n         bB.m_sweep.c.y += bB.m_invMass * p2Y;\n         bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);\n         bA.SynchronizeTransform();\n         bB.SynchronizeTransform();\n      }\n      if (this.m_limitState1 == b2Joint.e_atUpperLimit) {\n         tMat = bA.m_xf.R;\n         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n         r1X = tX;\n         p1X = bA.m_sweep.c.x + r1X;\n         p1Y = bA.m_sweep.c.y + r1Y;\n         this.m_u1.Set(p1X - s1X, p1Y - s1Y);\n         length1 = this.m_u1.Length();\n         if (length1 > b2Settings.b2_linearSlop) {\n            this.m_u1.x *= 1.0 / length1;\n            this.m_u1.y *= 1.0 / length1;\n         }\n         else {\n            this.m_u1.SetZero();\n         }\n         C = this.m_maxLength1 - length1;\n         linearError = b2Math.Max(linearError, (-C));\n         C = b2Math.Clamp(C + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);\n         impulse = (-this.m_limitMass1 * C);\n         p1X = (-impulse * this.m_u1.x);\n         p1Y = (-impulse * this.m_u1.y);\n         bA.m_sweep.c.x += bA.m_invMass * p1X;\n         bA.m_sweep.c.y += bA.m_invMass * p1Y;\n         bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);\n         bA.SynchronizeTransform();\n      }\n      if (this.m_limitState2 == b2Joint.e_atUpperLimit) {\n         tMat = bB.m_xf.R;\n         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n         r2X = tX;\n         p2X = bB.m_sweep.c.x + r2X;\n         p2Y = bB.m_sweep.c.y + r2Y;\n         this.m_u2.Set(p2X - s2X, p2Y - s2Y);\n         length2 = this.m_u2.Length();\n         if (length2 > b2Settings.b2_linearSlop) {\n            this.m_u2.x *= 1.0 / length2;\n            this.m_u2.y *= 1.0 / length2;\n         }\n         else {\n            this.m_u2.SetZero();\n         }\n         C = this.m_maxLength2 - length2;\n         linearError = b2Math.Max(linearError, (-C));\n         C = b2Math.Clamp(C + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);\n         impulse = (-this.m_limitMass2 * C);\n         p2X = (-impulse * this.m_u2.x);\n         p2Y = (-impulse * this.m_u2.y);\n         bB.m_sweep.c.x += bB.m_invMass * p2X;\n         bB.m_sweep.c.y += bB.m_invMass * p2Y;\n         bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);\n         bB.SynchronizeTransform();\n      }\n      return linearError < b2Settings.b2_linearSlop;\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength = 2.0;\n   });\n   Box2D.inherit(b2PulleyJointDef, Box2D.Dynamics.Joints.b2JointDef);\n   b2PulleyJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;\n   b2PulleyJointDef.b2PulleyJointDef = function () {\n      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);\n      this.groundAnchorA = new b2Vec2();\n      this.groundAnchorB = new b2Vec2();\n      this.localAnchorA = new b2Vec2();\n      this.localAnchorB = new b2Vec2();\n   };\n   b2PulleyJointDef.prototype.b2PulleyJointDef = function () {\n      this.__super.b2JointDef.call(this);\n      this.type = b2Joint.e_pulleyJoint;\n      this.groundAnchorA.Set((-1.0), 1.0);\n      this.groundAnchorB.Set(1.0, 1.0);\n      this.localAnchorA.Set((-1.0), 0.0);\n      this.localAnchorB.Set(1.0, 0.0);\n      this.lengthA = 0.0;\n      this.maxLengthA = 0.0;\n      this.lengthB = 0.0;\n      this.maxLengthB = 0.0;\n      this.ratio = 1.0;\n      this.collideConnected = true;\n   }\n   b2PulleyJointDef.prototype.Initialize = function (bA, bB, gaA, gaB, anchorA, anchorB, r) {\n      if (r === undefined) r = 0;\n      this.bodyA = bA;\n      this.bodyB = bB;\n      this.groundAnchorA.SetV(gaA);\n      this.groundAnchorB.SetV(gaB);\n      this.localAnchorA = this.bodyA.GetLocalPoint(anchorA);\n      this.localAnchorB = this.bodyB.GetLocalPoint(anchorB);\n      var d1X = anchorA.x - gaA.x;\n      var d1Y = anchorA.y - gaA.y;\n      this.lengthA = Math.sqrt(d1X * d1X + d1Y * d1Y);\n      var d2X = anchorB.x - gaB.x;\n      var d2Y = anchorB.y - gaB.y;\n      this.lengthB = Math.sqrt(d2X * d2X + d2Y * d2Y);\n      this.ratio = r;\n      var C = this.lengthA + this.ratio * this.lengthB;\n      this.maxLengthA = C - this.ratio * b2PulleyJoint.b2_minPulleyLength;\n      this.maxLengthB = (C - b2PulleyJoint.b2_minPulleyLength) / this.ratio;\n   }\n   Box2D.inherit(b2RevoluteJoint, Box2D.Dynamics.Joints.b2Joint);\n   b2RevoluteJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;\n   b2RevoluteJoint.b2RevoluteJoint = function () {\n      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);\n      this.K = new b2Mat22();\n      this.K1 = new b2Mat22();\n      this.K2 = new b2Mat22();\n      this.K3 = new b2Mat22();\n      this.impulse3 = new b2Vec3();\n      this.impulse2 = new b2Vec2();\n      this.reduced = new b2Vec2();\n      this.m_localAnchor1 = new b2Vec2();\n      this.m_localAnchor2 = new b2Vec2();\n      this.m_impulse = new b2Vec3();\n      this.m_mass = new b2Mat33();\n   };\n   b2RevoluteJoint.prototype.GetAnchorA = function () {\n      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);\n   }\n   b2RevoluteJoint.prototype.GetAnchorB = function () {\n      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);\n   }\n   b2RevoluteJoint.prototype.GetReactionForce = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);\n   }\n   b2RevoluteJoint.prototype.GetReactionTorque = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return inv_dt * this.m_impulse.z;\n   }\n   b2RevoluteJoint.prototype.GetJointAngle = function () {\n      return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;\n   }\n   b2RevoluteJoint.prototype.GetJointSpeed = function () {\n      return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;\n   }\n   b2RevoluteJoint.prototype.IsLimitEnabled = function () {\n      return this.m_enableLimit;\n   }\n   b2RevoluteJoint.prototype.EnableLimit = function (flag) {\n      this.m_enableLimit = flag;\n   }\n   b2RevoluteJoint.prototype.GetLowerLimit = function () {\n      return this.m_lowerAngle;\n   }\n   b2RevoluteJoint.prototype.GetUpperLimit = function () {\n      return this.m_upperAngle;\n   }\n   b2RevoluteJoint.prototype.SetLimits = function (lower, upper) {\n      if (lower === undefined) lower = 0;\n      if (upper === undefined) upper = 0;\n      this.m_lowerAngle = lower;\n      this.m_upperAngle = upper;\n   }\n   b2RevoluteJoint.prototype.IsMotorEnabled = function () {\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      return this.m_enableMotor;\n   }\n   b2RevoluteJoint.prototype.EnableMotor = function (flag) {\n      this.m_enableMotor = flag;\n   }\n   b2RevoluteJoint.prototype.SetMotorSpeed = function (speed) {\n      if (speed === undefined) speed = 0;\n      this.m_bodyA.SetAwake(true);\n      this.m_bodyB.SetAwake(true);\n      this.m_motorSpeed = speed;\n   }\n   b2RevoluteJoint.prototype.GetMotorSpeed = function () {\n      return this.m_motorSpeed;\n   }\n   b2RevoluteJoint.prototype.SetMaxMotorTorque = function (torque) {\n      if (torque === undefined) torque = 0;\n      this.m_maxMotorTorque = torque;\n   }\n   b2RevoluteJoint.prototype.GetMotorTorque = function () {\n      return this.m_maxMotorTorque;\n   }\n   b2RevoluteJoint.prototype.b2RevoluteJoint = function (def) {\n      this.__super.b2Joint.call(this, def);\n      this.m_localAnchor1.SetV(def.localAnchorA);\n      this.m_localAnchor2.SetV(def.localAnchorB);\n      this.m_referenceAngle = def.referenceAngle;\n      this.m_impulse.SetZero();\n      this.m_motorImpulse = 0.0;\n      this.m_lowerAngle = def.lowerAngle;\n      this.m_upperAngle = def.upperAngle;\n      this.m_maxMotorTorque = def.maxMotorTorque;\n      this.m_motorSpeed = def.motorSpeed;\n      this.m_enableLimit = def.enableLimit;\n      this.m_enableMotor = def.enableMotor;\n      this.m_limitState = b2Joint.e_inactiveLimit;\n   }\n   b2RevoluteJoint.prototype.InitVelocityConstraints = function (step) {\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var tMat;\n      var tX = 0;\n      if (this.m_enableMotor || this.m_enableLimit) {}\n      tMat = bA.m_xf.R;\n      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n      r1X = tX;\n      tMat = bB.m_xf.R;\n      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n      r2X = tX;\n      var m1 = bA.m_invMass;\n      var m2 = bB.m_invMass;\n      var i1 = bA.m_invI;\n      var i2 = bB.m_invI;\n      this.m_mass.col1.x = m1 + m2 + r1Y * r1Y * i1 + r2Y * r2Y * i2;\n      this.m_mass.col2.x = (-r1Y * r1X * i1) - r2Y * r2X * i2;\n      this.m_mass.col3.x = (-r1Y * i1) - r2Y * i2;\n      this.m_mass.col1.y = this.m_mass.col2.x;\n      this.m_mass.col2.y = m1 + m2 + r1X * r1X * i1 + r2X * r2X * i2;\n      this.m_mass.col3.y = r1X * i1 + r2X * i2;\n      this.m_mass.col1.z = this.m_mass.col3.x;\n      this.m_mass.col2.z = this.m_mass.col3.y;\n      this.m_mass.col3.z = i1 + i2;\n      this.m_motorMass = 1.0 / (i1 + i2);\n      if (this.m_enableMotor == false) {\n         this.m_motorImpulse = 0.0;\n      }\n      if (this.m_enableLimit) {\n         var jointAngle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n         if (b2Math.Abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * b2Settings.b2_angularSlop) {\n            this.m_limitState = b2Joint.e_equalLimits;\n         }\n         else if (jointAngle <= this.m_lowerAngle) {\n            if (this.m_limitState != b2Joint.e_atLowerLimit) {\n               this.m_impulse.z = 0.0;\n            }\n            this.m_limitState = b2Joint.e_atLowerLimit;\n         }\n         else if (jointAngle >= this.m_upperAngle) {\n            if (this.m_limitState != b2Joint.e_atUpperLimit) {\n               this.m_impulse.z = 0.0;\n            }\n            this.m_limitState = b2Joint.e_atUpperLimit;\n         }\n         else {\n            this.m_limitState = b2Joint.e_inactiveLimit;\n            this.m_impulse.z = 0.0;\n         }\n      }\n      else {\n         this.m_limitState = b2Joint.e_inactiveLimit;\n      }\n      if (step.warmStarting) {\n         this.m_impulse.x *= step.dtRatio;\n         this.m_impulse.y *= step.dtRatio;\n         this.m_motorImpulse *= step.dtRatio;\n         var PX = this.m_impulse.x;\n         var PY = this.m_impulse.y;\n         bA.m_linearVelocity.x -= m1 * PX;\n         bA.m_linearVelocity.y -= m1 * PY;\n         bA.m_angularVelocity -= i1 * ((r1X * PY - r1Y * PX) + this.m_motorImpulse + this.m_impulse.z);\n         bB.m_linearVelocity.x += m2 * PX;\n         bB.m_linearVelocity.y += m2 * PY;\n         bB.m_angularVelocity += i2 * ((r2X * PY - r2Y * PX) + this.m_motorImpulse + this.m_impulse.z);\n      }\n      else {\n         this.m_impulse.SetZero();\n         this.m_motorImpulse = 0.0;\n      }\n   }\n   b2RevoluteJoint.prototype.SolveVelocityConstraints = function (step) {\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var tMat;\n      var tX = 0;\n      var newImpulse = 0;\n      var r1X = 0;\n      var r1Y = 0;\n      var r2X = 0;\n      var r2Y = 0;\n      var v1 = bA.m_linearVelocity;\n      var w1 = bA.m_angularVelocity;\n      var v2 = bB.m_linearVelocity;\n      var w2 = bB.m_angularVelocity;\n      var m1 = bA.m_invMass;\n      var m2 = bB.m_invMass;\n      var i1 = bA.m_invI;\n      var i2 = bB.m_invI;\n      if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {\n         var Cdot = w2 - w1 - this.m_motorSpeed;\n         var impulse = this.m_motorMass * ((-Cdot));\n         var oldImpulse = this.m_motorImpulse;\n         var maxImpulse = step.dt * this.m_maxMotorTorque;\n         this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);\n         impulse = this.m_motorImpulse - oldImpulse;\n         w1 -= i1 * impulse;\n         w2 += i2 * impulse;\n      }\n      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {\n         tMat = bA.m_xf.R;\n         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n         r1X = tX;\n         tMat = bB.m_xf.R;\n         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n         r2X = tX;\n         var Cdot1X = v2.x + ((-w2 * r2Y)) - v1.x - ((-w1 * r1Y));\n         var Cdot1Y = v2.y + (w2 * r2X) - v1.y - (w1 * r1X);\n         var Cdot2 = w2 - w1;\n         this.m_mass.Solve33(this.impulse3, (-Cdot1X), (-Cdot1Y), (-Cdot2));\n         if (this.m_limitState == b2Joint.e_equalLimits) {\n            this.m_impulse.Add(this.impulse3);\n         }\n         else if (this.m_limitState == b2Joint.e_atLowerLimit) {\n            newImpulse = this.m_impulse.z + this.impulse3.z;\n            if (newImpulse < 0.0) {\n               this.m_mass.Solve22(this.reduced, (-Cdot1X), (-Cdot1Y));\n               this.impulse3.x = this.reduced.x;\n               this.impulse3.y = this.reduced.y;\n               this.impulse3.z = (-this.m_impulse.z);\n               this.m_impulse.x += this.reduced.x;\n               this.m_impulse.y += this.reduced.y;\n               this.m_impulse.z = 0.0;\n            }\n         }\n         else if (this.m_limitState == b2Joint.e_atUpperLimit) {\n            newImpulse = this.m_impulse.z + this.impulse3.z;\n            if (newImpulse > 0.0) {\n               this.m_mass.Solve22(this.reduced, (-Cdot1X), (-Cdot1Y));\n               this.impulse3.x = this.reduced.x;\n               this.impulse3.y = this.reduced.y;\n               this.impulse3.z = (-this.m_impulse.z);\n               this.m_impulse.x += this.reduced.x;\n               this.m_impulse.y += this.reduced.y;\n               this.m_impulse.z = 0.0;\n            }\n         }\n         v1.x -= m1 * this.impulse3.x;\n         v1.y -= m1 * this.impulse3.y;\n         w1 -= i1 * (r1X * this.impulse3.y - r1Y * this.impulse3.x + this.impulse3.z);\n         v2.x += m2 * this.impulse3.x;\n         v2.y += m2 * this.impulse3.y;\n         w2 += i2 * (r2X * this.impulse3.y - r2Y * this.impulse3.x + this.impulse3.z);\n      }\n      else {\n         tMat = bA.m_xf.R;\n         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n         r1X = tX;\n         tMat = bB.m_xf.R;\n         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n         r2X = tX;\n         var CdotX = v2.x + ((-w2 * r2Y)) - v1.x - ((-w1 * r1Y));\n         var CdotY = v2.y + (w2 * r2X) - v1.y - (w1 * r1X);\n         this.m_mass.Solve22(this.impulse2, (-CdotX), (-CdotY));\n         this.m_impulse.x += this.impulse2.x;\n         this.m_impulse.y += this.impulse2.y;\n         v1.x -= m1 * this.impulse2.x;\n         v1.y -= m1 * this.impulse2.y;\n         w1 -= i1 * (r1X * this.impulse2.y - r1Y * this.impulse2.x);\n         v2.x += m2 * this.impulse2.x;\n         v2.y += m2 * this.impulse2.y;\n         w2 += i2 * (r2X * this.impulse2.y - r2Y * this.impulse2.x);\n      }\n      bA.m_linearVelocity.SetV(v1);\n      bA.m_angularVelocity = w1;\n      bB.m_linearVelocity.SetV(v2);\n      bB.m_angularVelocity = w2;\n   }\n   b2RevoluteJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n      if (baumgarte === undefined) baumgarte = 0;\n      var oldLimitImpulse = 0;\n      var C = 0;\n      var tMat;\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var angularError = 0.0;\n      var positionError = 0.0;\n      var tX = 0;\n      var impulseX = 0;\n      var impulseY = 0;\n      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {\n         var angle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n         var limitImpulse = 0.0;\n         if (this.m_limitState == b2Joint.e_equalLimits) {\n            C = b2Math.Clamp(angle - this.m_lowerAngle, (-b2Settings.b2_maxAngularCorrection), b2Settings.b2_maxAngularCorrection);\n            limitImpulse = (-this.m_motorMass * C);\n            angularError = b2Math.Abs(C);\n         }\n         else if (this.m_limitState == b2Joint.e_atLowerLimit) {\n            C = angle - this.m_lowerAngle;\n            angularError = (-C);\n            C = b2Math.Clamp(C + b2Settings.b2_angularSlop, (-b2Settings.b2_maxAngularCorrection), 0.0);\n            limitImpulse = (-this.m_motorMass * C);\n         }\n         else if (this.m_limitState == b2Joint.e_atUpperLimit) {\n            C = angle - this.m_upperAngle;\n            angularError = C;\n            C = b2Math.Clamp(C - b2Settings.b2_angularSlop, 0.0, b2Settings.b2_maxAngularCorrection);\n            limitImpulse = (-this.m_motorMass * C);\n         }\n         bA.m_sweep.a -= bA.m_invI * limitImpulse;\n         bB.m_sweep.a += bB.m_invI * limitImpulse;\n         bA.SynchronizeTransform();\n         bB.SynchronizeTransform();\n      } {\n         tMat = bA.m_xf.R;\n         var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;\n         var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;\n         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);\n         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);\n         r1X = tX;\n         tMat = bB.m_xf.R;\n         var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;\n         var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;\n         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);\n         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);\n         r2X = tX;\n         var CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;\n         var CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;\n         var CLengthSquared = CX * CX + CY * CY;\n         var CLength = Math.sqrt(CLengthSquared);\n         positionError = CLength;\n         var invMass1 = bA.m_invMass;\n         var invMass2 = bB.m_invMass;\n         var invI1 = bA.m_invI;\n         var invI2 = bB.m_invI;\n         var k_allowedStretch = 10.0 * b2Settings.b2_linearSlop;\n         if (CLengthSquared > k_allowedStretch * k_allowedStretch) {\n            var uX = CX / CLength;\n            var uY = CY / CLength;\n            var k = invMass1 + invMass2;\n            var m = 1.0 / k;\n            impulseX = m * ((-CX));\n            impulseY = m * ((-CY));\n            var k_beta = 0.5;\n            bA.m_sweep.c.x -= k_beta * invMass1 * impulseX;\n            bA.m_sweep.c.y -= k_beta * invMass1 * impulseY;\n            bB.m_sweep.c.x += k_beta * invMass2 * impulseX;\n            bB.m_sweep.c.y += k_beta * invMass2 * impulseY;\n            CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;\n            CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;\n         }\n         this.K1.col1.x = invMass1 + invMass2;\n         this.K1.col2.x = 0.0;\n         this.K1.col1.y = 0.0;\n         this.K1.col2.y = invMass1 + invMass2;\n         this.K2.col1.x = invI1 * r1Y * r1Y;\n         this.K2.col2.x = (-invI1 * r1X * r1Y);\n         this.K2.col1.y = (-invI1 * r1X * r1Y);\n         this.K2.col2.y = invI1 * r1X * r1X;\n         this.K3.col1.x = invI2 * r2Y * r2Y;\n         this.K3.col2.x = (-invI2 * r2X * r2Y);\n         this.K3.col1.y = (-invI2 * r2X * r2Y);\n         this.K3.col2.y = invI2 * r2X * r2X;\n         this.K.SetM(this.K1);\n         this.K.AddM(this.K2);\n         this.K.AddM(this.K3);\n         this.K.Solve(b2RevoluteJoint.tImpulse, (-CX), (-CY));\n         impulseX = b2RevoluteJoint.tImpulse.x;\n         impulseY = b2RevoluteJoint.tImpulse.y;\n         bA.m_sweep.c.x -= bA.m_invMass * impulseX;\n         bA.m_sweep.c.y -= bA.m_invMass * impulseY;\n         bA.m_sweep.a -= bA.m_invI * (r1X * impulseY - r1Y * impulseX);\n         bB.m_sweep.c.x += bB.m_invMass * impulseX;\n         bB.m_sweep.c.y += bB.m_invMass * impulseY;\n         bB.m_sweep.a += bB.m_invI * (r2X * impulseY - r2Y * impulseX);\n         bA.SynchronizeTransform();\n         bB.SynchronizeTransform();\n      }\n      return positionError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;\n   }\n   Box2D.postDefs.push(function () {\n      Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse = new b2Vec2();\n   });\n   Box2D.inherit(b2RevoluteJointDef, Box2D.Dynamics.Joints.b2JointDef);\n   b2RevoluteJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;\n   b2RevoluteJointDef.b2RevoluteJointDef = function () {\n      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);\n      this.localAnchorA = new b2Vec2();\n      this.localAnchorB = new b2Vec2();\n   };\n   b2RevoluteJointDef.prototype.b2RevoluteJointDef = function () {\n      this.__super.b2JointDef.call(this);\n      this.type = b2Joint.e_revoluteJoint;\n      this.localAnchorA.Set(0.0, 0.0);\n      this.localAnchorB.Set(0.0, 0.0);\n      this.referenceAngle = 0.0;\n      this.lowerAngle = 0.0;\n      this.upperAngle = 0.0;\n      this.maxMotorTorque = 0.0;\n      this.motorSpeed = 0.0;\n      this.enableLimit = false;\n      this.enableMotor = false;\n   }\n   b2RevoluteJointDef.prototype.Initialize = function (bA, bB, anchor) {\n      this.bodyA = bA;\n      this.bodyB = bB;\n      this.localAnchorA = this.bodyA.GetLocalPoint(anchor);\n      this.localAnchorB = this.bodyB.GetLocalPoint(anchor);\n      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\n   }\n   Box2D.inherit(b2WeldJoint, Box2D.Dynamics.Joints.b2Joint);\n   b2WeldJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;\n   b2WeldJoint.b2WeldJoint = function () {\n      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);\n      this.m_localAnchorA = new b2Vec2();\n      this.m_localAnchorB = new b2Vec2();\n      this.m_impulse = new b2Vec3();\n      this.m_mass = new b2Mat33();\n   };\n   b2WeldJoint.prototype.GetAnchorA = function () {\n      return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);\n   }\n   b2WeldJoint.prototype.GetAnchorB = function () {\n      return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);\n   }\n   b2WeldJoint.prototype.GetReactionForce = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);\n   }\n   b2WeldJoint.prototype.GetReactionTorque = function (inv_dt) {\n      if (inv_dt === undefined) inv_dt = 0;\n      return inv_dt * this.m_impulse.z;\n   }\n   b2WeldJoint.prototype.b2WeldJoint = function (def) {\n      this.__super.b2Joint.call(this, def);\n      this.m_localAnchorA.SetV(def.localAnchorA);\n      this.m_localAnchorB.SetV(def.localAnchorB);\n      this.m_referenceAngle = def.referenceAngle;\n      this.m_impulse.SetZero();\n      this.m_mass = new b2Mat33();\n   }\n   b2WeldJoint.prototype.InitVelocityConstraints = function (step) {\n      var tMat;\n      var tX = 0;\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      tMat = bA.m_xf.R;\n      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;\n      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);\n      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);\n      rAX = tX;\n      tMat = bB.m_xf.R;\n      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;\n      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);\n      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);\n      rBX = tX;\n      var mA = bA.m_invMass;\n      var mB = bB.m_invMass;\n      var iA = bA.m_invI;\n      var iB = bB.m_invI;\n      this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;\n      this.m_mass.col2.x = (-rAY * rAX * iA) - rBY * rBX * iB;\n      this.m_mass.col3.x = (-rAY * iA) - rBY * iB;\n      this.m_mass.col1.y = this.m_mass.col2.x;\n      this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;\n      this.m_mass.col3.y = rAX * iA + rBX * iB;\n      this.m_mass.col1.z = this.m_mass.col3.x;\n      this.m_mass.col2.z = this.m_mass.col3.y;\n      this.m_mass.col3.z = iA + iB;\n      if (step.warmStarting) {\n         this.m_impulse.x *= step.dtRatio;\n         this.m_impulse.y *= step.dtRatio;\n         this.m_impulse.z *= step.dtRatio;\n         bA.m_linearVelocity.x -= mA * this.m_impulse.x;\n         bA.m_linearVelocity.y -= mA * this.m_impulse.y;\n         bA.m_angularVelocity -= iA * (rAX * this.m_impulse.y - rAY * this.m_impulse.x + this.m_impulse.z);\n         bB.m_linearVelocity.x += mB * this.m_impulse.x;\n         bB.m_linearVelocity.y += mB * this.m_impulse.y;\n         bB.m_angularVelocity += iB * (rBX * this.m_impulse.y - rBY * this.m_impulse.x + this.m_impulse.z);\n      }\n      else {\n         this.m_impulse.SetZero();\n      }\n   }\n   b2WeldJoint.prototype.SolveVelocityConstraints = function (step) {\n      var tMat;\n      var tX = 0;\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      var vA = bA.m_linearVelocity;\n      var wA = bA.m_angularVelocity;\n      var vB = bB.m_linearVelocity;\n      var wB = bB.m_angularVelocity;\n      var mA = bA.m_invMass;\n      var mB = bB.m_invMass;\n      var iA = bA.m_invI;\n      var iB = bB.m_invI;\n      tMat = bA.m_xf.R;\n      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;\n      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);\n      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);\n      rAX = tX;\n      tMat = bB.m_xf.R;\n      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;\n      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);\n      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);\n      rBX = tX;\n      var Cdot1X = vB.x - wB * rBY - vA.x + wA * rAY;\n      var Cdot1Y = vB.y + wB * rBX - vA.y - wA * rAX;\n      var Cdot2 = wB - wA;\n      var impulse = new b2Vec3();\n      this.m_mass.Solve33(impulse, (-Cdot1X), (-Cdot1Y), (-Cdot2));\n      this.m_impulse.Add(impulse);\n      vA.x -= mA * impulse.x;\n      vA.y -= mA * impulse.y;\n      wA -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);\n      vB.x += mB * impulse.x;\n      vB.y += mB * impulse.y;\n      wB += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);\n      bA.m_angularVelocity = wA;\n      bB.m_angularVelocity = wB;\n   }\n   b2WeldJoint.prototype.SolvePositionConstraints = function (baumgarte) {\n      if (baumgarte === undefined) baumgarte = 0;\n      var tMat;\n      var tX = 0;\n      var bA = this.m_bodyA;\n      var bB = this.m_bodyB;\n      tMat = bA.m_xf.R;\n      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;\n      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);\n      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);\n      rAX = tX;\n      tMat = bB.m_xf.R;\n      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;\n      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;\n      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);\n      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);\n      rBX = tX;\n      var mA = bA.m_invMass;\n      var mB = bB.m_invMass;\n      var iA = bA.m_invI;\n      var iB = bB.m_invI;\n      var C1X = bB.m_sweep.c.x + rBX - bA.m_sweep.c.x - rAX;\n      var C1Y = bB.m_sweep.c.y + rBY - bA.m_sweep.c.y - rAY;\n      var C2 = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n      var k_allowedStretch = 10.0 * b2Settings.b2_linearSlop;\n      var positionError = Math.sqrt(C1X * C1X + C1Y * C1Y);\n      var angularError = b2Math.Abs(C2);\n      if (positionError > k_allowedStretch) {\n         iA *= 1.0;\n         iB *= 1.0;\n      }\n      this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;\n      this.m_mass.col2.x = (-rAY * rAX * iA) - rBY * rBX * iB;\n      this.m_mass.col3.x = (-rAY * iA) - rBY * iB;\n      this.m_mass.col1.y = this.m_mass.col2.x;\n      this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;\n      this.m_mass.col3.y = rAX * iA + rBX * iB;\n      this.m_mass.col1.z = this.m_mass.col3.x;\n      this.m_mass.col2.z = this.m_mass.col3.y;\n      this.m_mass.col3.z = iA + iB;\n      var impulse = new b2Vec3();\n      this.m_mass.Solve33(impulse, (-C1X), (-C1Y), (-C2));\n      bA.m_sweep.c.x -= mA * impulse.x;\n      bA.m_sweep.c.y -= mA * impulse.y;\n      bA.m_sweep.a -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);\n      bB.m_sweep.c.x += mB * impulse.x;\n      bB.m_sweep.c.y += mB * impulse.y;\n      bB.m_sweep.a += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);\n      bA.SynchronizeTransform();\n      bB.SynchronizeTransform();\n      return positionError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;\n   }\n   Box2D.inherit(b2WeldJointDef, Box2D.Dynamics.Joints.b2JointDef);\n   b2WeldJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;\n   b2WeldJointDef.b2WeldJointDef = function () {\n      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);\n      this.localAnchorA = new b2Vec2();\n      this.localAnchorB = new b2Vec2();\n   };\n   b2WeldJointDef.prototype.b2WeldJointDef = function () {\n      this.__super.b2JointDef.call(this);\n      this.type = b2Joint.e_weldJoint;\n      this.referenceAngle = 0.0;\n   }\n   b2WeldJointDef.prototype.Initialize = function (bA, bB, anchor) {\n      this.bodyA = bA;\n      this.bodyB = bB;\n      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchor));\n      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchor));\n      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\n   }\n})();\n(function () {\n   var b2DebugDraw = Box2D.Dynamics.b2DebugDraw;\n   b2DebugDraw.b2DebugDraw = function () {\n      this.m_drawScale = 1.0;\n      this.m_lineThickness = 1.0;\n      this.m_alpha = 1.0;\n      this.m_fillAlpha = 1.0;\n      this.m_xformScale = 1.0;\n      var __this = this;\n      //#WORKAROUND\n      this.m_sprite = {\n         graphics: {\n            clear: function () {\n               __this.m_ctx.clearRect(0, 0, __this.m_ctx.canvas.width, __this.m_ctx.canvas.height)\n            }\n         }\n      };\n   };\n   b2DebugDraw.prototype._color = function (color, alpha) {\n      return \"rgba(\" + ((color & 0xFF0000) >> 16) + \",\" + ((color & 0xFF00) >> 8) + \",\" + (color & 0xFF) + \",\" + alpha + \")\";\n   };\n   b2DebugDraw.prototype.b2DebugDraw = function () {\n      this.m_drawFlags = 0;\n   };\n   b2DebugDraw.prototype.SetFlags = function (flags) {\n      if (flags === undefined) flags = 0;\n      this.m_drawFlags = flags;\n   };\n   b2DebugDraw.prototype.GetFlags = function () {\n      return this.m_drawFlags;\n   };\n   b2DebugDraw.prototype.AppendFlags = function (flags) {\n      if (flags === undefined) flags = 0;\n      this.m_drawFlags |= flags;\n   };\n   b2DebugDraw.prototype.ClearFlags = function (flags) {\n      if (flags === undefined) flags = 0;\n      this.m_drawFlags &= ~flags;\n   };\n   b2DebugDraw.prototype.SetSprite = function (sprite) {\n      this.m_ctx = sprite;\n   };\n   b2DebugDraw.prototype.GetSprite = function () {\n      return this.m_ctx;\n   };\n   b2DebugDraw.prototype.SetDrawScale = function (drawScale) {\n      if (drawScale === undefined) drawScale = 0;\n      this.m_drawScale = drawScale;\n   };\n   b2DebugDraw.prototype.GetDrawScale = function () {\n      return this.m_drawScale;\n   };\n   b2DebugDraw.prototype.SetLineThickness = function (lineThickness) {\n      if (lineThickness === undefined) lineThickness = 0;\n      this.m_lineThickness = lineThickness;\n      this.m_ctx.strokeWidth = lineThickness;\n   };\n   b2DebugDraw.prototype.GetLineThickness = function () {\n      return this.m_lineThickness;\n   };\n   b2DebugDraw.prototype.SetAlpha = function (alpha) {\n      if (alpha === undefined) alpha = 0;\n      this.m_alpha = alpha;\n   };\n   b2DebugDraw.prototype.GetAlpha = function () {\n      return this.m_alpha;\n   };\n   b2DebugDraw.prototype.SetFillAlpha = function (alpha) {\n      if (alpha === undefined) alpha = 0;\n      this.m_fillAlpha = alpha;\n   };\n   b2DebugDraw.prototype.GetFillAlpha = function () {\n      return this.m_fillAlpha;\n   };\n   b2DebugDraw.prototype.SetXFormScale = function (xformScale) {\n      if (xformScale === undefined) xformScale = 0;\n      this.m_xformScale = xformScale;\n   };\n   b2DebugDraw.prototype.GetXFormScale = function () {\n      return this.m_xformScale;\n   };\n   b2DebugDraw.prototype.DrawPolygon = function (vertices, vertexCount, color) {\n      if (!vertexCount) return;\n      var s = this.m_ctx;\n      var drawScale = this.m_drawScale;\n      s.beginPath();\n      s.strokeStyle = this._color(color.color, this.m_alpha);\n      s.moveTo(vertices[0].x * drawScale, vertices[0].y * drawScale);\n      for (var i = 1; i < vertexCount; i++) {\n         s.lineTo(vertices[i].x * drawScale, vertices[i].y * drawScale);\n      }\n      s.lineTo(vertices[0].x * drawScale, vertices[0].y * drawScale);\n      s.closePath();\n      s.stroke();\n   };\n   b2DebugDraw.prototype.DrawSolidPolygon = function (vertices, vertexCount, color) {\n      if (!vertexCount) return;\n      var s = this.m_ctx;\n      var drawScale = this.m_drawScale;\n      s.beginPath();\n      s.strokeStyle = this._color(color.color, this.m_alpha);\n      s.fillStyle = this._color(color.color, this.m_fillAlpha);\n      s.moveTo(vertices[0].x * drawScale, vertices[0].y * drawScale);\n      for (var i = 1; i < vertexCount; i++) {\n         s.lineTo(vertices[i].x * drawScale, vertices[i].y * drawScale);\n      }\n      s.lineTo(vertices[0].x * drawScale, vertices[0].y * drawScale);\n      s.closePath();\n      s.fill();\n      s.stroke();\n   };\n   b2DebugDraw.prototype.DrawCircle = function (center, radius, color) {\n      if (!radius) return;\n      var s = this.m_ctx;\n      var drawScale = this.m_drawScale;\n      s.beginPath();\n      s.strokeStyle = this._color(color.color, this.m_alpha);\n      s.arc(center.x * drawScale, center.y * drawScale, radius * drawScale, 0, Math.PI * 2, true);\n      s.closePath();\n      s.stroke();\n   };\n   b2DebugDraw.prototype.DrawSolidCircle = function (center, radius, axis, color) {\n      if (!radius) return;\n      var s = this.m_ctx,\n         drawScale = this.m_drawScale,\n         cx = center.x * drawScale,\n         cy = center.y * drawScale;\n      s.moveTo(0, 0);\n      s.beginPath();\n      s.strokeStyle = this._color(color.color, this.m_alpha);\n      s.fillStyle = this._color(color.color, this.m_fillAlpha);\n      s.arc(cx, cy, radius * drawScale, 0, Math.PI * 2, true);\n      s.moveTo(cx, cy);\n      s.lineTo((center.x + axis.x * radius) * drawScale, (center.y + axis.y * radius) * drawScale);\n      s.closePath();\n      s.fill();\n      s.stroke();\n   };\n   b2DebugDraw.prototype.DrawSegment = function (p1, p2, color) {\n      var s = this.m_ctx,\n         drawScale = this.m_drawScale;\n      s.strokeStyle = this._color(color.color, this.m_alpha);\n      s.beginPath();\n      s.moveTo(p1.x * drawScale, p1.y * drawScale);\n      s.lineTo(p2.x * drawScale, p2.y * drawScale);\n      s.closePath();\n      s.stroke();\n   };\n   b2DebugDraw.prototype.DrawTransform = function (xf) {\n      var s = this.m_ctx,\n         drawScale = this.m_drawScale;\n      s.beginPath();\n      s.strokeStyle = this._color(0xff0000, this.m_alpha);\n      s.moveTo(xf.position.x * drawScale, xf.position.y * drawScale);\n      s.lineTo((xf.position.x + this.m_xformScale * xf.R.col1.x) * drawScale, (xf.position.y + this.m_xformScale * xf.R.col1.y) * drawScale);\n\n      s.strokeStyle = this._color(0xff00, this.m_alpha);\n      s.moveTo(xf.position.x * drawScale, xf.position.y * drawScale);\n      s.lineTo((xf.position.x + this.m_xformScale * xf.R.col2.x) * drawScale, (xf.position.y + this.m_xformScale * xf.R.col2.y) * drawScale);\n      s.closePath();\n      s.stroke();\n   };\n})();\nvar i;\nfor (i = 0; i < Box2D.postDefs.length; ++i) Box2D.postDefs[i]();\n\nmodule.exports = Box2D","import AnimationPlayer from '../../src/lib/AnimationPlayer';\nimport Utils from '../../src/lib/Utils';\nimport B2Box from './lib/B2Box';\nimport Entity from './lib/Entity';\nimport Circle from './lib/Circle';\nimport Rectangle from './lib/Rectangle';\nimport Polygon from './lib/Polygon';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\n  const WIDTH = window.innerWidth;\n  const HEIGHT = window.innerHeight-4;\n  const CENTER = { x: WIDTH/2, y: HEIGHT/2 };\n  const NULL_CENTER = { x: null, y: null };\n\n  let canvas = document.getElementById(\"canvas\");\n  let ctx = canvas.getContext(\"2d\");\n  let SCALE = 30;\n  let FPS = 60; // This is experimental: it may cause conflicts with AnimationPlayer's fps?\n  let DEBUG_DRAW = false;\n\n  let box = new B2Box(FPS, false, WIDTH, HEIGHT, SCALE, DEBUG_DRAW, ctx);\n  let player = new AnimationPlayer({ fps: FPS });\n\n  // Full size the canvas element\n  canvas.height = HEIGHT;\n  canvas.width = WIDTH;\n\n  // Demo player setup\n  player.setUpdateFn(update);\n  player.play();\n\n\n  // Simulation\n  let world = {};\n  let bodiesState = null;\n  let totalBalls = 500;\n  let initialState = [];\n\n  // Generate Balls\n  for (let i=0; i<totalBalls; i++) {\n    let ball = {\n      id: Utils.randomUniueID(),\n      x: Utils.randomRange(0, box.toB2p(WIDTH*2)),\n      y: Utils.randomRange(0, box.toB2p(HEIGHT*2)),\n      radius: Utils.randomRange(0.5, 1),\n      color: Utils.randomColor(),\n      angle: Utils.randomRange(0, Math.PI*2)\n    };\n\n    initialState.push(ball);\n  }\n\n\n  for (let i = 0; i < initialState.length; i++) {\n    world[initialState[i].id] = build(initialState[i]);\n  }\n\n  box.setBodies(world);\n\n\n\n  // Update function\n  function update() {\n    box.update();\n    bodiesState = box.getState();\n\n    var graveyard = [];\n\n    for (var id in bodiesState) {\n      var entity = world[id];\n\n      if (entity && world[id].dead) {\n        box.removeBody(id);\n        graveyard.push(id);\n      } else if (entity) {\n        entity.update(bodiesState[id]);\n      }\n    }\n\n    for (var i = 0; i < graveyard.length; i++) {\n      delete world[graveyard[i]];\n    }\n\n    if (DEBUG_DRAW) {\n      box.debugDraw();\n    } else {\n      draw();\n    }\n\n  }\n\n  function draw() {\n    ctx.clearRect(0,0, WIDTH, HEIGHT);\n\n    ctx.globalAlpha = 0.5;\n\n    for (var id in world) {\n      var entity = world[id];\n      entity.draw(ctx);\n    }\n\n    // Draw scale line\n    ctx.beginPath();\n    ctx.moveTo(SCALE, 10);\n    ctx.lineTo(SCALE * 2, 10);\n    ctx.closePath();\n    ctx.stroke();\n  }\n\n  function build(def) {\n    if (def.radius) {\n      return new Circle(def.id, def.x, def.y, def.angle, NULL_CENTER, def.color, def.strength, def.heading, def.speed, def.radius);\n    } else if (def.polys) {\n      return new Polygon(def.id, def.x, def.y, def.angle, NULL_CENTER, def.color, def.strength, def.polys);\n    } else {\n      return new Rectangle(def.id, def.x, def.y, def.angle, NULL_CENTER, def.color, def.strength, def.halfWidth, def.halfHeight);\n    }\n  }\n\n});\n","import Box2D from 'box2dweb';\n\nlet   b2Vec2 = Box2D.Common.Math.b2Vec2\n , b2BodyDef = Box2D.Dynamics.b2BodyDef\n , b2Body = Box2D.Dynamics.b2Body\n , b2FixtureDef = Box2D.Dynamics.b2FixtureDef\n , b2Fixture = Box2D.Dynamics.b2Fixture\n , b2World = Box2D.Dynamics.b2World\n , b2MassData = Box2D.Collision.Shapes.b2MassData\n , b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape\n , b2CircleShape = Box2D.Collision.Shapes.b2CircleShape\n , b2DebugDraw = Box2D.Dynamics.b2DebugDraw\n , b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef;\n\nexport default class B2Box {\n\n  constructor(intervalRate, adaptive, width, height, scale, debugDraw, ctx) {\n    this.intervalRate = parseInt(intervalRate);\n    this.adaptive = adaptive;\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n    this.bodiesMap = {};\n\n    // Create World\n    this.world = new b2World(\n          new b2Vec2(0, 0)    //gravity\n       ,  true                 //allow sleep\n    );\n\n    // Default fixture setup\n    this.fixDef = new b2FixtureDef;\n    this.fixDef.density = 1;\n    this.fixDef.friction = 0;\n    this.fixDef.restitution = 0.5;\n\n\n    // Setup debug draw\n    if (debugDraw) {\n      this.setupDebugDraw(ctx);\n    }\n  }\n\n  update() {\n    let start = Date.now();\n    let stepRate = (this.adaptive) ? (now - this.lastTimestamp) / 1000 : (1 / this.intervalRate);\n\n\n    for (let a in this.bodiesMap) {\n      for (let b in this.bodiesMap) {\n        if (a === b) {\n          continue;\n        }\n\n        this.gravitate(this.bodiesMap[a], this.bodiesMap[b]);\n      }\n    }\n\n    this.world.Step(\n           stepRate   //frame-rate\n        ,  8       //velocity iterations\n        ,  8       //position iterations\n     );\n     this.world.ClearForces();\n     return (Date.now() - start);\n  }\n\n  getState() {\n    let state = {};\n    for (let b = this.world.GetBodyList(); b; b = b.m_next) {\n\n      if (b.IsActive() && typeof b.GetUserData() !== 'undefined' && b.GetUserData() != null) {\n          state[b.GetUserData()] = this.getBodySpec(b);\n      }\n    }\n    return state;\n  }\n\n  getBodySpec(b) {\n    return {\n      x: this.toPx(b.GetPosition().x),\n      y: this.toPx(b.GetPosition().y),\n      a: b.GetAngle(),\n      c: {\n        x: this.toPx(b.GetWorldCenter().x),\n        y: this.toPx(b.GetWorldCenter().y)\n      },\n      r: this.toPx(this.getRadius(b))   // Same as SCALE: is this value expressed in B2D points or pixels?\n    };\n  }\n\n  getRadius(b) {\n    let f = b.GetFixtureList();\n    return f.m_shape.m_radius;\n  }\n\n  setBodies(bodyEntities) {\n      let bodyDef = new b2BodyDef;\n\n      for(let id in bodyEntities) {\n          let entity = bodyEntities[id];\n\n          if (entity.id == 'ground') {\n              bodyDef.type = b2Body.b2_staticBody;\n          } else {\n              bodyDef.type = b2Body.b2_dynamicBody;\n          }\n\n          if (entity.heading !== 0 && entity.speed !== 0) {\n            bodyDef.linearVelocity.x = Math.cos(entity.heading) * entity.speed;\n            bodyDef.linearVelocity.y = Math.sin(entity.heading) * entity.speed;\n          }\n\n          bodyDef.position.x = entity.x;\n          bodyDef.position.y = entity.y;\n\n          bodyDef.userData = entity.id;\n          bodyDef.angle = entity.angle;\n          let body = this.registerBody(bodyDef);\n\n          if (entity.radius) {\n              this.fixDef.shape = new b2CircleShape(entity.radius);\n              body.CreateFixture(this.fixDef);\n          } else if (entity.polys) {\n              for (let j = 0; j < entity.polys.length; j++) {\n                  let points = entity.polys[j];\n                  let vecs = [];\n                  for (let i = 0; i < points.length; i++) {\n                      let vec = new b2Vec2();\n                      vec.Set(points[i].x, points[i].y);\n                      vecs[i] = vec;\n                  }\n                  this.fixDef.shape = new b2PolygonShape;\n                  this.fixDef.shape.SetAsArray(vecs, vecs.length);\n                  body.CreateFixture(this.fixDef);\n              }\n          } else {\n              this.fixDef.shape = new b2PolygonShape;\n              this.fixDef.shape.SetAsBox(entity.halfWidth, entity.halfHeight);\n              body.CreateFixture(this.fixDef);\n          }\n      }\n      this.ready = true;\n  }\n\n  registerBody(bodyDef) {\n      let body = this.world.CreateBody(bodyDef);\n      this.bodiesMap[body.GetUserData()] = body;\n      return body;\n  }\n\n  removeBody(id) {\n    this.world.DestroyBody(this.bodiesMap[id]);\n  }\n\n  debugDraw() {\n    this.world.DrawDebugData();\n  }\n\n  setupDebugDraw(ctx, alpha) {\n    alpha = alpha || 0.5;\n\n    let debugDraw = new b2DebugDraw();\n    debugDraw.SetSprite(ctx);\n    debugDraw.SetDrawScale(this.scale);\n    debugDraw.SetFillAlpha(alpha);\n    debugDraw.SetLineThickness(1.0);\n    debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);\n    this.world.SetDebugDraw(debugDraw);\n  }\n\n  toPx(v) {\n    return v * this.scale;\n  }\n\n  toB2p(v) {\n    return v / this.scale;\n  }\n\n  gravitate(a, b, gravityFactor) {\n    gravityFactor = 9.6;\n\n    // let aPos = a.GetWorldCenter();\n    // let bPos = b.GetWorldCenter();\n    // let force = aPos.Copy();\n    // force.Subtract(bPos);\n    //\n    // let distance = force.Length();\n    //\n    // force.Normalize();\n    // let strength = (gravityFactor * b.m_mass * a.m_mass) / (distance * distance);\n    // force.Multiply(strength);\n    //\n    // b.ApplyForce(force, bPos);\n\n    let radiusSum = this.getRadius(a) + this.getRadius(b);\n    let massFactor = a.m_mass * b.m_mass;\n\n    let aPos = a.GetWorldCenter();\n    let bPos = b.GetWorldCenter();\n\n    let force = aPos.Copy();\n    force.Subtract(bPos);\n\n    let distance = force.Length();\n    let surfaceDist = distance - radiusSum;\n\n\n    force.Normalize();\n    let strength = gravityFactor * massFactor / (distance * distance);\n\n    force.Multiply(strength);\n\n    b.ApplyForce(force, bPos);\n\n  }\n\n\n\n}\n","import Entity from './Entity';\n\nexport default class Circle extends Entity {\n\n  constructor(id, x, y, angle, center, color, strength, heading, speed, radius) {\n    color = color || 'aqua';\n    super(id, x, y, angle, center, color, strength, heading, speed);\n    this.radius = radius;\n  }\n\n  update(state) {\n    super.update(state);\n\n    this.radius = state.r;\n  }\n\n  // Values are expressed in pixles\n  draw(ctx) {\n    ctx.save();\n    ctx.translate(this.x, this.y);\n    ctx.rotate(this.angle);\n    ctx.translate(-(this.x), -(this.y));\n\n    ctx.fillStyle = this.getColor();\n    ctx.strokeStyle = 'black';\n\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, true);\n    ctx.moveTo(this.x, this.y);\n    ctx.lineTo((this.x), (this.y + this.radius));\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.restore();\n  }\n}\n","export default class Entity {\n\n  constructor(id, x, y, angle, center, color, strength, heading, speed) {\n    this.id = id;\n    this.x = x;\n    this.y = y;\n    this.angle = angle || 0;\n    this.center = center;\n    this.color = color || \"red\";\n    this.isHit = false;\n    this.strength = strength;\n    this.dead = false;\n    this.heading = heading || 0;\n    this.speed = speed || 0;\n  }\n\n  hit(impulse, source) {\n    this.isHit = true;\n    if (this.strength) {\n      this.strength -= impulse;\n      if (this.strength <= 0) {\n        this.dead = true\n      }\n    }\n\n    //console.log(this.id + \", \" + impulse + \", \" + source.id + \", \" + this.strength);\n  }\n\n  getColor() {\n    if (this.isHit) {\n      return 'black';\n    } else {\n      return this.color;\n    }\n  }\n\n  update(state) {\n    this.x = state.x;\n    this.y = state.y;\n    this.center = state.c;\n    this.angle = state.a;\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = 'black';\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, 4, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.fillStyle = 'yellow';\n    ctx.beginPath();\n    ctx.arc(this.center.x, this.center.y, 2, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n\n    // clear\n    this.isHit = false;\n  }\n\n}\n","import Entity from './Entity';\n\nexport default class Polygon extends Entity {\n\n  constructor(id, x, y, angle, center, color, strength, polys) {\n    super(id, x, y, angle, center, color, strength);\n    this.polys = polys;\n  }\n\n  draw(ctx, SCALE) {\n    SCALE = SCALE || 30;\n\n    ctx.save();\n    ctx.translate(this.x * SCALE, this.y * SCALE);\n    ctx.rotate(this.angle);\n    ctx.translate(-(this.x) * SCALE, -(this.y) * SCALE);\n    ctx.fillStyle = this.getColor();\n\n    for (var i = 0; i < this.polys.length; i++) {\n      var points = this.polys[i];\n      ctx.beginPath();\n      ctx.moveTo((this.x + points[0].x) * SCALE, (this.y + points[0].y) * SCALE);\n      for (var j = 1; j < points.length; j++) {\n         ctx.lineTo((points[j].x + this.x) * SCALE, (points[j].y + this.y) * SCALE);\n      }\n      ctx.lineTo((this.x + points[0].x) * SCALE, (this.y + points[0].y) * SCALE);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n    }\n\n    ctx.restore();\n  }\n}\n","import Entity from './Entity';\n\nexport default class Rectangle extends Entity {\n\n  constructor(id, x, y, angle, center, color, strength, halfWidth, halfHeight) {\n    super(id, x, y, angle, center, color, strength);\n    this.halfWidth = halfWidth;\n    this.halfHeight = halfHeight;\n  }\n\n  draw(ctx, SCALE) {\n    SCALE = SCALE || 30;\n\n    ctx.save();\n    ctx.translate(this.x * SCALE, this.y * SCALE);\n    ctx.rotate(this.angle);\n    ctx.translate(-(this.x) * SCALE, -(this.y) * SCALE);\n    ctx.fillStyle = this.getColor();\n    ctx.fillRect((this.x-this.halfWidth) * SCALE,\n                 (this.y-this.halfHeight) * SCALE,\n                 (this.halfWidth*2) * SCALE,\n                 (this.halfHeight*2) * SCALE);\n    ctx.restore();\n  }\n}\n","/*\n *  Feature Toggling\n *\n *  Activete/Hide features that are in process of development or under testing\n *  Once a feature is accepted to be includded must be removed from the\n *  feature toggle scheme\n */\n\n const FEATURE_TOGGLE = {\n   FPS_CONTROL: true                // FPS controll for AnimationPlayer class\n };\n\n export default FEATURE_TOGGLE;\n","import FEATURE_TOGGLE from '../../src/feature-toggle';\n\nexport default class AnimationPlayer {\n\n  constructor(settings) {\n    settings = settings || {};\n\n    this.window = settings.windowElement || window;\n    this.requestId = null;\n    this.playing = false;\n\n    // FPS control\n    if (FEATURE_TOGGLE.FPS_CONTROL) {\n      this.fps = settings.fps || 90;\n      this.now;\n      this.lastTime = Date.now();\n      this.interval = 1000/this.fps;\n      this.delta;\n    }\n\n    this.registerEvents();\n  }\n\n  registerEvents() {\n    // Animation control: KeyDown\n    document.body.addEventListener(\"keydown\", (e) => {\n      //console.log(\"Key pressed: \", e.keyCode);\n      switch (e.keyCode) {\n        case 27:                        // Esc\n        if (this.playing) {\n          this.stop();\n          console.log(\"> Scene stopped\");\n        } else {\n          this.play();\n          console.log(\"> Playing scene\");\n        }\n        break;\n\n        case 13:\n        this.stop();\n        this.play();\n        this.stop();\n        console.log(\"> Step forward\");\n        break;\n\n        default:\n        break;\n      }\n    });\n  }\n\n  play() {\n    this.playing = true;\n    this.updateFn();\n  }\n\n  stop() {\n    if (!this.playing) {\n      return false;\n    }\n    this.window.cancelAnimationFrame(this.requestId);\n    this.playing = false;\n    this.requestId = null;\n  }\n\n  setUpdateFn(updateFn) {\n    this.updateFn = (\n      () => {\n        this.requestId = this.window.requestAnimationFrame(this.updateFn);\n\n        // FPS control\n        if (FEATURE_TOGGLE.FPS_CONTROL) {\n          this.now = Date.now();\n          this.delta = this.now - this.lastTime;\n\n          if (this.delta > this.interval) {\n            this.lastTime = this.now - (this.delta % this.interval);\n            updateFn();\n          }\n          return;\n        }\n\n        updateFn();\n\n      });\n    }\n\n    updateFn() {\n      console.warn(\"Player update function has not been set.\");\n    }\n  }\n","import FEATURE_TOGGLE from '../../src/feature-toggle';\n\nclass Utils {\n\n  constructor() {\n    this.cache = {};\n  }\n\n  cacheStore(caller, key, value) {\n    if (!this.cache.hasOwnProperty(caller)) {\n      this.cache[caller] = {};\n    }\n    this.cache[caller][key] = value;\n  }\n\n  cacheRetrieve(caller, key) {\n    let fnCache = this.cache[caller] || [];\n    let value = fnCache[key] || false;\n    return value;\n  }\n\n  /*\n   *  Get 'n' points from a circular shaped 'Particle' object\n   */\n  getCirclePoints(p, n, radius) {\n    n = n || 8;\n    radius = radius || p.radius || 0;\n\n    let angle = -1;\n    let angleStep = (Math.PI * 2) / n;\n    let points = [];\n\n    for (let i=0; i<n; i++) {\n      let cData = this.cacheRetrieve(\"getCirclePoints\", angle);\n      let cos = cData.cos || Math.cos(angle);\n      let sin = cData.sin || Math.sin(angle);\n      let pt = {\n        x: p.x + (cos * p.radius),\n        y: p.y + (sin * p.radius)\n      };\n      points.push(pt);\n      if (!cData) {\n        this.cacheStore(\"getCirclePoints\", angle, {cos: cos, sin: sin});\n      }\n      angle += angleStep;\n    }\n\n    // Add the center point\n    return points;\n  }\n\n  montecarlo() {\n    while(true) {\n      let r1 = Math.random();\n      let p = r1;\n      let r2 = Math.random();\n      if (r2 < p) {\n        return r1;\n      }\n    }\n  }\n\n  lerp(norm, min, max) {\n    return (max - min) * norm + min;\n  }\n\n  quadraticBezier(p0, p1, p2, t, pFinal) {\n    pFinal = pFinal || {};\n    pFinal.x = Math.pow(1 - t, 2) * p0.x + (1 - t) * 2 * t * p1.x + t * t * p2.x;\n    pFinal.y = Math.pow(1 - t, 2) * p0.y + (1 - t) * 2 * t * p1.y + t * t * p2.y;\n    return pFinal;\n  }\n\n  cubicBezier(p0, p1, p2, p3, t, pFinal) {\n    pFinal = pFinal || {};\n    pFinal.x = Math.pow(1 - t, 3) * p0.x + Math.pow(1 - t, 2) * 3 * t * p1.x + (1 - t) * 3 * t * t * p2.x + t * t * t * p3.x;\n    pFinal.y = Math.pow(1 - t, 3) * p0.y + Math.pow(1 - t, 2) * 3 * t * p1.y + (1 - t) * 3 * t * t * p2.y + t * t * t * p3.y;\n    return pFinal;\n  }\n\n  distance(p0, p1) {\n    let dx = p0.x - p1.x;\n    let dy = p0.y - p1.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  distanceXY(x0, y0, x1, y1) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  // TODO: Check if and why we need to parseInt() the result\n  mapRange(value, low1, high1, low2, high2) {\n    return result = low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n    let result = low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n    if (low2 === parseInt(low2, 10) || high2 === parseInt(high2, 10)) {\n      result = parseInt(result);\n    }\n    return result;\n  }\n\n  inRange(value, min, max) {\n    return value >= Math.min(min, max) && value <= Math.max(min, max);\n  }\n\n  rangeIntersect(min0, max0, min1, max1) {\n    return  Math.max(min0, max0) >= Math.min(min1, max1) &&\n    Math.min(min0, max0) <= Math.max(min1, max1);\n  }\n\n  randomRange(min, max) {\n    return min + Math.random() * (max - min);\n  }\n\n  circleCollision(c0, c1) {\n    return this.distance(c0, c1) <= c0.radius + c1.radius;\n  }\n\n  rectangleCollision(r0, r1) {\n    return  this.rangeIntersect(r0.x, r0.x + r0.width, r1.x, r1.x + r1.width) &&\n    this.rangeIntersect(r0.y, r0.y + r0.height, r1.y, r1.y + r1.height);\n  }\n\n  circlePointCollision(px, py, circle) {\n    return this.distanceXY(px, py, circle.x, circle.y) < circle.radius;\n  }\n\n  rectanglePointCollision(px, py, rect) {\n    return  this.inRange(px, rect.x, rect.x + rect.width) &&\n    this.inRange(py, rect.y, rect.y + rect.height);\n  }\n\n  randomUniueID() {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n      s4() + '-' + s4() + s4() + s4();\n  }\n\n  randomColor() {\n    return \"#000000\".replace(/0/g,function(){return (~~(Math.random()*16)).toString(16);});\n  }\n}\n\nlet instance = new Utils();\n\nexport default instance;\n"]}