{"version":3,"sources":["node_modules/browser-pack/_prelude.js","projects/perceptron-1/app.js","projects/perceptron-1/lib/Perceptron.js","projects/perceptron-1/lib/PerceptronTrainer.js","src/feature-toggle.js","src/lib/AnimationPlayer.js","src/lib/Utils.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\nimport AnimationPlayer from '../../src/lib/AnimationPlayer';\nimport Utils from '../../src/lib/Utils';\nimport Perceptron from './lib/Perceptron';\nimport PerceptronTrainer from './lib/PerceptronTrainer';\n\nwindow.onload = () => {\n    const canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const width = window.innerWidth;\n    const height = window.innerHeight-4;\n    const center = { x: width/2, y: height/2 };\n\n    canvas.height = height;\n    canvas.width = width;\n\n    let player = new AnimationPlayer();\n    let ptron = new Perceptron(3, 0.0000001);\n    let trainers = new Array(200);\n    let count = 0;\n\n    // Line in function of X\n    function f(x) {\n      return 2*x+1;\n    }\n\n    ctx.translate(center.x, center.y);\n\n    // Draw the line\n    ctx.moveTo(-center.x, f(-center.x));\n    ctx.lineTo(center.x, f(center.x));\n    ctx.stroke();\n\n\n    // Setup - TODO: why don't we pass a 'setup' function to the player?\n    for (let i=0;i<trainers.length;i++) {\n      let x = Utils.randomRange(-center.x, center.x);\n      let y = Utils.randomRange(-center.y, center.y);\n\n      let answer =  1;\n      if (y < f(x)) {\n        answer = -1;\n      }\n      trainers[i] = new PerceptronTrainer(x, y, answer);\n    }\n\n    // Demo player setup\n    player.setUpdateFn(update);\n    player.play();\n\n\n\n\n          for (let i=0; i<trainers.length; i++) {\n            //ptron.train(trainers[i].inputs, trainers[i].answer);\n\n            let ins = trainers[i].inputs;\n            let guess = ptron.feedForward(ins);\n\n            // Draw\n            ctx.beginPath();\n            ctx.arc(ins[0], ins[1], 8, 0, Math.PI * 2, false);\n\n            if (guess < 0) {\n              ctx.fillStyle = \"red\";\n              ctx.fill();\n            } else {\n              ctx.fillStyle = \"green\";\n              ctx.fill();\n            }\n          }\n\n\n    // Frame drawing function\n    function update() {\n      //ctx.clearRect(-center.x, -center.y, width, height);\n\n      //console.log(ptron.weights);\n\n\n      for (let i=0; i<trainers.length; i++) {\n        ptron.train(trainers[i].inputs, trainers[i].answer);\n\n        let ins = trainers[i].inputs;\n        let guess = ptron.feedForward(ins);\n\n        // Draw\n        ctx.beginPath();\n        ctx.arc(ins[0], ins[1], 8, 0, Math.PI * 2, false);\n\n        if (guess < 0) {\n          ctx.fillStyle = \"red\";\n          ctx.fill();\n        } else {\n          ctx.fillStyle = \"green\";\n          ctx.fill();\n        }\n      }\n\n\n      // ptron.train(trainers[count].inputs, trainers[count].answer);\n      // count = (count+1) % trainers.length;\n      //\n      // for (let i=0;i<count;i++) {\n      //\n      //   let ins = trainers[i].inputs;\n      //   let guess = ptron.feedForward(ins);\n      //\n      //   // Draw\n      //   ctx.beginPath();\n      //   ctx.arc(ins[0], ins[1], 8, 0, Math.PI * 2, false);\n      //\n      //   if (guess < 0) {\n      //     ctx.fillStyle = \"red\";\n      //     ctx.fill();\n      //   } else {\n      //     ctx.fillStyle = \"green\";\n      //     ctx.fill();\n      //   }\n      // }\n\n    }\n\n    // Animation control: KeyDown\n    document.body.addEventListener(\"keydown\", (e) => {\n        //console.log(\"Key pressed: \", e.keyCode);\n        switch (e.keyCode) {\n            case 27:                        // Esc\n                if (player.playing) {\n                    player.stop();\n                    console.log(\"> Scene stopped\");\n                } else {\n                    player.play();\n                    console.log(\"> Playing scene\");\n                }\n                break;\n            case 13:\n              player.play();\n              player.stop();\n              console.log(\"Wep!\");\n            default:\n                break;\n        }\n    });\n\n};\n","import Utils from '../../../src/lib/Utils';\n\nexport default class Perceptron {\n\n  // Creates random weights for the amount of inputs\n  constructor(n, learningConstant) {\n    this.weights = new Array(n);\n    this.c = learningConstant || 0.01;\n    for (let i=0;i<this.weights.length;i++) {\n      this.weights[i] = Utils.randomRange(-1, 1);\n    }\n  }\n\n\n  // Process inputs: multiply per weights, sum and send to the activate function\n  feedForward(inputs) {\n    let sum = 0;\n    for (let i=0;i<this.weights.length;i++) {\n      sum += inputs[i] * this.weights[i];\n    }\n\n    return this.activate(sum);\n  }\n\n  // Activation function\n  activate(sum) {\n    return sum > 0 ? 1:-1;\n  }\n\n  // Training function: requires inputs array and a known value\n  train(inputs, desired) {\n    let guess = this.feedForward(inputs);\n    let error = desired - guess;\n\n    for (let i=0;i<this.weights.length;i++) {\n      let correction = this.c * error * inputs[i];\n      this.weights[i] += correction;\n    }\n  }\n\n}\n","export default class PerceptronTrainer {\n\n  constructor(x, y, answer) {\n    this.inputs = [x, y, 1];\n    this.answer = answer;\n  }\n\n}\n","/*\n *  Feature Toggling\n *\n *  Activete/Hide features that are in process of development or under testing\n *  Once a feature is accepted to be includded must be removed from the\n *  feature toggle scheme\n */\n\n const FEATURE_TOGGLE = {\n   FPS_CONTROL: true                // FPS controll for AnimationPlayer class\n };\n\n export default FEATURE_TOGGLE;\n","import FEATURE_TOGGLE from '../../src/feature-toggle';\n\nexport default class AnimationPlayer {\n\n  constructor(settings) {\n    settings = settings || {};\n\n    this.window = settings.windowElement || window;\n    this.requestId = null;\n    this.playing = false;\n\n    // FPS control\n    this.fps = settings.fps || 90;\n    this.now;\n    this.lastTime = Date.now();\n    this.interval = 1000/this.fps;\n    this.delta;\n\n    this.registerEvents();\n  }\n\n  registerEvents() {\n    // Animation control: KeyDown\n    document.body.addEventListener(\"keydown\", (e) => {\n      //console.log(\"Key pressed: \", e.keyCode);\n      switch (e.keyCode) {\n        case 27:                        // Esc\n        if (this.playing) {\n          this.stop();\n          console.log(\"> Scene stopped\");\n        } else {\n          this.play();\n          console.log(\"> Playing scene\");\n        }\n        break;\n\n        case 13:\n        this.stop();\n        this.play();\n        this.stop();\n        console.log(\"> Step forward\");\n        break;\n\n        default:\n        break;\n      }\n    });\n  }\n\n  play() {\n    this.playing = true;\n    this.updateFn();\n  }\n\n  stop() {\n    if (!this.playing) {\n      return false;\n    }\n    this.window.cancelAnimationFrame(this.requestId);\n    this.playing = false;\n    this.requestId = null;\n  }\n\n  setUpdateFn(updateFn) {\n    this.updateFn = (\n      () => {\n        this.requestId = this.window.requestAnimationFrame(this.updateFn);\n        this.now = Date.now();\n        this.delta = this.now - this.lastTime;\n\n        if (this.delta > this.interval) {\n          this.lastTime = this.now - (this.delta % this.interval);\n          updateFn(this.delta, this.lastTime);\n        }\n        return;\n\n\n        updateFn();\n\n      });\n    }\n\n    updateFn() {\n      console.warn(\"Player update function has not been set.\");\n    }\n  }\n","import FEATURE_TOGGLE from '../../src/feature-toggle';\n\nclass Utils {\n\n  constructor() {\n    this.cache = {};\n  }\n\n  cacheStore(caller, key, value) {\n    if (!this.cache.hasOwnProperty(caller)) {\n      this.cache[caller] = {};\n    }\n    this.cache[caller][key] = value;\n  }\n\n  cacheRetrieve(caller, key) {\n    let fnCache = this.cache[caller] || [];\n    let value = fnCache[key] || false;\n    return value;\n  }\n\n  /*\n   *  Get 'n' points from a circular shaped 'Particle' object\n   */\n  getCirclePoints(p, n, radius) {\n    n = n || 8;\n    radius = radius || p.radius || 0;\n\n    let angle = -1;\n    let angleStep = (Math.PI * 2) / n;\n    let points = [];\n\n    for (let i=0; i<n; i++) {\n      let cData = this.cacheRetrieve(\"getCirclePoints\", angle);\n      let cos = cData.cos || Math.cos(angle);\n      let sin = cData.sin || Math.sin(angle);\n      let pt = {\n        x: p.x + (cos * p.radius),\n        y: p.y + (sin * p.radius)\n      };\n      points.push(pt);\n      if (!cData) {\n        this.cacheStore(\"getCirclePoints\", angle, {cos: cos, sin: sin});\n      }\n      angle += angleStep;\n    }\n\n    // Add the center point\n    return points;\n  }\n\n  montecarlo() {\n    while(true) {\n      let r1 = Math.random();\n      let p = r1;\n      let r2 = Math.random();\n      if (r2 < p) {\n        return r1;\n      }\n    }\n  }\n\n  lerp(norm, min, max) {\n    return (max - min) * norm + min;\n  }\n\n  quadraticBezier(p0, p1, p2, t, pFinal) {\n    pFinal = pFinal || {};\n    pFinal.x = Math.pow(1 - t, 2) * p0.x + (1 - t) * 2 * t * p1.x + t * t * p2.x;\n    pFinal.y = Math.pow(1 - t, 2) * p0.y + (1 - t) * 2 * t * p1.y + t * t * p2.y;\n    return pFinal;\n  }\n\n  cubicBezier(p0, p1, p2, p3, t, pFinal) {\n    pFinal = pFinal || {};\n    pFinal.x = Math.pow(1 - t, 3) * p0.x + Math.pow(1 - t, 2) * 3 * t * p1.x + (1 - t) * 3 * t * t * p2.x + t * t * t * p3.x;\n    pFinal.y = Math.pow(1 - t, 3) * p0.y + Math.pow(1 - t, 2) * 3 * t * p1.y + (1 - t) * 3 * t * t * p2.y + t * t * t * p3.y;\n    return pFinal;\n  }\n\n  distance(p0, p1) {\n    let dx = p0.x - p1.x;\n    let dy = p0.y - p1.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  distanceXY(x0, y0, x1, y1) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  // TODO: Check if and why we need to parseInt() the result\n  mapRange(value, low1, high1, low2, high2) {\n    return result = low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n    let result = low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n    if (low2 === parseInt(low2, 10) || high2 === parseInt(high2, 10)) {\n      result = parseInt(result);\n    }\n    return result;\n  }\n\n  inRange(value, min, max) {\n    return value >= Math.min(min, max) && value <= Math.max(min, max);\n  }\n\n  rangeIntersect(min0, max0, min1, max1) {\n    return  Math.max(min0, max0) >= Math.min(min1, max1) &&\n    Math.min(min0, max0) <= Math.max(min1, max1);\n  }\n\n  randomRange(min, max) {\n    return min + Math.random() * (max - min);\n  }\n\n  constrain(e,t,r) {\n    return e>r?r:e<t?t:e;\n  }\n\n  circleCollision(c0, c1) {\n    return this.distance(c0, c1) <= c0.radius + c1.radius;\n  }\n\n  rectangleCollision(r0, r1) {\n    return  this.rangeIntersect(r0.x, r0.x + r0.width, r1.x, r1.x + r1.width) &&\n    this.rangeIntersect(r0.y, r0.y + r0.height, r1.y, r1.y + r1.height);\n  }\n\n  circlePointCollision(px, py, circle) {\n    return this.distanceXY(px, py, circle.x, circle.y) < circle.radius;\n  }\n\n  rectanglePointCollision(px, py, rect) {\n    return  this.inRange(px, rect.x, rect.x + rect.width) &&\n    this.inRange(py, rect.y, rect.y + rect.height);\n  }\n\n  uniqueID() {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n      s4() + '-' + s4() + s4() + s4();\n  }\n\n  randomColor() {\n    return \"#000000\".replace(/0/g,function(){return (~~(Math.random()*16)).toString(16);});\n  }\n}\n\nlet instance = new Utils();\n\nexport default instance;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}