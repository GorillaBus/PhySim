{"version":3,"sources":["node_modules/browser-pack/_prelude.js","projects/local/noc-tests/app.js","projects/local/noc-tests/lib/FlowField.js","projects/local/noc-tests/lib/Vehicle.js","src/feature-toggle.js","src/lib/AnimationPlayer.js","src/lib/LineUtils.js","src/lib/Mover.js","src/lib/Perlin.js","src/lib/Utils.js","src/lib/Vector.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import AnimationPlayer from '../../../src/lib/AnimationPlayer';\nimport Vector from '../../../src/lib/Vector';\nimport Utils from '../../../src/lib/Utils';\nimport Vehicle from './lib/Vehicle';\nimport FlowField from './lib/FlowField';\n\nwindow.onload = () => {\n  const canvas = document.getElementById(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  const width = window.innerWidth;\n  const height = window.innerHeight-4;\n  const center = { x: width/2, y: height/2 };\n\n  canvas.height = height;\n  canvas.width = width;\n\n  let source = {\n    res: {\n      x: 0.08,\n      y: 0.08,\n      z: 0.08\n    },\n    seed: Math.random()\n  };\n  let flowField = new FlowField(width, height, 100, 60, source, ctx);\n\n\n  let elapsedTime = 0;\n  let timeStep = 3000;\n  let cars = [];\n  let totalCars = 10;\n\n  for (let i=0; i<totalCars; i++) {\n    cars[i] = new Vehicle(\n      Utils.randomRange(0, width),\n      Utils.randomRange(0, height),\n      Utils.randomRange(2, 5),\n      Math.PI*2,\n      Utils.randomRange(3, 5),\n      Utils.randomRange(0.8, 7),\n      Utils.randomRange(0.05, 2));\n  }\n\n  // Demo player\n  let player = new AnimationPlayer();\n  player.setUpdateFn(updateFn);\n\n  // Play a loop function\n  player.play();\n\n  function updateFn(delta, elapsed) {\n    ctx.clearRect(0, 0, width, height);\n\n    elapsedTime += delta;\n\n    let newZ = Math.floor(elapsedTime / timeStep);\n    if (newZ > flowField.depth-1) {\n      newZ = 0;\n      elapsedTime = 0;\n    }\n    if (newZ !== flowField.zIndex) {\n      flowField.pushZ();\n    }\n\n    flowField.draw();\n\n    for (let i=0; i<totalCars; i++) {\n      let car = cars[i];\n      car.update();\n\n      if (car.location.getY() > flowField.height || car.location.getY() < 0 || car.location.getX() > flowField.width || car.location.getX() < 0) {\n        car.location.setY(Utils.randomRange(0, flowField.height));\n        car.location.setX(0);\n        car.velocity.multiplyBy(0);\n      }\n\n      car.follow(flowField);\n      car.draw(ctx);\n    }\n  }\n\n\n  document.onclick = (e) => {\n    let car = new Vehicle(e.clientX, e.clientY, 5, Math.PI*2, 10, 0);\n    cars.push(car);\n    totalCars++;\n  };\n};\n","import Vector from '../../../../src/lib/Vector';\nimport Utils from '../../../../src/lib/Utils';\nimport Perlin from '../../../../src/lib/Perlin';\n\nexport default class FlowField {\n\n  constructor(w, h, z, resolution, source) {\n    this.ctx;\n    this.width = w;\n    this.height = h;\n    this.field = [];\n    this.resolution = resolution || 10;\n    this.rows = Math.round(w / this.resolution);\n    this.cols = Math.round(h / this.resolution);\n    this.depth = z >= 1 ? z:1;\n    this.zIndex = 0;\n    this.mustRedraw = false;\n    this.isReady = false;\n    this.initField(source);\n  }\n\n  pushZ() {\n    this.zIndex++;\n    if (this.zIndex >= this.depth) {\n      this.zIndex = 0;\n    }\n    this.mustRedraw = true;\n  }\n\n  lookup(vector) {\n    let x = vector.getX() / this.resolution;\n    let y = vector.getY() / this.resolution;\n    let col = parseInt(Utils.constrain(y, 0, this.cols-1));\n    let row = parseInt(Utils.constrain(x, 0, this.rows-1));\n    return this.field[this.zIndex][col][row].copy();\n  }\n\n  initField(source) {\n    let type = typeof source;\n\n    switch (type) {\n      case 'string':\n\n        if (source === 'special') {\n          this.gridFromSpecial();\n        } else {\n          this.gridFromImage(source);\n        }\n        break;\n\n      case 'object':\n        this.gridFromPerlin(source);\n        break;\n\n      default:\n        console.error(\"FlowField :: createField: invalid source.\");\n        return false;\n    }\n  }\n\n  createGrid(vectors) {\n    if (!this.ctx) {\n      this.ctx = this.createCanvas();\n    }\n\n    this.field = vectors;\n    this.mustRedraw = true;\n    this.isReady = true;\n  }\n\n  gridFromImage(imageSrc) {\n    this.getVectorsFromImage(imageSrc, (vectors) => {\n      this.createGrid(vectors)\n    });\n  }\n\n  gridFromPerlin(source) {\n    source = source || {};\n    let vectors = this.getVectorsFromPerlinNoise(source.seed, source.res);\n    this.createGrid(vectors);\n  }\n\n  gridFromSpecial() {\n    let vectors = this.getSpecialVectors();\n    this.createGrid(vectors);\n  }\n\n  getSpecialVectors() {\n    let vectors = [];\n    for (let z=0; z<this.depth; z++) {\n      vectors[z] = [];\n      for (let i = 0; i<this.cols; i++) {\n        vectors[z][i] = new Array(this.rows);\n        for (let j = 0; j<this.rows; j++) {\n\n          let angle;\n          let prob = Math.random();\n          if (prob < 0.85) {\n            angle = Utils.randomRange(0.2, 0.6);\n          } else {\n            angle = Utils.randomRange(-0.9, 0.1);\n          }\n\n          let vector = new Vector({\n            x: Math.cos(angle),\n            y: Math.sin(angle)\n          });\n          vectors[z][i][j] = vector;\n        }\n      }\n    }\n\n    return vectors;\n  }\n\n  getVectorsFromPerlinNoise(seed, res) {\n    res = res || {};\n    res = {\n      x: res.x || 0.02,\n      y: res.y || 0.02,\n      z: res.z || 0.02\n    };\n    seed = seed || Math.random();\n\n    let noise = new Perlin();\n    noise.seed(seed);\n    let xOff = 0;\n    let yOff = 0;\n    let zOff = 0;\n    let vectors = [];\n\n    for (let z=0; z<this.depth; z++) {\n      vectors[z] = [];\n      for (let i = 0; i<this.cols; i++) {\n        yOff = 0;\n        vectors[z][i] = new Array(this.rows);\n        for (let j = 0; j<this.rows; j++) {\n          let noiseVal = noise.noise(xOff, yOff, zOff);\n          let angle = Utils.mapRange(noiseVal, 0, 1, -1, 1);\n          let vector = new Vector({\n            x: Math.cos(angle),\n            y: Math.sin(angle)\n          });\n          vectors[z][i][j] = vector;\n          yOff += res.y;\n        }\n        xOff += res.x;\n      }\n      zOff += res.z;\n    }\n\n    return vectors;\n  }\n\n  getVectorsFromImage(imageSrc, cb) {\n    let image = new Image();\n\n    image.src = imageSrc;\n    image.onload = function() {\n      let canvas = document.createElement(\"canvas\");\n      let ctx = canvas.getContext(\"2d\");\n\n      canvas.width = this.width;\n      canvas.height = this.height;\n      document.getElementsByTagName(\"BODY\")[0].appendChild(canvas);\n      ctx.drawImage(image, 0, 0);\n\n      let imageData = ctx.getImageData(0, 0, this.width, this.height);\n      let vectors = [[]];\n\n      for (let i=0; i<this.cols; i++) {\n        vectors[0][i] = new Array(this.rows);\n\n        for (let j=0; j<this.rows; j++) {\n          let brightness = this.imageGetBlockValue(imageData, i, j);\n          let angle = Utils.mapRange(brightness, 0, 255, -1, 1);\n          let vector = new Vector({\n            x: Math.cos(angle),\n            y: Math.sin(angle)\n          });\n\n          vectors[0][i][j] = vector;\n        }\n      }\n\n      cb(vectors);\n\n    }.bind(this);\n  }\n\n  imageGetBlockValue(imageData, col, row) {\n    let pixelData = 4;\n    let blockSize = this.resolution * pixelData;\n    let blockSizeSquare = this.resolution * blockSize;\n    let start = (col * blockSize) + row * this.width * blockSize;\n    let end = start + blockSize;\n    let nextOffset = this.cols * blockSize;\n    let cut = start + nextOffset * this.resolution\n    let acum = 0;\n    let y=0;\n    while (start < cut) {\n      for (let i=start; i<end; i++) {\n        acum += imageData.data[i];\n        y++;\n      }\n\n      start += nextOffset;\n      end = start + blockSize;\n    }\n\n    return acum / blockSizeSquare;\n  }\n\n  debugPaintImageBlock(imageData, col, row) {\n    let pixelData = 4;\n    let blockSize = this.resolution * pixelData;\n    let blockSizeSquare = this.resolution * blockSize;\n    let start = (col * blockSize) + row * this.width * blockSize;\n    let end = start + blockSize;\n    let nextOffset = this.cols * blockSize;\n    let cut = start + nextOffset*this.resolution\n    let acum = 0;\n    let y=0;\n    while (start < cut) {\n      for (let i=start; i<end; i++) {\n        acum += imageData.data[i];\n        imageData.data[i] = 255;\n        y++;\n      }\n\n      start += nextOffset;\n      end = start + blockSize;\n    }\n  }\n\n  drawCell(x, y, a) {\n    let arrowSize = this.resolution / 1.5;\n    let halfRes = this.resolution / 2;\n    let xOffset = (this.resolution - arrowSize) / 2;\n    let arrowColor = \"#a3a3a3\";\n    let arrowHeadSize = arrowSize * 10 / 100;\n\n    // this.ctx.lineWidth = 1;\n    //\n    // this.ctx.setLineDash([5, 15]);\n    // this.ctx.beginPath();\n    // this.ctx.rect(x, y, this.resolution , this.resolution);\n    // this.ctx.stroke();\n    // this.ctx.closePath();\n\n    this.ctx.save();\n    this.ctx.translate(x + halfRes, y + halfRes);\n    this.ctx.rotate(a);\n\n    this.ctx.setLineDash([]);\n    this.ctx.strokeStyle = arrowColor;\n    this.ctx.fillStyle = arrowColor;\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(-(arrowSize/2), 0);\n    this.ctx.lineTo((arrowSize/2)-arrowHeadSize, 0);\n    this.ctx.closePath();\n    this.ctx.stroke();\n\n    this.ctx.beginPath();\n    this.ctx.moveTo((arrowSize/2)-arrowHeadSize, -arrowHeadSize);\n    this.ctx.lineTo((arrowSize/2)-arrowHeadSize, arrowHeadSize);\n    this.ctx.lineTo(arrowSize/2, 0);\n    this.ctx.closePath();\n    this.ctx.fill();\n\n    this.ctx.restore();\n  }\n\n  draw() {\n    if (!this.mustRedraw) {\n      return;\n    }\n\n    let x = 0;\n    let y = 0;\n\n    this.ctx.clearRect(0, 0, this.width, this.height);\n\n    for (let i = 0; i<this.cols; i++) {\n      y = i * this.resolution;\n      for (let j = 0; j<this.rows; j++) {\n        x = j * this.resolution;\n        let v = this.field[this.zIndex][i][j];\n        let angle = v.getAngle();\n        this.drawCell(x, y, angle);\n      }\n    }\n\n    this.mustRedraw = false;\n  }\n\n  createCanvas() {\n    let canvas = document.createElement(\"canvas\");\n    let width = window.innerWidth;\n    let height = window.innerHeight-4;\n    canvas.height = height;\n    canvas.width = width;\n    canvas.setAttribute(\"id\", \"flowField\");\n    canvas.style = \"position: absolute; background:transparent; top:0; left:0; z-index:-1\";\n    document.getElementsByTagName(\"BODY\")[0].appendChild(canvas);\n    return canvas.getContext(\"2d\");\n  }\n}\n","import Mover from '../../../../src/lib/Mover';\nimport Vector from '../../../../src/lib/Vector';\nimport Utils from '../../../../src/lib/Utils';\n\nexport default class Vehicle extends Mover {\n\n  constructor(x, y, mass, angle, size, speed, force) {\n    super(x, y, mass, angle, 0, speed);\n\n    this.radius = size || 3;\n    this.maxSpeed = speed || 4;\n    this.maxSteeringForce = force || 2;\n    this.elapsedTime = 0;\n    this.wanderRandomPoint = null;\n  }\n\n  stayWithinWalls(d) {\n    d = d || 100;\n\n    const width = window.innerWidth;\n    const height = window.innerHeight-4;\n\n    if (this.location.getX() <= d) {\n      let desired = new Vector({ x: this.maxSpeed, y: this.velocity.y });\n      let steer = desired.substract(this.velocity);\n      steer.limit(this.maxSteeringForce);\n      this.applyForce(steer);\n    }\n\n    if (this.location.getX() >= (width - d)) {\n      let desired = new Vector({ x: -this.maxSpeed, y: this.velocity.y });\n      let steer = desired.substract(this.velocity);\n      steer.limit(this.maxSteeringForce);\n      this.applyForce(steer);\n    }\n\n    if (this.location.getY() <= d) {\n      let desired = new Vector({ x: this.velocity.x, y: this.maxSpeed });\n      let steer = desired.substract(this.velocity);\n      steer.limit(this.maxSteeringForce);\n      this.applyForce(steer);\n    }\n\n    if (this.location.getY() > (height - d)) {\n      let desired = new Vector({ x: this.velocity.x, y: -this.maxSpeed });\n      let steer = desired.substract(this.velocity);\n      steer.limit(this.maxSteeringForce);\n      this.applyForce(steer);\n    }\n  }\n\n  follow(field, z) {\n    if (!field.isReady) {\n      console.warn(\"Vehicle :: follow: FollowField is not ready\");\n      return;\n    }\n    z = z || false;\n    let desired = field.lookup(this.location, z);\n    desired.multiplyBy(this.maxSpeed);\n\n    let steer = desired.substract(this.velocity);\n    steer.limit(this.maxSteeringForce);\n\n    this.applyForce(steer);\n  }\n\n  wander(wanderDist, wanderRadius, delta, ctx) {\n    wanderRadius = wanderRadius || 50;\n    wanderDist = wanderDist || 150;\n\n    let interval = 500;\n    let nextPosition = this.nextPosition(wanderDist);\n\n    this.elapsedTime += delta;\n    if (this.elapsedTime >= interval || this.wanderRandomPoint === null) {\n      this.elapsedTime = 0;\n\n      let angle = Math.random() * Math.PI * 2;\n      let x = Math.cos(angle) * wanderRadius;\n      let y = Math.sin(angle) * wanderRadius;\n      this.wanderRandomPoint = new Vector({ x: x, y: y });\n    }\n\n    let target = nextPosition.add(this.wanderRandomPoint);\n\n    // Draw circle\n    if (ctx) {\n      ctx.beginPath();\n      ctx.fillStyle = \"rgba(192, 11, 67, 0.3);\"\n      ctx.arc(nextPosition.getX(), nextPosition.getY(), wanderRadius, 0, Math.PI * 2, true);\n      ctx.stroke();\n      ctx.closePath();\n\n      // Draw point\n      ctx.beginPath();\n      ctx.fillStyle = \"rgba(192, 11, 67, 1);\"\n      ctx.fillRect(target.getX(), target.getY(), 4, 4);\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    this.seek(target);\n  }\n\n  persuit(target) {\n    let nextPosition = target.nextPosition();\n\n    this.seek(nextPosition);\n  }\n\n  seek(target) {\n    // Calculate desired velocity\n    let desired = target.substract(this.location);\n    let d = desired.getLength();\n\n    desired.normalize();\n\n    if (d < 100) {\n      let m = Utils.mapRange(d, 0, 100, 0, this.maxSpeed);\n      desired.multiplyBy(m);\n    } else {\n      desired.multiplyBy(this.maxSpeed);\n    }\n\n    let steer = desired.substract(this.velocity);\n    steer.limit(this.maxSteeringForce);\n\n    this.applyForce(steer);\n  }\n\n  flee(target) {\n    // Calculate desired velocity\n    let desired = target.substract(this.location);\n    desired.normalize();\n    desired.multiplyBy(this.maxSpeed);\n    desired.multiplyBy(-1);\n\n    let steer = desired.substract(this.velocity);\n    steer.limit(this.maxSteeringForce);\n\n    this.applyForce(steer);\n  }\n\n  nextPosition(length) {\n    let v = this.velocity.copy();\n    if (length) {\n      v.setLength(length);\n    }\n    return this.location.add(v);\n  }\n\n  draw(ctx) {\n    let theta = this.velocity.getAngle() + Math.PI/2;\n\n    ctx.save();\n    ctx.translate(this.location.getX(), this.location.getY());\n    ctx.rotate(theta);\n    ctx.fillStyle = \"rgba(0,0,0,0.8)\";\n    ctx.beginPath();\n    ctx.lineTo(0, -this.radius*2);\n    ctx.lineTo(-this.radius, this.radius*2);\n    ctx.lineTo(this.radius, this.radius*2);\n    ctx.fill();\n    ctx.closePath();\n\n    // ctx.beginPath();\n    // ctx.strokeStyle = \"red\";\n    // ctx.moveTo(0,0);\n    // ctx.lineTo(0, -this.radius*2);\n    // ctx.stroke();\n    // ctx.closePath();\n\n    ctx.restore();\n  }\n};\n","/*\n *  Feature Toggling\n *\n *  Activete/Hide features that are in process of development or under testing\n *  Once a feature is accepted to be includded must be removed from the\n *  feature toggle scheme\n */\n\n const FEATURE_TOGGLE = {\n   FPS_CONTROL: true                // FPS controll for AnimationPlayer class\n };\n\n export default FEATURE_TOGGLE;\n","import FEATURE_TOGGLE from '../../src/feature-toggle';\n\nexport default class AnimationPlayer {\n\n  constructor(settings) {\n    settings = settings || {};\n\n    this.window = settings.windowElement || window;\n    this.requestId = null;\n    this.playing = false;\n\n    // FPS control\n    this.fps = settings.fps || 90;\n    this.now;\n    this.lastTime = Date.now();\n    this.interval = 1000/this.fps;\n    this.delta;\n\n    this.registerEvents();\n  }\n\n  registerEvents() {\n    // Animation control: KeyDown\n    document.body.addEventListener(\"keydown\", (e) => {\n      //console.log(\"Key pressed: \", e.keyCode);\n      switch (e.keyCode) {\n        case 27:                        // Esc\n        if (this.playing) {\n          this.stop();\n          console.log(\"> Scene stopped\");\n        } else {\n          this.play();\n          console.log(\"> Playing scene\");\n        }\n        break;\n\n        case 13:\n        this.stop();\n        this.play();\n        this.stop();\n        console.log(\"> Step forward\");\n        break;\n\n        default:\n        break;\n      }\n    });\n  }\n\n  play() {\n    this.playing = true;\n    this.updateFn();\n  }\n\n  stop() {\n    if (!this.playing) {\n      return false;\n    }\n    this.window.cancelAnimationFrame(this.requestId);\n    this.playing = false;\n    this.requestId = null;\n  }\n\n  setUpdateFn(updateFn) {\n    this.updateFn = (\n      () => {\n        this.requestId = this.window.requestAnimationFrame(this.updateFn);\n        this.now = Date.now();\n        this.delta = this.now - this.lastTime;\n\n        if (this.delta > this.interval) {\n          this.lastTime = this.now - (this.delta % this.interval);\n          updateFn(this.delta, this.lastTime);\n        }\n        return;\n\n\n        updateFn();\n\n      });\n    }\n\n    updateFn() {\n      console.warn(\"Player update function has not been set.\");\n    }\n  }\n","import FEATURE_TOGGLE from '../../src/feature-toggle';\n\nclass LineUtils {\n\n  /*\n   *  Given a vector will return: { endpoint, slope, intercept }\n   *  1- Find missing segment points adding velocity to location on\n   *     both vectors.\n   *  2- Find the slope value for both lines\n   *  3- Find the y-intercept value for both lines.\n   */\n  vectorLineProps(v) {\n    let e = v.location.add(v.velocity);\n    let s = this.slope(v.location.getY(), e.getY(), v.location.getX(), e.getX());\n    let i = this.yIntercept(e.getX(), e.getY(), s);\n    return { endpoint: e, slope: s, intercept: i };\n  }\n\n  intersect(m1, b1, m2, b2) {\n    let x = (b2-b1)/(m1-m2);\n    let y = this.lineEq(x, m1, b1);\n    return { x: x, y: y };\n  }\n\n  lineEq(x, m, b) {\n    return m*x + b;\n  }\n\n  slope(y1, y2, x1, x2) {\n    return (y1 - y2) / (x1 - x2);\n  }\n\n  yIntercept(x, y, m) {\n    return y - m * x;\n  }\n\n  xIntercept(x, y, m) {\n    return x - m / x;\n  }\n}\n\nlet instance = new LineUtils();\n\nexport default instance;\n","import Vector from './Vector';\nimport LineUtils from './LineUtils.js';\n\nexport default class Mover {\n\n  constructor(x, y, mass, angle, maxLength, length, radius) {\n    this.length = length || 0;\n    this.angle = angle || 0\n    this.mass = mass || 1;\n    this.maxLength = maxLength || 0;\n    this.radius = radius || 10;\n    this.acceleration = new Vector({ x: 0, y: 0 });\n    this.velocity = new Vector({ x: 0, y: 0, length: length, angle: angle });\n    this.location = new Vector({ x: x, y: y });\n  }\n\n  applyForce(force) {\n    // Acceleration = mass / force: create a new vector with it\n    let f = force.divide(this.mass);\n    this.acceleration.addTo(f);\n  }\n\n  update() {\n    this.velocity.addTo(this.acceleration);\n\n    this.location.addTo(this.velocity);\n    // Reset acceleration vector\n    this.acceleration.multiplyBy(0);\n  }\n\n  findIntercept(m) {\n    let line1 = LineUtils.vectorLineProps(this);\n    let line2 = LineUtils.vectorLineProps(m);\n    return LineUtils.intersect(line1.slope, line1.intercept, line2.slope, line2.intercept);\n  }\n\n  isInside(liquid) {\n    return this.location.getY() > liquid.getY() && this.location.getY() <= liquid.getH() + liquid.getY();\n  }\n\n  drag(liquid) {\n    let speed = this.velocity.getLength();\n    let dragMagnitude = liquid.getC() * speed * speed;\n    let drag = this.velocity.multiply(-1);\n\n    drag.normalize();\n    drag.multiplyBy(dragMagnitude);\n    this.applyForce(drag);\n  }\n\n  checkEdges(width, height) {\n    if (this.location.getX() >= width) {\n      this.location.setX(width);\n      this.velocity.setX(this.velocity.getX() *  -1);\n    } else if (this.location.getX() <= 0) {\n      this.location.setX(0);\n      this.velocity.setX(this.velocity.getX() *  -1);\n    }\n\n    if (this.location.getY() >= height) {\n      this.location.setY(height);\n      this.velocity.setY(this.velocity.getY() * -1);\n    } else if (this.location.getY() <= 0) {\n      this.location.setY(0);\n      this.velocity.setY(this.velocity.getY() * -1);\n    }\n  }\n\n  resetVelocity() {\n    this.velocity.multiplyBy(0);\n  }\n}\n","module.exports = Perlin;\n\nfunction Perlin() {\n  this.p = [];\n  for (var i=0; i < 256 ; i++) {\n    this.p[256+i] = this.p[i] = this.permutation[i];\n  }\n};\n\nPerlin.prototype.p;\nPerlin.prototype.permutation = [151,160,137,91,90,15,\n   131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n   190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n   88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n   77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n   102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n   135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n   5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n   223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n   129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n   251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n   49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n   138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n   ];\n\nPerlin.prototype.noise = function(x, y, z) {\n\n  // This is probably not how you are supposed to do this\n  y = y || 0;\n  z = z || 0;\n\n  var X = Math.floor(x) & 255;                       // FIND UNIT CUBE THAT\n  var Y = Math.floor(y) & 255;                       // CONTAINS POINT.\n  var Z = Math.floor(z) & 255;\n  x -= Math.floor(x);                                // FIND RELATIVE X,Y,Z\n  y -= Math.floor(y);                                // OF POINT IN CUBE.\n  z -= Math.floor(z);\n\n  var u = this.fade(x);                                   // COMPUTE FADE CURVES\n  var v = this.fade(y);                                   // FOR EACH OF X,Y,Z.\n  var w = this.fade(z);\n  var A = this.p[X  ]+Y, AA = this.p[A]+Z, AB = this.p[A+1]+Z;      // HASH COORDINATES OF\n  var B = this.p[X+1]+Y, BA = this.p[B]+Z, BB = this.p[B+1]+Z;      // THE 8 CUBE CORNERS,\n\n  return this.lerp(w, this.lerp(v, this.lerp(u, this.grad(this.p[AA  ], x  , y  , z   ),  // AND ADD\n                                                this.grad(this.p[BA  ], x-1, y  , z   )), // BLENDED\n                                   this.lerp(u, this.grad(this.p[AB  ], x  , y-1, z   ),  // RESULTS\n                                                this.grad(this.p[BB  ], x-1, y-1, z   ))),// FROM  8\n                      this.lerp(v, this.lerp(u, this.grad(this.p[AA+1], x  , y  , z-1 ),  // CORNERS\n                                                this.grad(this.p[BA+1], x-1, y  , z-1 )), // OF CUBE\n                                  this.lerp(u,  this.grad(this.p[AB+1], x  , y-1, z-1 ),\n                                                this.grad(this.p[BB+1], x-1, y-1, z-1 ))))*0.5+0.5;\n};\n\nPerlin.prototype.fade = function(t)        { return t * t * t * (t * (t * 6 - 15) + 10); }\nPerlin.prototype.lerp = function(t, a, b) { return a + t * (b - a); }\nPerlin.prototype.grad = function(hash, x, y, z) {\n  var h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n  var u = h<8 ? x : y;                    // INTO 12 GRADIENT DIRECTIONS.\n  var v = h<4 ? y : h==12||h==14 ? x : z;\n  return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);\n}\n\n\n// Seeding needs to be implemented\n// This is from: https://gist.github.com/leegrey/3253283\n// Based on: http://techcraft.codeplex.com/discussions/264014\n\nPerlin.prototype.seed = function( seed ) {\n  seed = seed || 1337;\n  this.permutation = []; //make permutation unique between instances\n  if( SeededRandomNumberGenerator == undefined ) {\n    console.log( 'Perlin.setSeed() - warning,'\n      +' SeededRandomNumberGenerator is undefined' );\n    return;\n  }\n  var seedRND = new SeededRandomNumberGenerator();\n  seedRND.seed = seed;\n  var i;\n  for ( i = 0; i < 256; i++)  {\n    this.permutation[i] = i;\n  }\n  for (  i = 0; i < 256; i++) {\n    var k = seedRND.randomIntRange( 0, 256 - i ) + i; //(256 - i) + i;\n    var l = this.permutation[i];\n    this.permutation[i] = this.permutation[k];\n    this.permutation[k] = l;\n    this.permutation[i + 256] = this.permutation[i];\n  }\n  for (var i = 0; i < 256 ; i++) {\n    this.p[256+i] = this.p[i] = this.permutation[i];\n  }\n};\n\nvar SeededRandomNumberGenerator = function (seed, m, n) {\n  if (!(this instanceof SeededRandomNumberGenerator)) {\n    return new SeededRandomNumberGenerator(seed, m, n);\n  }\n  this.m = m || 82947121839;\n  this.n = n || 328347242343;\n  this.seed = seed || 1337;\n};\n\nSeededRandomNumberGenerator.prototype.randomIntRange = function (start, end) {\n  this.seed = (this.seed * this.n) % this.m;\n  return this.seed % (start - end) + start;\n};\n","import FEATURE_TOGGLE from '../../src/feature-toggle';\n\nclass Utils {\n\n  constructor() {\n    this.cache = {};\n  }\n\n  cacheStore(caller, key, value) {\n    if (!this.cache.hasOwnProperty(caller)) {\n      this.cache[caller] = {};\n    }\n    this.cache[caller][key] = value;\n  }\n\n  cacheRetrieve(caller, key) {\n    let fnCache = this.cache[caller] || [];\n    let value = fnCache[key] || false;\n    return value;\n  }\n\n  /*\n   *  Get 'n' points from a circular shaped 'Particle' object\n   */\n  getCirclePoints(p, n, radius) {\n    n = n || 8;\n    radius = radius || p.radius || 0;\n\n    let angle = -1;\n    let angleStep = (Math.PI * 2) / n;\n    let points = [];\n\n    for (let i=0; i<n; i++) {\n      let cData = this.cacheRetrieve(\"getCirclePoints\", angle);\n      let cos = cData.cos || Math.cos(angle);\n      let sin = cData.sin || Math.sin(angle);\n      let pt = {\n        x: p.x + (cos * p.radius),\n        y: p.y + (sin * p.radius)\n      };\n      points.push(pt);\n      if (!cData) {\n        this.cacheStore(\"getCirclePoints\", angle, {cos: cos, sin: sin});\n      }\n      angle += angleStep;\n    }\n\n    // Add the center point\n    return points;\n  }\n\n  montecarlo() {\n    while(true) {\n      let r1 = Math.random();\n      let p = r1;\n      let r2 = Math.random();\n      if (r2 < p) {\n        return r1;\n      }\n    }\n  }\n\n  lerp(norm, min, max) {\n    return (max - min) * norm + min;\n  }\n\n  quadraticBezier(p0, p1, p2, t, pFinal) {\n    pFinal = pFinal || {};\n    pFinal.x = Math.pow(1 - t, 2) * p0.x + (1 - t) * 2 * t * p1.x + t * t * p2.x;\n    pFinal.y = Math.pow(1 - t, 2) * p0.y + (1 - t) * 2 * t * p1.y + t * t * p2.y;\n    return pFinal;\n  }\n\n  cubicBezier(p0, p1, p2, p3, t, pFinal) {\n    pFinal = pFinal || {};\n    pFinal.x = Math.pow(1 - t, 3) * p0.x + Math.pow(1 - t, 2) * 3 * t * p1.x + (1 - t) * 3 * t * t * p2.x + t * t * t * p3.x;\n    pFinal.y = Math.pow(1 - t, 3) * p0.y + Math.pow(1 - t, 2) * 3 * t * p1.y + (1 - t) * 3 * t * t * p2.y + t * t * t * p3.y;\n    return pFinal;\n  }\n\n  distance(p0, p1) {\n    let dx = p0.x - p1.x;\n    let dy = p0.y - p1.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  distanceXY(x0, y0, x1, y1) {\n    let dx = x1 - x0;\n    let dy = y1 - y0;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  // TODO: Check if and why we need to parseInt() the result\n  mapRange(value, low1, high1, low2, high2) {\n    return result = low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n    let result = low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n    if (low2 === parseInt(low2, 10) || high2 === parseInt(high2, 10)) {\n      result = parseInt(result);\n    }\n    return result;\n  }\n\n  inRange(value, min, max) {\n    return value >= Math.min(min, max) && value <= Math.max(min, max);\n  }\n\n  rangeIntersect(min0, max0, min1, max1) {\n    return  Math.max(min0, max0) >= Math.min(min1, max1) &&\n    Math.min(min0, max0) <= Math.max(min1, max1);\n  }\n\n  randomRange(min, max) {\n    return min + Math.random() * (max - min);\n  }\n\n  constrain(e,t,r) {\n    return e>r?r:e<t?t:e;\n  }\n\n  circleCollision(c0, c1) {\n    return this.distance(c0, c1) <= c0.radius + c1.radius;\n  }\n\n  rectangleCollision(r0, r1) {\n    return  this.rangeIntersect(r0.x, r0.x + r0.width, r1.x, r1.x + r1.width) &&\n    this.rangeIntersect(r0.y, r0.y + r0.height, r1.y, r1.y + r1.height);\n  }\n\n  circlePointCollision(px, py, circle) {\n    return this.distanceXY(px, py, circle.x, circle.y) < circle.radius;\n  }\n\n  rectanglePointCollision(px, py, rect) {\n    return  this.inRange(px, rect.x, rect.x + rect.width) &&\n    this.inRange(py, rect.y, rect.y + rect.height);\n  }\n\n  uniqueID() {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n      s4() + '-' + s4() + s4() + s4();\n  }\n\n  randomColor() {\n    return \"#000000\".replace(/0/g,function(){return (~~(Math.random()*16)).toString(16);});\n  }\n\n  rad2deg(r) {\n    return r * 180 / Math.PI;\n  }\n\n  deg2rad(d) {\n    return d * Math.PI / 180;\n  }\n}\n\nlet instance = new Utils();\n\nexport default instance;\n","import FEATURE_TOGGLE from '../../src/feature-toggle';\n\nexport default class Vector {\n\n  constructor(settings) {\n    settings = settings || {};\n    settings.x = settings.x || 0;\n    settings.y = settings.y || 0;\n    settings.length = settings.length || 0;\n    settings.angle = settings.angle || 0;\n\n    this._x = settings.x;\n    this._y = settings.y;\n\n    if (settings.length) {\n      this.setLength(settings.length);\n    }\n    if (settings.angle) {\n      this.setAngle(settings.angle);\n    }\n  }\n\n  setX(value) {\n    this._x = value;\n  }\n\n  getX(value) {\n    return this._x;\n  }\n\n  setY(value) {\n    this._y = value;\n  }\n\n  getY(value) {\n    return this._y;\n  }\n\n  setAngle(angle) {\n    let length = this.getLength();\n    this._x = Math.cos(angle) * length;\n    this._y = Math.sin(angle) * length;\n  }\n\n  getAngle() {\n    return Math.atan2(this._y, this._x);\n  }\n\n  setLength(length) {\n    let angle = this.getAngle();\n    this._x = Math.cos(angle) * length;\n    this._y = Math.sin(angle) * length;\n  }\n\n  getLength() {\n    return Math.sqrt(this._x * this._x + this._y * this._y);\n  }\n\n  add(vector) {\n    return new Vector({ x: this._x + vector.getX(), y: this._y + vector.getY() });\n  }\n\n  substract(vector) {\n    return new Vector({ x: this._x - vector.getX(), y: this._y - vector.getY() });\n  }\n\n  multiply(value) {\n    return new Vector({ x: this._x * value, y: this._y * value });\n  }\n\n  divide(value) {\n    return new Vector({ x: this._x / value, y: this._y / value });\n  }\n\n  addTo(vector) {\n    this._x += vector.getX();\n    this._y += vector.getY();\n  }\n\n  substractFrom(vector) {\n    this._x -= vector.getX();\n    this._y -= vector.getY();\n  }\n\n  multiplyBy(value) {\n    this._x *= value;\n    this._y *= value;\n  }\n\n  divideBy(value) {\n    this._x /= value;\n    this._y /= value;\n  }\n\n  dot(p) {\n    return this._x*p._x + this._y*p._y;\n  }\n\n  copy() {\n    return new Vector({\n      x: this.getX(),\n      y: this.getY()\n    });\n  }\n\n  normalize() {\n    var length = this.getLength();\n    if (length != 0) {\n      this.divideBy(length);\n    }\n  }\n\n  limit(n) {\n    if (this.getLength() > n) {\n      this.setLength(n);\n    }\n  }\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}